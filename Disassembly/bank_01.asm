org $018000

DATA_018000:                    ;$018000    | AND table, used by the line-guided sprites.
    db $80,$40,$20,$10,$08,$04,$02,$01



IsTouchingObjSide:              ;-----------| Subroutine (JSR) to check if a sprite is touching the sides of a solid block.
    LDA.w $1588,X               ;$018008    |
    AND.b #$03                  ;$01800B    |
    RTS                         ;$01800D    |

IsOnGround:                     ;-----------| Subroutine (JSR) to check if a sprite is touching the top of a solid block.
    LDA.w $1588,X               ;$01800E    |
    AND.b #$04                  ;$018011    |
    RTS                         ;$018013    |

IsTouchingCeiling:              ;-----------| Subroutine (JSR) to check if a sprite is touching the bottom of a solid block.
    LDA.w $1588,X               ;$018014    |
    AND.b #$08                  ;$018017    |
    RTS                         ;$018019    |



UpdateYPosNoGrvty:              ;-----------| Subroutine (JSL) to update a sprite's Y position without applying gravity.
    PHB                         ;$01801A    |
    PHK                         ;$01801B    |
    PLB                         ;$01801C    |
    JSR SubSprYPosNoGrvty       ;$01801D    |
    PLB                         ;$018020    |
    RTL                         ;$018021    |

UpdateXPosNoGrvty:              ;-----------| Subroutine (JSL) to update a sprite's X position without applying gravity.
    PHB                         ;$018022    |
    PHK                         ;$018023    |
    PLB                         ;$018024    |
    JSR SubSprXPosNoGrvty       ;$018025    |
    PLB                         ;$018028    |
    RTL                         ;$018029    |

UpdateSpritePos:                ;-----------| Subroutine (JSL) to update a sprite's position and apply gravity. Also processes object interaction if set to do so.
    PHB                         ;$01802A    |
    PHK                         ;$01802B    |
    PLB                         ;$01802C    |
    JSR SubUpdateSprPos         ;$01802D    |
    PLB                         ;$018030    |
    RTL                         ;$018031    |

SprSprInteract:                 ;-----------| Subroutine (JSL) to check for interaction between a sprite and all other sprites.
    PHB                         ;$018032    |
    PHK                         ;$018033    |
    PLB                         ;$018034    |
    JSR SubSprSprInteract       ;$018035    |
    PLB                         ;$018038    |
    RTL                         ;$018039    |

SprSprPMarioSprRts:             ;-----------| Subroutine (JSL) to process interaction between a sprite and both other sprites and Mario.
    PHB                         ;$01803A    |
    PHK                         ;$01803B    |
    PLB                         ;$01803C    |
    JSR SubSprSprPMarioSpr      ;$01803D    |
    PLB                         ;$018040    |
    RTL                         ;$018041    |

GenericSprGfxRt0:               ;-----------| Subroutine (JSL) to get graphics for some sprites. This one creates four 8x8 tiles in a 16x16 arrangement.
    PHB                         ;$018042    |
    PHK                         ;$018043    |
    PLB                         ;$018044    |
    JSR SubSprGfx0Entry0        ;$018045    |
    PLB                         ;$018048    |
    RTL                         ;$018049    |

InvertAccum:                    ;-----------| Subroutine (JSR) to invert the accumulator.
    EOR.b #$FF                  ;$01804A    |
    INC A                       ;$01804C    |
    RTS                         ;$01804D    |





CODE_01804E:                    ;-----------| Subroutine to draw a smoke/dust sprite at the sprite's position. Specifically meant for sliding smoke from friction.
    LDA.w $1588,X               ;$01804E    |\ If the sprite is not blocked on any side, return.
    BEQ Return018072            ;$018051    |/
    LDA $13                     ;$018053    |\ 
    AND.b #$03                  ;$018055    || Only calculate once every 4 frames, completely ignore if the level is slippery.
    ORA $86                     ;$018057    ||
    BNE Return018072            ;$018059    |/
    LDA.b #$04                  ;$01805B    |\\ Distance from the sprite's left side to spawn the smoke.
    STA $00                     ;$01805D    ||
    LDA.b #$0A                  ;$01805F    ||| Distance below the sprite's top to spawn the smoke.
    STA $01                     ;$018061    |/
CODE_018063:                    ;           |
    JSR IsSprOffScreen          ;$018063    |\ If the sprite is offscreen, don't bother calculating.
    BNE Return018072            ;$018066    |/
    LDY.b #$03                  ;$018068    |\ 
CODE_01806A:                    ;           ||
    LDA.w $17C0,Y               ;$01806A    ||
    BEQ CODE_018073             ;$01806D    || Look for an empty smoke sprite slot, return if none are found.
    DEY                         ;$01806F    ||
    BPL CODE_01806A             ;$018070    ||
Return018072:                   ;           ||
    RTS                         ;$018072    |/

CODE_018073:
    LDA.b #$03                  ;$018073    |\\ Draw sliding smoke...
    STA.w $17C0,Y               ;$018075    ||/
    LDA $E4,X                   ;$018078    ||\ 
    ADC $00                     ;$01807A    |||
    STA.w $17C8,Y               ;$01807C    ||| ...at the sprite's position...
    LDA $D8,X                   ;$01807F    |||
    ADC $01                     ;$018081    |||
    STA.w $17C4,Y               ;$018083    ||/
    LDA.b #$13                  ;$018086    ||\ ...for 19 frames.
    STA.w $17CC,Y               ;$018088    |//
    RTS                         ;$01808B    |





CODE_01808C:                    ;-----------| Routine for running all the standard and cluster sprite routines.
    PHB                         ;$01808C    |
    PHK                         ;$01808D    |
    PLB                         ;$01808E    |
    LDA.w $148F                 ;$01808F    |\ 
    STA.w $1470                 ;$018092    || Refresh some addresses:
    STZ.w $148F                 ;$018095    || - Carrying something flag
    STZ.w $1471                 ;$018098    || - Standing on top of a sprite flag
    STZ.w $18C2                 ;$01809B    || - Riding cloud flag
    LDA.w $18DF                 ;$01809E    || - Yoshi's sprite slot
    STA.w $18E2                 ;$0180A1    ||
    STZ.w $18DF                 ;$0180A4    |/
    LDX.b #$0B                  ;$0180A7    |\ 
CODE_0180A9:                    ;           ||
    STX.w $15E9                 ;$0180A9    ||
    JSR CODE_0180D2             ;$0180AC    || Run each standard sprite's routine.
    JSR HandleSprite            ;$0180AF    ||
    DEX                         ;$0180B2    ||
    BPL CODE_0180A9             ;$0180B3    |/
    LDA.w $18B8                 ;$0180B5    |\ 
    BEQ CODE_0180BE             ;$0180B8    || Run cluster sprite routines.
    JSL CODE_02F808             ;$0180BA    |/
CODE_0180BE:                    ;           |
    LDA.w $18DF                 ;$0180BE    |\ 
    BNE CODE_0180C9             ;$0180C1    || Reset some Yoshi-related flags if no Yoshi exists anymore.
    STZ.w $187A                 ;$0180C3    ||
    STZ.w $188B                 ;$0180C6    |/
CODE_0180C9:                    ;           |
    PLB                         ;$0180C9    |
    RTL                         ;$0180CA    |





IsSprOffScreen:                 ;-----------| Subroutine to check if a sprite is offscreen, both horizontally and vertically.
    LDA.w $15A0,X               ;$0180CB    |
    ORA.w $186C,X               ;$0180CE    |
    RTS                         ;$0180D1    |





CODE_0180D2:                    ;-----------| Subroutine to decrement all timers and get the OAM slot for the sprite.
    PHX                         ;$0180D2    |
    TXA                         ;$0180D3    |
    LDX.w $1692                 ;$0180D4    |\ 
    CLC                         ;$0180D7    ||
    ADC.l DATA_07F0B4,X         ;$0180D8    ||
    TAX                         ;$0180DC    || Get the OAM index for the sprite.
    LDA.l DATA_07F000,X         ;$0180DD    ||
    PLX                         ;$0180E1    ||
    STA.w $15EA,X               ;$0180E2    |/
    LDA.w $14C8,X               ;$0180E5    |\ 
    BEQ Return018126            ;$0180E8    ||
    LDA $9D                     ;$0180EA    ||
    BNE Return018126            ;$0180EC    ||
    LDA.w $1540,X               ;$0180EE    || 
    BEQ CODE_0180F6             ;$0180F1    ||
    DEC.w $1540,X               ;$0180F3    ||
CODE_0180F6:                    ;           ||
    LDA.w $154C,X               ;$0180F6    ||
    BEQ CODE_0180FE             ;$0180F9    ||
    DEC.w $154C,X               ;$0180FB    ||
CODE_0180FE:                    ;           ||
    LDA.w $1558,X               ;$0180FE    ||
    BEQ CODE_018106             ;$018101    || Decrement misc sprite tables if the game isn't frozen and the sprite is functioning.
    DEC.w $1558,X               ;$018103    || Affects: $1540, $154C, $1558, $1564, $15AC, $163E, $1FE2
CODE_018106:                    ;           ||
    LDA.w $1564,X               ;$018106    ||
    BEQ CODE_01810E             ;$018109    ||
    DEC.w $1564,X               ;$01810B    ||
CODE_01810E:                    ;           ||
    LDA.w $1FE2,X               ;$01810E    ||
    BEQ CODE_018116             ;$018111    ||
    DEC.w $1FE2,X               ;$018113    ||
CODE_018116:                    ;           ||
    LDA.w $15AC,X               ;$018116    ||
    BEQ CODE_01811E             ;$018119    ||
    DEC.w $15AC,X               ;$01811B    ||
CODE_01811E:                    ;           ||
    LDA.w $163E,X               ;$01811E    ||
    BEQ Return018126            ;$018121    ||
    DEC.w $163E,X               ;$018123    |/
Return018126:                   ;           |
    RTS                         ;$018126    |





HandleSprite:                   ;-----------| Primary routine for handling all sprite states.
    LDA.w $14C8,X               ;$018127    |
    BEQ EraseSprite             ;$01812A    |
    CMP.b #$08                  ;$01812C    |
    BNE CODE_018133             ;$01812E    |
    JMP CallSpriteMain          ;$018130    |

CODE_018133:
    JSL ExecutePtr              ;$018133    |

SpriteStatusRtPtr:              ;$018137    | Sprite status pointers.
    dw EraseSprite                          ; 0 - Empty
    dw CallSpriteInit                       ; 1 - Slot taken, not yet initialized.
    dw HandleSprKilled                      ; 2 - Killed and falling offscreen
    dw HandleSprSmushed                     ; 3 - Killed by smushing (Rex, Koopa, classic Goomba, P-switch)
    dw HandleSprSpinJump                    ; 4 - Killed with a spinjump
    dw HandleSprLava                        ; 5 - Killed by lava
    dw HandleSprLvlEnd                      ; 6 - Turned into a coin by a goal tape
    dw Return018156                         ; 7 - In Yoshi's mouth
    dw Return0185C2                         ; 8 - Alive/normal (-> CallSpriteMain)
    dw HandleSprStunned                     ; 9 - Stationary/carryable
    dw HandleSprKicked                      ; A - Kicked/thrown
    dw HandleSprCarried                     ; B - Carried
    dw HandleGoalPowerup                    ; C - Carried into the goal tape (turned into powerup)



EraseSprite:                    ;-----------| Routine that runs for sprite status 0, to re-initialize $161A.
    LDA.b #$FF                  ;$018151    |\ Indicate that no sprite is using this index.
    STA.w $161A,X               ;$018153    |/
Return018156:                   ;           |
    RTS                         ;$018156    |



HandleGoalPowerup:              ;-----------| Routine to handle a powerup spawned from an item carried into a goal tape (sprite status C).
    JSR CallSpriteMain          ;$018157    |] Run MAIN code for the powerup.
    JSR SubOffscreen0Bnk1       ;$01815A    |] Process offscreen from -$40 to +$30.
    JSR SubUpdateSprPos         ;$01815D    |] Update X/Y position, apply gravity, and process interaction with blocks.
    DEC $AA,X                   ;$018160    |\ 
    DEC $AA,X                   ;$018162    ||
    JSR IsOnGround              ;$018164    || Apply, uh, more gravity.
    BEQ Return01816C            ;$018167    ||
    JSR SetSomeYSpeed           ;$018169    |/
Return01816C:                   ;           |
    RTS                         ;$01816C    |



HandleSprLvlEnd:                ;-----------| Redirect to handle a sprite turned into a coin by a goal tape (sprite status 6).
    JSL LvlEndSprCoins          ;$01816D    |
    RTS                         ;$018171    |



CallSpriteInit:                 ;-----------| Routine to initialize a sprite (sprite status 1).
    LDA.b #$08                  ;$018172    |
    STA.w $14C8,X               ;$018174    |
    LDA $9E,X                   ;$018177    |
    JSL ExecutePtr              ;$018179    |

SpriteInitPtr:                  ;$01817D    | Sprite INIT pointers.
    dw InitStandardSprite                   ; 00 - Green shell-less Koopa
    dw InitStandardSprite                   ; 01 - Red shell-less Koopa
    dw InitStandardSprite                   ; 02 - Blue shell-less Koopa
    dw InitStandardSprite                   ; 03 - Yellow shell-less Koopa
    dw InitStandardSprite                   ; 04 - Green Koopa
    dw InitStandardSprite                   ; 05 - Red Koopa
    dw InitStandardSprite                   ; 06 - Blue Koopa
    dw InitStandardSprite                   ; 07 - Yellow Koopa
    dw InitStandardSprite                   ; 08 - Green winged Koopa, flying
    dw InitGrnBounceKoopa                   ; 09 - Green winged Koopa, bouncing
    dw InitStandardSprite                   ; 0A - Red winged Koopa, vertical
    dw InitStandardSprite                   ; 0B - Red winged Koopa, horizontal
    dw InitStandardSprite                   ; 0C - Yellow winged Koopa
    dw InitBomb                             ; 0D - Bob-Omb
    dw InitKeyHole                          ; 0E - Keyhole
    dw InitStandardSprite                   ; 0F - Goomba
    dw InitStandardSprite                   ; 10 - Winged Goomba
    dw InitStandardSprite                   ; 11 - Buzzy Beetle
    dw UnusedInit                           ; 12 - Unused
    dw InitStandardSprite                   ; 13 - Spiny
    dw InitStandardSprite                   ; 14 - Falling Spiny
    dw Return01B011                         ; 15 - Fish, horizontal
    dw InitVerticalFish                     ; 16 - Fish, vertical
    dw InitFish                             ; 17 - Fish, flying (spawned by sprite D1)
    dw InitFish                             ; 18 - Fish, jumping
    dw InitMsgPSideExit                     ; 19 - Display text from level message 1
    dw InitPiranha                          ; 1A - Classic Piranha Plant
    dw Return0185C2                         ; 1B - Bouncing Football
    dw InitBulletBill                       ; 1C - Bullet Bill
    dw InitStandardSprite                   ; 1D - Hopping flame
    dw InitLakitu                           ; 1E - Lakitu
    dw InitMagikoopa                        ; 1F - Magikoopa
    dw Return018583                         ; 20 - Magikoopa's magic
    dw FaceMario                            ; 21 - Moving coin
    dw InitVertNetKoopa                     ; 22 - Green vertical net Koopa
    dw InitVertNetKoopa                     ; 23 - Red vertical net Koopa
    dw InitHorzNetKoopa                     ; 24 - Green horizontal net Koopa
    dw InitHorzNetKoopa                     ; 25 - Red horizontal net Koopa
    dw InitThwomp                           ; 26 - Thwomp
    dw Return01AEA2                         ; 27 - Thwimp
    dw InitBigBoo                           ; 28 - Big Boo
    dw InitKoopaKid                         ; 29 - Koopa Kid
    dw InitDownPiranha                      ; 2A - Upside-down Piranha Plant
    dw Return0185C2                         ; 2B - Sumo Brother's lightning
    dw InitYoshiEgg                         ; 2C - Yoshi egg
    dw InitKeyBabyYoshi                     ; 2D - Baby Yoshi
    dw InitSpikeTop                         ; 2E - Spike Top
    dw Return0185C2                         ; 2F - Portable springboard
    dw FaceMario                            ; 30 - Dry Bones that throws bones
    dw FaceMario                            ; 31 - Bony Beetle
    dw FaceMario                            ; 32 - Dry Bones that stays on ledges
    dw InitPodoboo                          ; 33 - Podoboo/vertical fireball
    dw Return0185C2                         ; 34 - Boss fireball
    dw InitYoshi                            ; 35 - Yoshi
    dw Return0185C2                         ; 36 - Unused
    dw InitBigBoo                           ; 37 - Boo
    dw InitEerie                            ; 38 - Eerie (straight)
    dw InitEerie                            ; 39 - Eerie (wave)
    dw InitUrchin                           ; 3A - Urchin (fixed distance)
    dw InitUrchin                           ; 3B - Urchin (wall detect)
    dw InitUrchinWallFllw                   ; 3C - Urchin (wall follow)
    dw InitRipVanFish                       ; 3D - Rip Van Fish
    dw InitPSwitch                          ; 3E - P-switch
    dw Return0185C2                         ; 3F - Para-Goomba
    dw Return0185C2                         ; 40 - Para-Bomb
    dw Return01843D                         ; 41 - Dolphin (long jump)
    dw Return01843D                         ; 42 - Dolphin (short jump)
    dw Return01843D                         ; 43 - Dolphin (vertical)
    dw Return01843D                         ; 44 - Torpedo Ted
    dw Return0185C2                         ; 45 - Directional coins
    dw InitDigginChuck                      ; 46 - Diggin' Chuck
    dw Return0183EE                         ; 47 - Swimming/jumping fish
    dw Return0183EE                         ; 48 - Diggin' Chuck's rock
    dw InitGrowingPipe                      ; 49 - Growing/shrinking pipe
    dw Return0183EE                         ; 4A - Goal Sphere
    dw InitPiranha                          ; 4B - Pipe-dwelling Lakitu
    dw InitExplodingBlk                     ; 4C - Exploding block
    dw InitMontyMole                        ; 4D - Monty Mole (ground-dwelling)
    dw InitMontyMole                        ; 4E - Monty Mole (ledge-dwelling)
    dw InitPiranha                          ; 4F - Jumping Piranha Plant
    dw InitPiranha                          ; 50 - Jumping Piranha Plant (fireballs)
    dw FaceMario                            ; 51 - Ninji
    dw InitMovingLedge                      ; 52 - Moving Ghost House hole [changed to $0185B7 in LM v2.53+]
    dw Return0185C2                         ; 53 - Throwblock [changed to $018435 in LM v3.40+]
    dw InitClimbingDoor                     ; 54 - Revolving door for climbing net
    dw InitChckbrdPlat                      ; 55 - Checkerboard platform (horizontal)
    dw Return01B25D                         ; 56 - Flying rock platform (horizontal)
    dw InitChckbrdPlat                      ; 57 - Checkerboard platform (vertical)
    dw Return01B25D                         ; 58 - Flying rock platform (vertical)
    dw Return01B267                         ; 59 - Turnblock bridge (horz/vert)
    dw Return01B267                         ; 5A - Turnblock bridge (horz only)
    dw InitFloatingPlat                     ; 5B - Floating brown platform
    dw InitFloatChckPlat                    ; 5C - Floating checkerboard platform
    dw InitFloatingPlat                     ; 5D - Small orange floating platform
    dw InitOrangePlat                       ; 5E - Large orange floating platform
    dw InitBrwnChainPlat                    ; 5F - Swinging brown platform
    dw Return01AE90                         ; 60 - Flat switch palace switch
    dw InitFloatingSkull                    ; 61 - Skull raft
    dw InitLineBrwnPlat                     ; 62 - Brown line-guided platform
    dw InitLinePlat                         ; 63 - Brown/checkered line-guided platform
    dw InitLineRope                         ; 64 - Line-guided rope mechanism
    dw InitLineGuidedSpr                    ; 65 - Chainsaw (line-guided)
    dw InitLineGuidedSpr                    ; 66 - Upside-down chainsaw (line-guided)
    dw InitLineGuidedSpr                    ; 67 - Grinder (line-guided)
    dw InitLineGuidedSpr                    ; 68 - Fuzzy (line-guided)
    dw Return01D6C3                         ; 69 - Unused
    dw Return0185C2                         ; 6A - Coin game cloud
    dw Return01843D                         ; 6B - Wall springboard (left wall)
    dw InitPeaBouncer                       ; 6C - Wall springboard (right wall)
    dw Return0185C2                         ; 6D - Invisible solid block
    dw InitDinos                            ; 6E - Dino Rhino
    dw InitDinos                            ; 6F - Dino Torch
    dw InitPokey                            ; 70 - Pokey
    dw InitSuperKoopa                       ; 71 - Super Koopa (red cape)
    dw InitSuperKoopa                       ; 72 - Super Koopa (yellow cape)
    dw InitSuperKoopaFthr                   ; 73 - Super Koopa (ground/feather)
    dw InitPowerUp                          ; 74 - Mushroom
    dw InitPowerUp                          ; 75 - Flower
    dw InitPowerUp                          ; 76 - Star
    dw InitPowerUp                          ; 77 - Feather
    dw InitPowerUp                          ; 78 - 1up mushroom
    dw Return018583                         ; 79 - Growing vine
    dw Return018583                         ; 7A - Firework
    dw InitGoalTape                         ; 7B - Goal tape
    dw Return0185C2                         ; 7C - Peach
    dw Return0185C2                         ; 7D - P-Balloon
    dw Return0185C2                         ; 7E - Flying red coin
    dw Return0185C2                         ; 7F - Flying golden mushroom
    dw InitKeyBabyYoshi                     ; 80 - Key
    dw InitChangingItem                     ; 81 - Changing item
    dw InitBonusGame                        ; 82 - Bonus game sprite
    dw InitFlyingQBlock                     ; 83 - Flying question block (left)
    dw InitFlyingQBlock                     ; 84 - Flying question block (back and forth)
    dw Return0185C2                         ; 85 - Unused
    dw InitWiggler                          ; 86 - Wiggler
    dw Return0185C2                         ; 87 - Lakitu's cloud
    dw InitWingedCage                       ; 88 - Winged cage
    dw Return01843D                         ; 89 - Layer 3 Smash
    dw Return0185C2                         ; 8A - Yoshi's House bird
    dw Return0185C2                         ; 8B - Puff of smoke from Yoshi's House
    dw InitMsgPSideExit                     ; 8C - Side exit enable
    dw Return0185C2                         ; 8D - Ghost house exit sign and door
    dw Return0185C2                         ; 8E - Invisible "Warp Hole"
    dw InitScalePlats                       ; 8F - Scale platforms
    dw FaceMario                            ; 90 - Large green gas bubble
    dw Return018869                         ; 91 - Chargin' Chuck
    dw InitChuck                            ; 92 - Splittin' Chuck
    dw InitChuck                            ; 93 - Bouncin' Chuck
    dw InitWhistlinChuck                    ; 94 - Whistlin' Chuck
    dw InitClappinChuck                     ; 95 - Clappin' Chuck
    dw Return018869                         ; 96 - Chargin' Chuck (unused)
    dw InitPuntinChuck                      ; 97 - Puntin' Chuck
    dw InitPitchinChuck                     ; 98 - Pitchin' Chuck
    dw Return0183EE                         ; 99 - Volcano Lotus
    dw InitSumoBrother                      ; 9A - Sumo Brother
    dw InitHammerBrother                    ; 9B - Hammer Bro.
    dw Return0185C2                         ; 9C - Hammer Bro. platform
    dw InitBubbleSpr                        ; 9D - Bubble
    dw InitBallNChain                       ; 9E - Ball 'n' Chain
    dw InitBanzai                           ; 9F - Banzai Bill
    dw InitBowserScene                      ; A0 - Bowser
    dw Return0185C2                         ; A1 - Bowser's bowling ball
    dw Return0185C2                         ; A2 - MechaKoopa
    dw InitGrayChainPlat                    ; A3 - Rotating gray platform
    dw InitFloatSpkBall                     ; A4 - Floating spike ball
    dw InitFuzzBallPSpark                   ; A5 - Sparky/Fuzzy (wall follow)
    dw InitFuzzBallPSpark                   ; A6 - Hothead
    dw Return0185C2                         ; A7 - Iggy's ball
    dw Return0185C2                         ; A8 - Blargg
    dw InitReznor                           ; A9 - Reznor
    dw InitFishbone                         ; AA - Fishbone
    dw FaceMario                            ; AB - Rex
    dw InitWoodSpike                        ; AC - Wooden spike (down)
    dw InitWoodSpike2                       ; AD - Wooden spike (up)
    dw Return0185C2                         ; AE - Fishin' Boo
    dw Return0185C2                         ; AF - Boo Block
    dw InitDiagBouncer                      ; B0 - Reflecting stream of Boo Buddies
    dw InitCreateEatBlk                     ; B1 - Creating/eating block
    dw Return0185C2                         ; B2 - Falling spike
    dw InitBowsersFire                      ; B3 - Bowser statue fireball
    dw FaceMario                            ; B4 - Grinder (ground)
    dw Return0185C2                         ; B5 - Falling Podoboo (unused)
    dw InitDiagBouncer                      ; B6 - Reflecting Podoboo
    dw Return0185C2                         ; B7 - Carrot Top Lift (up-right)
    dw Return0185C2                         ; B8 - Carrot Top Lift (up-left)
    dw Return0185C2                         ; B9 - Info Box
    dw InitTimedPlat                        ; BA - Timed Lift
    dw Return0185C2                         ; BB - Moving castle block
    dw InitBowserStatue                     ; BC - Bowser statue
    dw InitSlidingKoopa                     ; BD - Sliding Blue Koopa
    dw Return0185C2                         ; BE - Swooper
    dw FaceMario                            ; BF - Mega Mole
    dw InitGrayLavaPlat                     ; C0 - Sinking gray platform on lava
    dw InitMontyMole                        ; C1 - Flying gray turnblocks
    dw FaceMario                            ; C2 - Blurp
    dw FaceMario                            ; C3 - Porcu-Puffer
    dw Return0185C2                         ; C4 - Falling gray platform
    dw FaceMario                            ; C5 - Big Boo BossBig Boo Boss
    dw Return018313                         ; C6 - Spotlight/disco ball
    dw Return0185C2                         ; C7 - Invisible mushroom
    dw Return0185C2                         ; C8 - Light switch





InitGrayLavaPlat:               ;-----------| Sinking gray platform INIT
    INC $D8,X                   ;$01830F    |\ Lower the sprite two pixels from its spawn point.
    INC $D8,X                   ;$018311    |/
Return018313:                   ;           |
    RTS                         ;$018313    |





InitBowserStatue:               ;-----------| Bowser statue INIT
    INC.w $157C,X               ;$018314    | Face left.
    JSR InitExplodingBlk        ;$018317    |\ Get the type of statue based on its X position.
    STY $C2,X                   ;$01831A    |/
    CPY.b #$02                  ;$01831C    |\ 
    BNE Return018325            ;$01831E    || If the jumping statue, change its palette to palette 8.
    LDA.b #$01                  ;$018320    ||
    STA.w $15F6,X               ;$018322    |/
Return018325:                   ;           |
    RTS                         ;$018325    |





InitTimedPlat:                  ;-----------| Timed lift INIT
    LDY.b #$3F                  ;$018326    |\\ Timer for the 1-second platform.
    LDA $E4,X                   ;$018328    ||
    AND.b #$10                  ;$01832A    ||
    BNE CODE_018330             ;$01832C    ||
    LDY.b #$FF                  ;$01832E    ||| Timer for the 4-second platform.
CODE_018330:                    ;           ||
    TYA                         ;$018330    ||
    STA.w $1570,X               ;$018331    |/
    RTS                         ;$018334    |





YoshiPal:                       ;$018335    | Yoshi egg palettes, indexed by X position.
    db $09,$07,$05,$07

InitYoshiEgg:                   ;-----------| Colored Yoshi egg INIT
    LDA $E4,X                   ;$018339    |\ 
    LSR                         ;$01833B    ||
    LSR                         ;$01833C    ||
    LSR                         ;$01833D    ||
    LSR                         ;$01833E    || Decide egg color based on the egg's position.
    AND.b #$03                  ;$01833F    ||
    TAY                         ;$018341    ||
    LDA.w YoshiPal,Y            ;$018342    ||
    STA.w $15F6,X               ;$018345    |/
    INC.w $187B,X               ;$018348    | Set flag to not hatch immediately.
    RTS                         ;$01834B    |





DATA_01834C:                    ;$01834C    | X speeds for the reflecting boo/podoboo. Order is right, left.
    db $10,$F0

InitDiagBouncer:                ;-----------| Reflecting Boo Buddies INIT / Reflecting Podoboo INIT
    JSR FaceMario               ;$01834C    | Direct toward Mario.
    LDA.w DATA_01834C,Y         ;$018351    |\ Get initial X speed.
    STA $B6,X                   ;$018354    |/
    LDA.b #$F0                  ;$018356    | Initial Y speed.
    STA $AA,X                   ;$018358    |
    RTS                         ;$01835A    |





InitWoodSpike:                  ;-----------| Wooden spike INIT (downwards)
    LDA $D8,X                   ;$01835B    |\ 
    SEC                         ;$01835D    ||
    SBC.b #$40                  ;$01835E    ||
    STA $D8,X                   ;$018360    || Raise the spike upwards 4 tiles from its spawn position.
    LDA.w $14D4,X               ;$018362    ||
    SBC.b #$00                  ;$018365    ||
    STA.w $14D4,X               ;$018367    |/
    RTS                         ;$01836A    |

InitWoodSpike2:                 ;-----------| Wooden spike INIT (upwards)
    JMP InitMontyMole           ;$01836B    | Set the spike to initially move down/up based on its X position.





InitBowserScene:                ;-----------| Bowser INIT (redirect)
    JSL CODE_03A0F1             ;$01836E    |
    RTS                         ;$018372    |





InitSumoBrother:                ;-----------| Sumo Bro. INIT
    LDA.b #$03                  ;$018373    |
    STA $C2,X                   ;$018375    |
    LDA.b #$70                  ;$018377    | Initial timer for animation. NOTE: 4E = lift leg; 2F = shoot lightning; 00 = turn and walk
CODE_018379:                    ;           |
    STA.w $1540,X               ;$018379    |
    RTS                         ;$01837C    |





InitSlidingKoopa:               ;-----------| Sliding Blue Koopa INIT
    LDA.b #$04                  ;$01837D    |
    BRA CODE_018379             ;$01837F    |





InitGrowingPipe:                ;-----------| Growing/shrinking pipe INIT
    LDA.b #$40                  ;$018381    |
    STA.w $1534,X               ;$018383    |
    RTS                         ;$018386    |





InitBanzai:                     ;-----------| Banzai Bill INIT
    JSR SubHorzPosBnk1          ;$018387    |\ 
    TYA                         ;$01838A    || Only allow the sprite to spawn on the right of Mario.
    BNE CODE_018390             ;$01838B    || If it's to the left, erase it immediately.
    JMP OffScrEraseSprite       ;$01838D    |/
CODE_018390:                    ;           |
    LDA.b #$09                  ;$018390    |\ Shooting Banzai Bill SFX.
    STA.w $1DFC                 ;$018392    |/
    RTS                         ;$018395    |





InitBallNChain:                 ;-----------| Ball 'n' Chain INIT
    LDA.b #$38                  ;$018396    | Radius of the circle that the ball part moves in.
    BRA CODE_01839C             ;$018398    |





InitGrayChainPlat:              ;-----------| Gray platform on a chain INIT.
    LDA.b #$30                  ;$01839A    | Radius of the circle that the platform part moves in.
CODE_01839C:                    ;           |
    STA.w $187B,X               ;$01839C    |
    RTS                         ;$01839F    |





ExplodingBlkSpr:                ;$0183A0    | Sprites for the exploding block to spawn.
    db $15,$0F,$00,$04

InitExplodingBlk:               ;-----------| Exploding block INIT. Also used as a subroutine by the Bowser statue and bubble sprites.
    LDA $E4,X                   ;$0183A4    |\ 
    LSR                         ;$0183A6    ||
    LSR                         ;$0183A7    ||
    LSR                         ;$0183A8    ||
    LSR                         ;$0183A9    || Get the sprite number for the block to spawn based on its X position.
    AND.b #$03                  ;$0183AA    ||
    TAY                         ;$0183AC    ||
    LDA.w ExplodingBlkSpr,Y     ;$0183AD    ||
    STA $C2,X                   ;$0183B0    |/
    RTS                         ;$0183B2    |





DATA_0183B3:                    ;$0183B3    | X position offsets for the mushroom scale platforms.
    db $80,$40

InitScalePlats:                 ;-----------| Mushroom scales INIT
    LDA $D8,X                   ;$0183B5    |\ 
    STA.w $1534,X               ;$0183B7    || Back up the spawn Y position.
    LDA.w $14D4,X               ;$0183BA    ||
    STA.w $151C,X               ;$0183BD    |/
    LDA $E4,X                   ;$0183C0    |\ 
    AND.b #$10                  ;$0183C2    ||
    LSR                         ;$0183C4    ||
    LSR                         ;$0183C5    ||
    LSR                         ;$0183C6    ||
    LSR                         ;$0183C7    ||
    TAY                         ;$0183C8    || Set the X position for the second platform based on the spawn X position.
    LDA $E4,X                   ;$0183C9    ||
    CLC                         ;$0183CB    ||
    ADC.w DATA_0183B3,Y         ;$0183CC    ||
    STA $C2,X                   ;$0183CF    ||
    LDA.w $14E0,X               ;$0183D1    ||
    ADC.b #$00                  ;$0183D4    ||
    STA.w $1602,X               ;$0183D6    |/
    RTS                         ;$0183D9    |





InitMsgPSideExit:               ;-----------| Display Message 1 INIT
    LDA.b #$28                  ;$0183DA    | How many frames to wait before displaying the message.
    STA.w $1564,X               ;$0183DC    |  NOTE: When spawning with Mario, 00/01 will not work, and 02 will display the message before Mario.
    RTS                         ;$0183DF    |





InitYoshi:                      ;-----------| Yoshi INIT.
    DEC.w $160E,X               ;$0183E0    | Initialize the sprite slot in Yoshi's mouth to null (#$FF).
    INC.w $157C,X               ;$0183E3    | Face left.
    LDA.w $0DC1                 ;$0183E6    |\ 
    BEQ Return0183EE            ;$0183E9    || If the player already has a Yoshi, erase this one.
    STZ.w $14C8,X               ;$0183EB    |/
Return0183EE:                   ;           |
    RTS                         ;$0183ED    |





DATA_0183EF:                    ;$0183EF    | Initial Y speeds for wall-following sprites and Urchins.
    db $08
DATA_0183F0:                    ;$0183EF    | Initial Y speeds for wall-following sprites and Urchins.
    db $00,$08

InitSpikeTop:                   ;-----------| Spike Top INIT.
    JSR SubHorzPosBnk1          ;$0183F3    |\ 
    TYA                         ;$0183F5    ||
    EOR.b #$01                  ;$0183F6    ||
    ASL                         ;$0183F8    ||
    ASL                         ;$0183F9    || Set initial direction of movement towards Mario.
    ASL                         ;$0183FA    ||  Also clear the flag for being in water.
    ASL                         ;$0183FB    ||
    JSR CODE_01841D             ;$0183FC    ||
    STZ.w $164A,X               ;$0183FF    ||
    BRA CODE_01840E             ;$018402    |/


InitUrchinWallFllw:             ;-----------| Urchin, wall-following INIT
    INC $D8,X                   ;$018404    |\ 
    BNE InitFuzzBallPSpark      ;$018406    || Shift a pixel down.
    INC.w $14D4,X               ;$018408    |/
InitFuzzBallPSpark:             ;-----------| Fuzzy/Sparky INIT
    JSR InitUrchin              ;$01840B    |\ 
CODE_01840E:                    ;           ||
    LDA.w $151C,X               ;$01840E    ||
    EOR.b #$10                  ;$018411    || Store the initial direction of movement.
    STA.w $151C,X               ;$018413    ||
    LSR                         ;$018416    ||
    LSR                         ;$018417    ||
    STA $C2,X                   ;$018418    |/
    RTS                         ;$01841A    |


InitUrchin:                     ;-----------| Urchin INIT (also shared by Fuzzy/Sparky).
    LDA $E4,X                   ;$01841B    |\ 
CODE_01841D:                    ;           ||
    LDY.b #$00                  ;$01841D    ||
    AND.b #$10                  ;$01841F    ||
    STA.w $151C,X               ;$018421    ||
    BNE CODE_018427             ;$018424    || Move down (vertically) if on an even X position,
    INY                         ;$018426    ||  right (horizontally) if on an odd.
CODE_018427:                    ;           ||
    LDA.w DATA_0183EF,Y         ;$018427    ||
    STA $B6,X                   ;$01842A    ||
    LDA.w DATA_0183F0,Y         ;$01842C    ||
    STA $AA,X                   ;$01842F    |/
InitRipVanFish:                 ;           |
    INC.w $164A,X               ;$018431    | Tell the game the sprite starts in water.
    RTS                         ;$018434    |





InitKeyBabyYoshi:               ;-----------| Key INIT / Baby Yoshi INIT (also used for throwblocks in LM v3.40+)
    LDA.b #$09                  ;$018435    |\ Give it carryable status.
    STA.w $14C8,X               ;$018437    |/
    RTS                         ;$01843A    |





InitChangingItem:               ;-----------| Roulette block INIT
    INC $C2,X                   ;$01843B    |
Return01843D:                   ;           |
    RTS                         ;$01843D    |





InitPeaBouncer:                 ;-----------| Wall springboard INIT
    LDA $E4,X                   ;$01843E    |\ 
    SEC                         ;$018440    ||
    SBC.b #$08                  ;$018441    ||
    STA $E4,X                   ;$018443    || Move the springboard up 8 pixels from the spawn position.
    LDA.w $14E0,X               ;$018445    ||
    SBC.b #$00                  ;$018448    ||
    STA.w $14E0,X               ;$01844A    ||
    RTS                         ;$01844D    |/





InitPSwitch:                    ;-----------| P-switch INIT
    LDA $E4,X                   ;$01844E    |\ 
    LSR                         ;$018450    ||
    LSR                         ;$018451    ||
    LSR                         ;$018452    ||
    LSR                         ;$018453    || Get the P-switch type based on its X position.
    AND.b #$01                  ;$018454    ||
    STA.w $151C,X               ;$018456    ||
    TAY                         ;$018459    ||
    LDA.w PSwitchPal,Y          ;$01845A    ||
    STA.w $15F6,X               ;$01845D    |/
    LDA.b #$09                  ;$018460    |\ Make carryable.
    STA.w $14C8,X               ;$018462    |/
    RTS                         ;$018465    |

PSwitchPal:                     ;$018466    | YXPPCCCT for the P-switches. Blue, silver.
    db $06,$02





CODE_018468:
    JMP OffScrEraseSprite       ;$018468    |

InitLakitu:                     ;-----------| Lakitu INIT.
    LDY.b #$09                  ;$01846B    |\ 
CODE_01846D:                    ;           ||
    CPY.w $15E9                 ;$01846D    ||
    BEQ CODE_018484             ;$018470    ||
    LDA.w $14C8,Y               ;$018472    ||
    CMP.b #$08                  ;$018475    || If a Lakitu or Lakitu cloud already exists, don't allow a second one to spawn.
    BNE CODE_018484             ;$018477    ||
    LDA.w $009E,Y               ;$018479    ||
    CMP.b #$87                  ;$01847C    ||
    BEQ CODE_018468             ;$01847E    ||
    CMP.b #$1E                  ;$018480    ||
    BEQ CODE_018468             ;$018482    |/
CODE_018484:                    ;           |
    DEY                         ;$018484    |
    BPL CODE_01846D             ;$018485    |
    STZ.w $18C0                 ;$018487    |\ 
    STZ.w $18BF                 ;$01848A    || Clear some addresses relating to sprite respawn generators.
    STZ.w $18B9                 ;$01848D    |/
    LDA $D8,X                   ;$018490    |\ 
    STA.w $18C3                 ;$018492    || Respawn the Lakitu at the same height as its spawn position after being killed.
    LDA.w $14D4,X               ;$018495    ||
    STA.w $18C4                 ;$018498    |/
    JSL FindFreeSprSlot         ;$01849B    |\ 
    BMI InitMontyMole           ;$01849F    || Find an empty slot for Lakitu's cloud. If there isn't one, let the Lakitu spawn anyway (why, Nintendo?).
    STY.w $18E1                 ;$0184A1    |/
    LDA.b #$87                  ;$0184A4    |\ 
    STA.w $009E,Y               ;$0184A6    ||
    LDA.b #$08                  ;$0184A9    ||
    STA.w $14C8,Y               ;$0184AB    ||
    LDA $E4,X                   ;$0184AE    ||
    STA.w $00E4,Y               ;$0184B0    ||
    LDA.w $14E0,X               ;$0184B3    ||
    STA.w $14E0,Y               ;$0184B6    || Spawn Lakitu's cloud at Lakitu's position.
    LDA $D8,X                   ;$0184B9    ||
    STA.w $00D8,Y               ;$0184BB    ||
    LDA.w $14D4,X               ;$0184BE    ||
    STA.w $14D4,Y               ;$0184C1    ||
    PHX                         ;$0184C4    ||
    TYX                         ;$0184C5    ||
    JSL InitSpriteTables        ;$0184C6    ||
    PLX                         ;$0184CA    |/
    STZ.w $18E0                 ;$0184CB    | Clear the Lakitu cloud's evaporation timer.


InitMontyMole:                  ;-----------| Monty Mole INIT. Also used by several other sprites.
    LDA $E4,X                   ;$0184CE    |\ 
    AND.b #$10                  ;$0184D0    || Change some characteristic of the sprite based on its X position.
    STA.w $151C,X               ;$0184D2    |/
    RTS                         ;$0184D5    |





InitCreateEatBlk:               ;-----------| Creating/eating block INIT
    LDA.b #$FF                  ;$0184D6    |\ Set the sprite to start out stationary.
    STA.w $1909                 ;$0184D8    |/
    BRA InitMontyMole           ;$0184DB    |





InitBulletBill:                 ;-----------| Bullet Bill INIT
    JSR SubHorzPosBnk1          ;$0184DD    |\ 
    TYA                         ;$0184E0    || Shoot toward Mario.
    STA $C2,X                   ;$0184E1    |/
    LDA.b #$10                  ;$0184E3    |
    STA.w $1540,X               ;$0184E5    |
    RTS                         ;$0184E8    |





InitClappinChuck:               ;-----------| Clappin' Chuck INIT
    LDA.b #$08                  ;$0184E9    |
    BRA CODE_01851A             ;$0184EB    |





InitPitchinChuck:               ;-----------| Pitchin' Chuck INIT
    LDA $E4,X                   ;$0184ED    |\ 
    AND.b #$30                  ;$0184EF    ||
    LSR                         ;$0184F1    ||
    LSR                         ;$0184F2    || Set the number of baseballs to throw depending on the Chuck's X position.
    LSR                         ;$0184F3    ||
    LSR                         ;$0184F4    ||
    STA.w $187B,X               ;$0184F5    |/
    LDA.b #$0A                  ;$0184F8    |
    BRA CODE_01851A             ;$0184FA    |





InitPuntinChuck:                ;-----------| Puntin' Chuck INIT
    LDA.b #$09                  ;$0184FC    |
    BRA CODE_01851A             ;$0184FE    |


InitWhistlinChuck:              ;-----------| Whistlin' Chuck INIT
    LDA.b #$0B                  ;$018500    |
    BRA CODE_01851A             ;$018502    |


InitChuck:                      ;-----------| Bouncin' Chuck INIT / Splittin' Chuck INIT
    LDA.b #$05                  ;$018504    |
    BRA CODE_01851A             ;$018506    |


InitDigginChuck:                ;-----------| Diggin' Chuck INIT
    LDA.b #$30                  ;$018508    |
    STA.w $1540,X               ;$01850A    |
    LDA $E4,X                   ;$01850D    |\ 
    AND.b #$10                  ;$01850F    ||
    LSR                         ;$018511    || Pointless, as it gets overridden immediately.
    LSR                         ;$018512    ||  Seems like the game originally had the Diggin' Chuck's direction depend on its X position.
    LSR                         ;$018513    ||
    LSR                         ;$018514    ||
    STA.w $157C,X               ;$018515    |/
    LDA.b #$04                  ;$018518    |
CODE_01851A:                    ;           |
    STA $C2,X                   ;$01851A    |
    JSR FaceMario               ;$01851C    |
    LDA.w DATA_018526,Y         ;$01851F    |\ Set initial animation frame for the Chuck's head, based on which side of him Mario is on.
    STA.w $151C,X               ;$018522    |/
    RTS                         ;$018525    |

DATA_018526:                    ;$018526    | Initial animation frames for the Chuck's head (looking right/left).
    db $00,$04





InitSuperKoopa:                 ;-----------| Swooping Super Koopa INIT
    LDA.b #$28                  ;$018528    |\\ Initial Y speed of the swooping Super Koopas.
    STA $AA,X                   ;$01852A    |/
    BRA FaceMario               ;$01852C    |





InitSuperKoopaFthr:             ;-----------| Ground Super Koopa INIT
    JSR FaceMario               ;$01852E    |
    LDA $E4,X                   ;$018531    |\ 
    AND.b #$10                  ;$018533    || If at an even X position, leave the Koopa alone..
    BEQ CODE_018547             ;$018535    |/
    LDA.b #$10                  ;$018537    |\ 
    STA.w $1656,X               ;$018539    ||
    LDA.b #$80                  ;$01853C    || Set some tweaker bytes for the non-cape Super Koopa
    STA.w $1662,X               ;$01853E    ||  (to have it die when jumped on and not spawn a cape).
    LDA.b #$10                  ;$018541    ||
    STA.w $1686,X               ;$018543    |/
    RTS                         ;$018546    |

CODE_018547:
    INC.w $1534,X               ;$018547    | Set flag to indicate the Koopa's cape should flash.
    RTS                         ;$01854A    |





InitPokey:                      ;-----------| Pokey INIT
    LDA.b #$1F                  ;$01854B    |\\ Number of segments to give the Pokey when riding Yoshi, bitwise (---x xxxx). Max is 5 (1F).
    LDY.w $187A                 ;$01854D    ||
    BNE CODE_018554             ;$018550    ||
    LDA.b #$07                  ;$018552    ||| Number of segments to give the Pokey when not riding Yoshi, bitwise (---x xxxx). Max is 5 (1F).
CODE_018554:                    ;           |/
    STA $C2,X                   ;$018554    |
    BRA FaceMario               ;$018556    |





InitDinos:                      ;-----------| Dino Rhino INIT / Dino Torch INIT
    LDA.b #$04                  ;$018558    |
    STA.w $151C,X               ;$01855A    |

InitBomb:                       ;-----------| Bob-omb INIT
    LDA.b #$FF                  ;$01855D    | Number of frames to wait before exploding.
    STA.w $1540,X               ;$01855F    |
    BRA FaceMario               ;$018562    |





InitBubbleSpr:                  ;-----------| Bubble INIT
    JSR InitExplodingBlk        ;$018564    |\ Pick the sprite inside the bubble based on its X position.
    STY $C2,X                   ;$018567    |/
    DEC.w $1534,X               ;$018569    |
    BRA FaceMario               ;$01856C    |





InitGrnBounceKoopa:             ;-----------| Bouncing green Koopa INIT
    LDA $D8,X                   ;$01856E    |\ 
    AND.b #$10                  ;$018570    || Get its bounce height based on its spawn Y position.
    STA.w $160E,X               ;$018572    |/


InitStandardSprite:             ;-----------| Standard sprite INIT. Used by all Koopas, Goombas, Buzzy Beetles, Spinies, and the Hopping Flame.
    JSL GetRand                 ;$018575    |
    STA.w $1570,X               ;$018579    |

FaceMario:                      ;-----------| Subroutine to make a sprite face Mario.
    JSR SubHorzPosBnk1          ;$01857C    |
    TYA                         ;$01857F    |
    STA.w $157C,X               ;$018580    |
Return018583:                   ;           |
    RTS                         ;$018583    |





InitBowsersFire:                ;-----------| Bowser statue fireball INIT
    LDA.b #$17                  ;$018584    |\ Spawn flame SFX.
    STA.w $1DFC                 ;$018586    |/
    BRA FaceMario               ;$018589    |





InitPowerUp:                    ;-----------| Powerup INIT
    INC $C2,X                   ;$01858B    |
    RTS                         ;$01858D    |





InitFishbone:                   ;-----------| Fishbone INIT
    JSL GetRand                 ;$01858E    |
    AND.b #$1F                  ;$018592    |
    STA.w $1540,X               ;$018594    |
    JMP FaceMario               ;$018597    |





InitDownPiranha:                ;-----------| Upside-down Piranha Plant INIT
    ASL.w $15F6,X               ;$01859A    |\ 
    SEC                         ;$01859D    || Set the bit used by the plant's GFX routine to make it use two tiles properly.
    ROR.w $15F6,X               ;$01859E    |/
    LDA $D8,X                   ;$0185A1    |\ 
    SEC                         ;$0185A3    ||
    SBC.b #$10                  ;$0185A4    ||
    STA $D8,X                   ;$0185A6    || Shift the plant down one block from its spawn position.
    LDA.w $14D4,X               ;$0185A8    ||
    SBC.b #$00                  ;$0185AB    ||
    STA.w $14D4,X               ;$0185AD    |/


InitPiranha:                    ;-----------| Classic Piranha Plant INIT / Jumping Piranha Plant INIT / Pipe-Dwelling Lakitu INIT
    LDA $E4,X                   ;$0185B0    |\ 
    CLC                         ;$0185B2    || Offset the plant half a block right of its spawn position.
    ADC.b #$08                  ;$0185B3    ||
    STA $E4,X                   ;$0185B5    |/
    DEC $D8,X                   ;$0185B7    |\ [NOTE: in LM v2.53+, the moving Ghost House hole enters here as well]
    LDA $D8,X                   ;$0185B9    ||
    CMP.b #$FF                  ;$0185BB    || Shift the plant down a pixel.
    BNE Return0185C2            ;$0185BD    ||
    DEC.w $14D4,X               ;$0185BF    |/
Return0185C2:                   ;           |
    RTS                         ;$0185C2    |





CallSpriteMain:                 ;-----------| Run MAIN sprite routine.
    STZ.w $1491                 ;$0185C3    |
    LDA $9E,X                   ;$0185C6    |
    JSL ExecutePtr              ;$0185C8    |

SpriteMainPtr:                  ;$0185CC    | Sprite MAIN pointers.
    dw ShellessKoopas                       ; 00 - Green shell-less Koopa
    dw ShellessKoopas                       ; 01 - Red shell-less Koopa
    dw ShellessKoopas                       ; 02 - Blue shell-less Koopa
    dw ShellessKoopas                       ; 03 - Yellow shell-less Koopa
    dw Spr0to13Start                        ; 04 - Green Koopa
    dw Spr0to13Start                        ; 05 - Red Koopa
    dw Spr0to13Start                        ; 06 - Blue Koopa
    dw Spr0to13Start                        ; 07 - Yellow Koopa
    dw GreenParaKoopa                       ; 08 - Green winged Koopa, flying
    dw GreenParaKoopa                       ; 09 - Green winged Koopa, bouncing
    dw RedVertParaKoopa                     ; 0A - Red winged Koopa, vertical
    dw RedHorzParaKoopa                     ; 0B - Red winged Koopa, horizontal
    dw Spr0to13Start                        ; 0C - Yellow winged Koopa
    dw Bobomb                               ; 0D - Bob-Omb
    dw Keyhole                              ; 0E - Keyhole
    dw Spr0to13Start                        ; 0F - Goomba
    dw WingedGoomba                         ; 10 - Winged Goomba
    dw Spr0to13Start                        ; 11 - Buzzy Beetle
    dw Return01F87B                         ; 12 - Unused
    dw Spr0to13Start                        ; 13 - Spiny
    dw SpinyEgg                             ; 14 - Falling Spiny
    dw FishMain                             ; 15 - Fish, horizontal
    dw FishMain                             ; 16 - Fish, vertical
    dw GeneratedFish                        ; 17 - Fish, flying (spawned by sprite D1)
    dw JumpingFish                          ; 18 - Fish, jumping
    dw DisplayMsg1                          ; 19 - Display text from level message 1
    dw ClassicPiranhas                      ; 1A - Classic Piranha Plant
    dw Bank3SprHandler                      ; 1B - Football
    dw BulletBill                           ; 1C - Bullet Bill
    dw HoppingFlame                         ; 1D - Hopping flame
    dw Lakitu                               ; 1E - Lakitu
    dw Magikoopa                            ; 1F - Magikoopa
    dw MagikoopasMagic                      ; 20 - Magikoopa's magic
    dw PowerUpRt                            ; 21 - Moving coin
    dw ClimbingKoopa                        ; 22 - Green vertical net Koopa
    dw ClimbingKoopa                        ; 23 - Red vertical net Koopa
    dw ClimbingKoopa                        ; 24 - Green horizontal net Koopa
    dw ClimbingKoopa                        ; 25 - Red horizontal net Koopa
    dw Thwomp                               ; 26 - Thwomp
    dw Thwimp                               ; 27 - Thwimp
    dw BigBoo                               ; 28 - Big Boo
    dw KoopaKid                             ; 29 - Koopa Kid
    dw ClassicPiranhas                      ; 2A - Upside-down Piranha Plant
    dw SumosLightning                       ; 2B - Sumo Brother's lightning
    dw YoshiEgg                             ; 2C - Yoshi egg
    dw Return0185C2                         ; 2D - Baby Yoshi
    dw WallFollowers                        ; 2E - Spike Top
    dw SpringBoardMain                      ; 2F - Portable springboard
    dw DryBonesAndBeetle                    ; 30 - Dry Bones that throws bones
    dw DryBonesAndBeetle                    ; 31 - Bony Beetle
    dw DryBonesAndBeetle                    ; 32 - Dry Bones that stays on ledges
    dw Podoboo                              ; 33 - Podoboo/vertical fireball
    dw BossFireball                         ; 34 - Boss fireball
    dw YoshiMain                            ; 35 - Yoshi
    dw DATA_01E41F                          ; 36 - Unused
    dw BooPBooBlock                         ; 37 - Boo
    dw Eerie                                ; 38 - Eerie (straight)
    dw Eerie                                ; 39 - Eerie (wave)
    dw WallFollowers                        ; 3A - Urchin (fixed distance)
    dw WallFollowers                        ; 3B - Urchin (wall detect)
    dw WallFollowers                        ; 3C - Urchin (wall follow)
    dw RipVanFish                           ; 3D - Rip Van Fish
    dw DisplayMsg1                          ; 3E - P-switch
    dw ParachuteSprites                     ; 3F - Para-Goomba
    dw ParachuteSprites                     ; 40 - Para-Bomb
    dw Dolphin                              ; 41 - Dolphin (long jump)
    dw Dolphin                              ; 42 - Dolphin (short jump)
    dw Dolphin                              ; 43 - Dolphin (vertical)
    dw TorpedoTed                           ; 44 - Torpedo Ted
    dw DirectionalCoins                     ; 45 - Directional coins
    dw DigginChuck                          ; 46 - Diggin' Chuck
    dw SwimJumpFish                         ; 47 - Swimming/jumping fish
    dw DigginChucksRock                     ; 48 - Diggin' Chuck's rock
    dw GrowingPipe                          ; 49 - Growing/shrinking pipe
    dw GoalSphere                           ; 4A - Goal Sphere
    dw PipeLakitu                           ; 4B - Pipe-dwelling Lakitu
    dw ExplodingBlock                       ; 4C - Exploding block
    dw MontyMole                            ; 4D - Monty Mole (grownd-dwelling)
    dw MontyMole                            ; 4E - Monty Mole (ledge-dwelling)
    dw JumpingPiranha                       ; 4F - Jumping Piranha Plant
    dw JumpingPiranha                       ; 50 - Jumping Piranha Plant (fireballs)
    dw Bank3SprHandler                      ; 51 - Ninji
    dw MovingLedge                          ; 52 - Moving Ghost House hole
    dw Return0185C2                         ; 53 - Throwblock
    dw ClimbingDoor                         ; 54 - Revolving door for climbing net
    dw FlyingPlatforms                      ; 55 - Checkerboard platform (horizontal)
    dw FlyingPlatforms                      ; 56 - Flying rock platform (horizontal)
    dw FlyingPlatforms                      ; 57 - Checkerboard platform (vertical)
    dw FlyingPlatforms                      ; 58 - Flying rock platform (vertical)
    dw TurnBlockBridge                      ; 59 - Turnblock bridge (horz/vert)
    dw HorzTurnBlkBridge                    ; 5A - Turnblock bridge (horz only)
    dw FloatingPlatMain                     ; 5B - Floating brown platform
    dw FloatingPlatMain                     ; 5C - Floating checkerboard platform
    dw FloatingPlatMain                     ; 5D - Small orange floating platform
    dw OrangePlatform                       ; 5E - Large orange floating platform
    dw BrownChainedPlat                     ; 5F - Swinging brown platform
    dw PalaceSwitch                         ; 60 - Flat switch palace switch
    dw FloatingSkulls                       ; 61 - Skull raft
    dw LineFuzzyPPlats                      ; 62 - Brown line-guided platform
    dw LineFuzzyPPlats                      ; 63 - Brown/checkered line-guided platform
    dw LineRopePChainsaw                    ; 64 - Line-guided rope mechanism
    dw LineRopePChainsaw                    ; 65 - Chainsaw (line-guided)
    dw LineRopePChainsaw                    ; 66 - Upside-down chainsaw (line-guided)
    dw LineGrinder                          ; 67 - Grinder (line-guided)
    dw LineFuzzyPPlats                      ; 68 - Fuzzy (line-guided)
    dw Return01D6C3                         ; 69 - Unused
    dw CoinCloud                            ; 6A - Coin game cloud
    dw PeaBouncer                           ; 6B - Wall springboard (left wall)
    dw PeaBouncer                           ; 6C - Wall springboard (right wall)
    dw InvisSolidPDinos                     ; 6D - Invisible solid block
    dw InvisSolidPDinos                     ; 6E - Dino Rhino
    dw InvisSolidPDinos                     ; 6F - Dino Torch
    dw Pokey                                ; 70 - Pokey
    dw RedSuperKoopa                        ; 71 - Super Koopa (red cape)
    dw YellowSuperKoopa                     ; 72 - Super Koopa (yellow cape)
    dw FeatherSuperKoopa                    ; 73 - Super Koopa (ground/feather)
    dw PowerUpRt                            ; 74 - Mushroom
    dw FireFlowerMain                       ; 75 - Flower
    dw PowerUpRt                            ; 76-  Star
    dw FeatherMain                          ; 77 - Feather
    dw PowerUpRt                            ; 78 - 1up mushroom
    dw GrowingVine                          ; 79 - Growing vine
    dw Bank3SprHandler                      ; 7A - Firework
    dw GoalTape                             ; 7B - Goal tape
    dw Bank3SprHandler                      ; 7C - Peach
    dw BalloonKeyFlyObjs                    ; 7D - P-Balloon
    dw BalloonKeyFlyObjs                    ; 7E - Flying red coin
    dw BalloonKeyFlyObjs                    ; 7F - Flying golden mushroom
    dw BalloonKeyFlyObjs                    ; 80 - Key
    dw ChangingItem                         ; 81 - Changing item
    dw BonusGame                            ; 82 - Bonus game sprite
    dw FlyingQBlock                         ; 83 - Flying question block (left)
    dw FlyingQBlock                         ; 84 - Flying question block (back and forth)
    dw InitFlyingQBlock                     ; 85 - Unused
    dw Wiggler                              ; 86 - Wiggler
    dw LakituCloud                          ; 87 - Lakitu's cloud
    dw WingedCage                           ; 88 - Winged cage
    dw Layer3Smash                          ; 89 - Layer 3 Smash
    dw YoshisHouseBirds                     ; 8A - Yoshi's House bird
    dw YoshisHouseSmoke                     ; 8B - Puff of smoke from Yoshi's House
    dw SideExit                             ; 8C - Side exit enable
    dw GhostHouseExit                       ; 8D - Ghost house exit sign and door
    dw WarpBlocks                           ; 8E - Invisible "Warp Hole"
    dw ScalePlatforms                       ; 8F - Scale platforms
    dw GasBubble                            ; 90 - Large green gas bubble
    dw Chucks                               ; 91 - Chargin' Chuck
    dw Chucks                               ; 92 - Splittin' Chuck
    dw Chucks                               ; 93 - Bouncin' Chuck
    dw Chucks                               ; 94 - Whistlin' Chuck
    dw Chucks                               ; 95 - Clappin' Chuck
    dw Chucks                               ; 96 - Chargin' Chuck (unused)
    dw Chucks                               ; 97 - Puntin' Chuck
    dw Chucks                               ; 98 - Pitchin' Chuck
    dw VolcanoLotus                         ; 99 - Volcano Lotus
    dw SumoBrother                          ; 9A - Sumo Brother
    dw HammerBrother                        ; 9B - Hammer Bro.
    dw FlyingPlatform                       ; 9C - Hammer Bro. platform
    dw BubbleWithSprite                     ; 9D - Bubble
    dw BanzaiBnCGrayPlat                    ; 9E - Ball 'n' Chain
    dw BanzaiBnCGrayPlat                    ; 9F - Banzai Bill
    dw Bank3SprHandler                      ; A0 - Bowser
    dw Bank3SprHandler                      ; A1 - Bowser's bowling ball
    dw Bank3SprHandler                      ; A2 - MechaKoopa
    dw BanzaiBnCGrayPlat                    ; A3 - Rotating gray platform
    dw FloatingSpikeBall                    ; A4 - Floating spike ball
    dw WallFollowers                        ; A5 - Sparky/Fuzzy (wall follow)
    dw WallFollowers                        ; A6 - Hothead
    dw IggysBall                            ; A7 - Iggy's ball
    dw Bank3SprHandler                      ; A8 - Blargg
    dw Bank3SprHandler                      ; A9 - Reznor
    dw Bank3SprHandler                      ; AA - Fishbone
    dw Bank3SprHandler                      ; AB - Rex
    dw Bank3SprHandler                      ; AC - Wooden spike (down)
    dw Bank3SprHandler                      ; AD - Wooden spike (up)
    dw Bank3SprHandler                      ; AE - Fishin' Boo
    dw BooPBooBlock                         ; AF - Boo Block
    dw Bank3SprHandler                      ; B0 - Reflecting stream of Boo Buddies
    dw Bank3SprHandler                      ; B1 - Creating/eating block
    dw Bank3SprHandler                      ; B2 - Falling spike
    dw Bank3SprHandler                      ; B3 - Bowser statue fireball
    dw GroundGrinder                        ; B4 - Grinder (ground)
    dw Podoboo                              ; B5 - Falling Podoboo (unused)
    dw Bank3SprHandler                      ; B6 - Reflecting Podoboo
    dw Bank3SprHandler                      ; B7 - Carrot Top Lift (up-right)
    dw Bank3SprHandler                      ; B8 - Carrot Top Lift (up-left)
    dw Bank3SprHandler                      ; B9 - Info Box
    dw Bank3SprHandler                      ; BA - Timed Lift
    dw Bank3SprHandler                      ; BB - Moving castle block
    dw Bank3SprHandler                      ; BC - Bowser statue
    dw Bank3SprHandler                      ; BD - Sliding Koopa
    dw Bank3SprHandler                      ; BE - Swooper
    dw Bank3SprHandler                      ; BF - Mega Mole
    dw Bank3SprHandler                      ; C0 - Sinking gray platform on lava
    dw Bank3SprHandler                      ; C1 - Flying gray turnblocks
    dw Bank3SprHandler                      ; C2 - Blurp
    dw Bank3SprHandler                      ; C3 - Porcu-Puffer
    dw Bank3SprHandler                      ; C4 - Falling gray platform
    dw Bank3SprHandler                      ; C5 - Big Boo BossBig Boo Boss
    dw Bank3SprHandler                      ; C6 - Spotlight/disco ball
    dw Bank3SprHandler                      ; C7 - Invisible mushroom
    dw Bank3SprHandler                      ; C8 - Light switch



InvisSolidPDinos:               ;-----------| Invisible solid block, Dino Rhino, Dino Torch redirect
    JSL InvisBlkPDinosMain      ;$01875E    |
    RTS                         ;$018762    |



GoalSphere:                     ;-----------| Goal sphere MAIN
    JSR SubSprGfx2Entry1        ;$018763    | Draw the sprite.
    LDA $9D                     ;$018766    |\ If sprites are frozen, return.
    BNE Return018788            ;$018768    |/
    LDA $13                     ;$01876A    |\ 
    AND.b #$1F                  ;$01876C    || Make the sphere glitter.
    ORA $9D                     ;$01876E    ||
    JSR CODE_01B152             ;$018770    |/
    JSR MarioSprInteractRt      ;$018773    |\ 
    BCC Return018788            ;$018776    || If Mario touches the sphere, delete the sprite and end the level.
    STZ.w $14C8,X               ;$018778    ||
    LDA.b #$FF                  ;$01877B    ||\ 
    STA.w $1493                 ;$01877D    ||| Start goal walk.
    STA.w $0DDA                 ;$018780    ||/
    LDA.b #$0B                  ;$018783    ||\ SFX for the goal sphere music.
    STA.w $1DFB                 ;$018785    |//
Return018788:                   ;           |
    RTS                         ;$018788    |



InitReznor:                     ;-----------| Reznor INIT (redirect)
    JSL ReznorInit              ;$018789    |
    RTS                         ;$01878D    |



Bank3SprHandler:                ;-----------| Redirect for sprites in bank 03.
    JSL Bnk3CallSprMain         ;$01878E    |
    RTS                         ;$018792    |



BanzaiBnCGrayPlat:              ;-----------| Ball 'n' Chain, Banzai Bill, gray platform on a chain redirect
    JSL BanzaiPRotating         ;$018793    |
    RTS                         ;$018797    |



BubbleWithSprite:               ;-----------| Bubble redirect
    JSL BubbleSpriteMain        ;$018798    |
    RTS                         ;$01879C    |



HammerBrother:                  ;-----------| Hammer Bro. redirect
    JSL HammerBrotherMain       ;$01879D    |
    RTS                         ;$0187A1    |



FlyingPlatform:                 ;-----------| Hammer Bro. platform redirect
    JSL FlyingPlatformMain      ;$0187A2    |
    RTS                         ;$0187A6    |



InitHammerBrother:              ;-----------| Hammer Bro. INIT
    JSL Return02DA59            ;$0187A7    |   NOTE: PIXI uses this as a custom sprite initialization routine.
    RTS                         ;$0187AB    |



VolcanoLotus:                   ;-----------| Volcano Lotus redirect
    JSL VolcanoLotusMain        ;$0187AC    |
    RTS                         ;$0187B0    |



SumoBrother:                    ;-----------| Sumo Bro. redirect
    JSL SumoBrotherMain         ;$0187B1    |
    RTS                         ;$0187B5    |



SumosLightning:                 ;-----------| Sumo Bro. Lightning redirect
    JSL SumosLightningMain      ;$0187B6    |
    RTS                         ;$0187BA    |



JumpingPiranha:                 ;-----------| Jumping Piranha Plant redirect
    JSL JumpingPiranhaMain      ;$0187BB    |
    RTS                         ;$0187BF    |



GasBubble:                      ;-----------| Green gas bubble redirect
    JSL GasBubbleMain           ;$0187C0    |
    RTS                         ;$0187C4    |



Unused0187C5:                   ;-----------| Never jumped to.
    JSL SumoBrotherMain         ;$0187C5    |
    RTS                         ;$0187C9    |



DirectionalCoins:               ;-----------| Directional coins redirect
    JSL DirectionCoinsMain      ;$0187C9    |
    RTS                         ;$0187CE    |



ExplodingBlock:                 ;-----------| Exploding block redirect
    JSL ExplodingBlkMain        ;$0187CF    |
    RTS                         ;$0187D3    |



ScalePlatforms:                 ;-----------| Scale platforms redirect
    JSL ScalePlatformMain       ;$0187D4    |
    RTS                         ;$0187D8    |



InitFloatingSkull:              ;-----------| Floating skulls INIT (redirect)
    JSL FloatingSkullInit       ;$0187D9    |
    RTS                         ;$0187DD    |

FloatingSkulls:                 ;-----------| Floating skulls redirect
    JSL FloatingSkullMain       ;$0187DE    |
    RTS                         ;$0187E2    |



GhostHouseExit:                 ;-----------| Ghost House exit redirect
    JSL GhostExitMain           ;$0187E3    |
    RTS                         ;$0187E7    |



WarpBlocks:                     ;-----------| Invisible warp hole redirect
    JSL WarpBlocksMain          ;$0187E8    |
    RTS                         ;$0187EC    |



Pokey:                          ;-----------| Pokey redirect
    JSL PokeyMain               ;$0187ED    |
    RTS                         ;$0187F1    |



RedSuperKoopa:                  ;-----------| Red swooping Super Koopa redirect
    JSL SuperKoopaMain          ;$0187F2    |
    RTS                         ;$0187F6    |



YellowSuperKoopa:               ;-----------| Yellow swooping Super Koopa redirect
    JSL SuperKoopaMain          ;$0187F7    |
    RTS                         ;$0187FB    |



FeatherSuperKoopa:              ;-----------| Feathered/normal Super Koopa redirect
    JSL SuperKoopaMain          ;$0187FC    |
    RTS                         ;$018800    |



PipeLakitu:                     ;-----------| Pipe-dwelling Lakitu redirect
    JSL PipeLakituMain          ;$018801    |
    RTS                         ;$018805    |



DigginChuck:                    ;-----------| Diggin' Chuck redirect
    JSL ChucksMain              ;$018806    |
    RTS                         ;$01880A    |



SwimJumpFish:                   ;-----------| Swimming/jumping fish redirect
    JSL SwimJumpFishMain        ;$01880B    |
    RTS                         ;$01880F    |



DigginChucksRock:               ;-----------| Diggin' Chuck's rock redirect
    JSL ChucksRockMain          ;$018810    |
    RTS                         ;$018814    |



GrowingPipe:                    ;-----------| Growing/shrinking pipe redirect
    JSL GrowingPipeMain         ;$018815    |
    RTS                         ;$018819    |



YoshisHouseBirds:               ;-----------| Yoshi's House birds redirect
    JSL BirdsMain               ;$01881A    |
    RTS                         ;$01881E    |



YoshisHouseSmoke:               ;-----------| Yoshi's House smoke redirect
    JSL SmokeMain               ;$01881F    |
    RTS                         ;$018823    |



SideExit:                       ;-----------| Side exit redirect
    JSL SideExitMain            ;$018824    |
    RTS                         ;$018828    |



InitWiggler:                    ;-----------| Wiggler INIT (redirect)
    JSL WigglerInit             ;$018829    |
    RTS                         ;$01882D    |

Wiggler:                        ;-----------| Wiggler redirect
    JSL WigglerMain             ;$01882E    |
    RTS                         ;$018832    |



CoinCloud:                      ;-----------| Coin game cloud redirect 
    JSL CoinCloudMain           ;$018833    |
    RTS                         ;$018837    |



TorpedoTed:                     ;-----------| Torpedo Ted redirect
    JSL TorpedoTedMain          ;$018838    |
    RTS                         ;$01883C    |



Layer3Smash:                    ;-----------| Layer 3 Smash redirect
    PHB                         ;$01883D    |
    LDA.b #$02                  ;$01883E    |
    PHA                         ;$018840    |
    PLB                         ;$018841    |
    JSL Layer3SmashMain         ;$018842    |
    PLB                         ;$018846    |
    RTS                         ;$018847    |



PeaBouncer:                     ;-----------| Wall springboard redirect
    PHB                         ;$018848    |
    LDA.b #$02                  ;$018849    |
    PHA                         ;$01884B    |
    PLB                         ;$01884C    |
    JSL PeaBouncerMain          ;$01884D    |
    PLB                         ;$018851    |
    RTS                         ;$018852    |



RipVanFish:                     ;-----------| Rip Van Fish redirect
    PHB                         ;$018853    |
    LDA.b #$02                  ;$018854    |
    PHA                         ;$018856    |
    PLB                         ;$018857    |
    JSL RipVanFishMain          ;$018858    |
    PLB                         ;$01885C    |
    RTS                         ;$01885D    |



WallFollowers:                  ;-----------| Spike Top, Urchin, HotHead and Sparky/Fuzzy redirect
    PHB                         ;$01885E    |
    LDA.b #$02                  ;$01885F    |
    PHA                         ;$018861    |
    PLB                         ;$018862    |
    JSL WallFollowersMain       ;$018863    |
    PLB                         ;$018867    |
    RTS                         ;$018868    |

Return018869:                   ;           |
    RTS                         ;$018869    |



Chucks:                         ;-----------| Chargin', Splittin', Bouncin', Whistlin', Clappin', Puntin', and Pitchin' Chuck redirect
    JSL ChucksMain              ;$01886A    |
    RTS                         ;$01886E    |



InitWingedCage:                 ;-----------| Layer 3 Winged Cage INIT (redirect)
    PHB                         ;$01886F    |
    LDA.b #$02                  ;$018870    |
    PHA                         ;$018872    |
    PLB                         ;$018873    |
    JSL Return02CBFD            ;$018874    |
    PLB                         ;$018878    |
    RTS                         ;$018879    |

WingedCage:                     ;-----------| Layer 3 Winged Cage redirect
    PHB                         ;$01887A    |
    LDA.b #$02                  ;$01887B    |
    PHA                         ;$01887D    |
    PLB                         ;$01887E    |
    JSL WingedCageMain          ;$01887F    |
    PLB                         ;$018883    |
    RTS                         ;$018884    |

    
    
Dolphin:                        ;-----------| Dolphin redirect
    PHB                         ;$018885    |
    LDA.b #$02                  ;$018886    |
    PHA                         ;$018888    |
    PLB                         ;$018889    |
    JSL DolphinMain             ;$01888A    |
    PLB                         ;$01888E    |
    RTS                         ;$01888F    |



InitMovingLedge:                ;-----------| Moving Ghost House hole INIT
    DEC $D8,X                   ;$018890    | NOTE: with Lunar Magic v2.53+, this is unused,
    RTS                         ;$018892    |  and $0185B7 is instead used for initialization.

MovingLedge:                    ;-----------| Moving Ghost House hole redirect
    JSL MovingLedgeMain         ;$018893    |
    RTS                         ;$018897    |





JumpOverShells:                 ;-----------| Subroutine to make the yellow Koopa jump over shells.
    TXA                         ;$018898    |\ 
    EOR $13                     ;$018899    || Divide detection across four frames. If not the right frame, return.
    AND.b #$03                  ;$01889B    ||
    BNE Return0188AB            ;$01889D    |/
    LDY.b #$09                  ;$01889F    |\ 
JumpLoopStart:                  ;           ||
    LDA.w $14C8,Y               ;$0188A1    ||
    CMP.b #$0A                  ;$0188A4    || Look for a sprite that's been thrown. Return if none exists.
    BEQ HandleJumpOver          ;$0188A6    ||
JumpLoopNext:                   ;           ||
    DEY                         ;$0188A8    ||
    BPL JumpLoopStart           ;$0188A9    |/
Return0188AB:                   ;           |
    RTS                         ;$0188AB    |

HandleJumpOver:
    LDA.w $00E4,Y               ;$0188AC    |\ Store some clipping values.
    SEC                         ;$0188AF    ||
    SBC.b #$1A                  ;$0188B0    ||
    STA $00                     ;$0188B2    || $00 - Clipping X displacement lo
    LDA.w $14E0,Y               ;$0188B4    || 
    SBC.b #$00                  ;$0188B7    ||
    STA $08                     ;$0188B9    || $08 - Clipping X displacement hi
    LDA.b #$44                  ;$0188BB    ||
    STA $02                     ;$0188BD    || $02 - Clipping width
    LDA.w $00D8,Y               ;$0188BF    ||
    STA $01                     ;$0188C2    || $01 - Clipping Y displacement lo
    LDA.w $14D4,Y               ;$0188C4    ||
    STA $09                     ;$0188C7    || $09 - Clipping Y displacement hi
    LDA.b #$10                  ;$0188C9    ||
    STA $03                     ;$0188CB    |/ $03 - Clipping height
    JSL GetSpriteClippingA      ;$0188CD    |\ 
    JSL CheckForContact         ;$0188D1    || Check if the shell is close enough to the Koopa. If not, loop back and check for any other shells.
    BCC JumpLoopNext            ;$0188D5    |/
    JSR IsOnGround              ;$0188D7    |\ If the shell is not on the ground, loop back and check for any other shells.
    BEQ JumpLoopNext            ;$0188DA    |/
    LDA.w $157C,Y               ;$0188DC    |\ 
    CMP.w $157C,X               ;$0188DF    || If the Koopa and shell are moving in the same direction, return.
    BEQ Return0188EB            ;$0188E2    |/
    LDA.b #$C0                  ;$0188E4    | Speed that the yellow Koopa jumps at.
    STA $AA,X                   ;$0188E6    |
    STZ.w $163E,X               ;$0188E8    |
Return0188EB:                   ;           |
    RTS                         ;$0188EB    |



Spr0to13SpeedX:                 ;$0188EC    | X speeds for sprites 00-13. First two are when the "move fast" bit below is clear; second two are when set.
    db $08,$F8,$0C,$F4

Spr0to13Prop:                   ;$0188F0    | Various properties for the sprites 00-13. Format: ak?? jfls
    db $00,$02,$03,$0D,$40,$42,$43,$45      ; a = animate twice as fast in air, k = use 32x16 tilemap (also draws wings on sprites 08+), ?? = unknown/unused?
    db $50,$50,$50,$5C,$DD,$05,$00,$20      ; j = jump over shells, f = follow Mario, l = stay on ledges, s = move faster
    db $20,$00,$00,$00

    ; Shell-less Koopa misc RAM:
    ; $C2   - Used as various timers:
    ;          Set to #$20 for any Koopa when kicking a shell, including flipping one over. Used to show the "kick" animation.
    ;          Set to #$0F for a shell when it's entered and starts to shake, after which it turns into a Koopa.
    ;          Set to the value in $1540 || $1558 for a non-shell sprite when it gets kicked by a blue Koopa.
    ;          Set to the value in $1540 || $1558 for a shell while stunned.
    ; $151C - Red/blue Koopas use it a flag that says they've walked off a ledge and need to turn.
    ; $1528 - Sliding flag. Set by shell-less Koopas when sliding, and for shells when a blue Koopa is catching it.
    ; $1534 - Set to #$01 for the blue Koopa while it's catching a shell and being pushed by it.
    ; $1540 - Stun timer, set under a variety of conditions:
    ;          Set to #$20 for a Koopa when squished, for the squish graphic.
    ;          Set to #$1F for any sprite when killed via a spinjump, for the cloud graphic.
    ;          Set to #$02 for a shell on the frame a Koopa is knocked out of it, cleared the next frame.
    ;          Set to #$FF for a shell when flipped upside down, to determine when the Koopa should jump out.
    ;          Set to #$FF for a shell-less Koopa when killed through pretty much any means.
    ;          Set to #$FF for Goombas, Bob-ombs, and MechaKoopas when they're kicked by a blue Koopa.
    ; $1558 - Used for various timers.
    ;          Set to #$08 for a Koopa when squished.
    ;          Set to #$20 for a shell-less Koopa jumping into a shell. The Koopa enters the shell when it hits #$01, if possible.
    ;          Set to #$10 for a shell when it's entered and starts to shake, after which it turns into a Koopa.
    ;          Set to #$40 for any sprite when sinking in lava, after which it's erased.
    ;          Also used as a general timer to decide if normal functions are interrupted:
    ;           Set to #$20 for a blue Koopa when it stops to kick a shell.
    ;           Set to #$20 for any Koopa when kicking a shell, including flipping it over.
    ; $1564 - Timer to disable sprite contact with other sprites.
    ;          Set to #$08 for a shell when kicked by a blue Koopa.
    ;          Set to #$21 for a blue Koopa when it stops to kick a shell.
    ; $1570 - Frame counter for animation, as well as for when player-following Koopas should turn.
    ; $157C - Direction of horizontal movement. 00 = right, 01 = left
    ; $1594 - Shell-less Koopas and shells set this to each other's sprite slots when one is jumping into the other.
    ; $15AC - Timer to tell the sprite to turn around. Set to #$08 when turning, decrases every frame.
    ; $1602 - Animation frame to use.
    ;          0/1 = walking, 2 = turning, 4 = kick shell, 5/6 = stunned
    ; $160E - Used for kicking shells.
    ;          For blue Koopas: sprite slot of the shell that the blue Koopa is kicking.
    ;          For shells: sprite ID of the shell-less Koopa that jumped into them.
    ; $163E - Timer for when the Koopa is kicked out of a shell. Note that this is set when the Koopa stops, not while it's sliding. It's cleared at #$80.
    ;          Set to #$FF when a non-blue Koopa is kicked out of a shell and has stopped sliding. Cleared at #$80, after which the Koopa starts walking.
    ;          Set to #$A0 when a blue Koopa is kicked out of a shell and has stopped sliding. Cleared at #$80, after which the Koopa starts walking.
    ;          Set to #$20 for a blue Koopa when it stops to kick a shell. The shell is actually kicked when the timer reaches #$01.
    ; $187B - If non-zero, the shell becomes a disco shell. Set when a yellow Koopa jumps into a shell.
    
ShellessKoopas:                 ;-----------| Shell-less Koopa MAIN
    LDA $9D                     ;$018904    |\ If the game is NOT frozen, branch.
    BEQ CODE_018952             ;$018906    |/
CODE_018908:                    ;           |
    LDA.w $163E,X               ;$018908    |\ 
    CMP.b #$80                  ;$01890B    || Skip if the Koopa's stun timer is not >= 80.
    BCC CODE_01891F             ;$01890D    |/
    LDA $9D                     ;$01890F    |\ Skip if the game is frozen.
    BNE CODE_01891F             ;$018911    |/
CODE_018913:                    ;           |
    JSR SetAnimationFrame       ;$018913    |\ 
    LDA.w $1602,X               ;$018916    ||
    CLC                         ;$018919    || Animate stunned Koopa (frames 5/6)
    ADC.b #$05                  ;$01891A    ||
    STA.w $1602,X               ;$01891C    |/
CODE_01891F:                    ;           |
    JSR CODE_018931             ;$01891F    | Handle contact with Mario (hurt if blue Koopa, else kick-kill it).
    JSR SubUpdateSprPos         ;$018922    | Update X/Y position, apply gravity, and process interaction with blocks.
    STZ $B6,X                   ;$018925    |\ 
    JSR IsOnGround              ;$018927    || Stop the Koopa and don't let it fall through the ground.
    BEQ CODE_01892E             ;$01892A    ||
    STZ $AA,X                   ;$01892C    |/
CODE_01892E:                    ;           |
    JMP CODE_018B03             ;$01892E    | Process interaction with other sprites and draw graphics, then return.

CODE_018931:                    ;```````````| Handle interaction between Mario and a stunned Koopa.
    LDA $9E,X                   ;$018931    |\ 
    CMP.b #$02                  ;$018933    ||
    BNE CODE_01893C             ;$018935    || If the blue Koopa and in contact with it, hurt Mario.
    JSR MarioSprInteractRt      ;$018937    ||
    BRA Return018951            ;$01893A    |/
CODE_01893C:                    ;           |
    ASL.w $167A,X               ;$01893C    |\ 
    SEC                         ;$01893F    ||
    ROR.w $167A,X               ;$018940    ||
    JSR MarioSprInteractRt      ;$018943    || If not the blue Koopa and in contact with it, kick-kill it.
    BCC CODE_01894B             ;$018946    ||
    JSR CODE_01B12A             ;$018948    ||
CODE_01894B:                    ;           ||
    ASL.w $167A,X               ;$01894B    ||
    LSR.w $167A,X               ;$01894E    |/
Return018951:                   ;           |
    RTS                         ;$018951    |



CODE_018952:                    ;```````````| Shell-less Koopa routine when the game is not frozen; check stunned.
    LDA.w $163E,X               ;$018952    |\ Branch if the Koopa is not stunned nor stationary.
    BEQ CODE_0189B4             ;$018955    |/
    CMP.b #$80                  ;$018957    |\ 
    BNE CODE_01896B             ;$018959    ||
    JSR FaceMario               ;$01895B    || If the stun timer is 80, unstun the sprite.
    LDA $9E,X                   ;$01895E    ||  If not the blue Koopa, make it jump in the air too.
    CMP.b #$02                  ;$018960    ||
    BEQ CODE_018968             ;$018962    ||
    LDA.b #$E0                  ;$018964    ||| Speed to make the Koopa jump when flipping upright.
    STA $AA,X                   ;$018966    ||
CODE_018968:                    ;           ||
    STZ.w $163E,X               ;$018968    |/
CODE_01896B:                    ;           |
    CMP.b #$01                  ;$01896B    |\ 
    BNE CODE_018908             ;$01896D    ||
    LDY.w $160E,X               ;$01896F    ||
    LDA.w $14C8,Y               ;$018972    ||
    CMP.b #$09                  ;$018975    || Jump back and handle basic functionality if:
    BNE CODE_018908             ;$018977    ||  - This is not a blue Koopa just about to kick a shell/goomba/etc.
    LDA $E4,X                   ;$018979    ||  - The state of the sprite being kicked isn't still 09 (stationary/carryable).
    SEC                         ;$01897B    ||  - The Koopa isn't close enough to the sprite.
    SBC.w $00E4,Y               ;$01897C    ||
    CLC                         ;$01897F    ||
    ADC.b #$12                  ;$018980    ||
    CMP.b #$24                  ;$018982    ||
    BCS CODE_018908             ;$018984    |/
    JSR PlayKickSfx             ;$018986    | Play the kick sound effect.
    JSR CODE_01A755             ;$018989    | Set $C2/$1558 to #$20.
    LDY.w $157C,X               ;$01898C    |\ 
    LDA.w DATA_01A6D7,Y         ;$01898F    || Kick the sprite in the direction the Koopa is facing.
    LDY.w $160E,X               ;$018992    ||
    STA.w $00B6,Y               ;$018995    |/
    LDA.b #$0A                  ;$018998    |\ Set the sprite to a kicked status.
    STA.w $14C8,Y               ;$01899A    |/
    LDA.w $1540,Y               ;$01899D    |\ As it happens, both of these should be zero.
    STA.w $00C2,Y               ;$0189A0    |/
    LDA.b #$08                  ;$0189A3    |\ Disable contact with other sprites for 8 frames after being kicked.
    STA.w $1564,Y               ;$0189A5    |/
    LDA.w $167A,Y               ;$0189A8    |\ 
    AND.b #$10                  ;$0189AB    || If it can't be kicked like a shell (i.e. Goombas, Bob-ombs, etc.), kick it slightly upwards.
    BEQ CODE_0189B4             ;$0189AD    ||
    LDA.b #$E0                  ;$0189AF    ||| Y speed to give non-shell sprites when kicked by a blue Koopa.
    STA.w $00AA,Y               ;$0189B1    |/

CODE_0189B4:                    ;```````````| Not stunned; check sliding.
    LDA.w $1528,X               ;$0189B4    |\ If the Koopa is not sliding, skip this code.
    BEQ CODE_018A15             ;$0189B7    |/
    JSR IsTouchingObjSide       ;$0189B9    |\ 
    BEQ CODE_0189C0             ;$0189BC    || If the Koopa hits the the side of a block, stop.
    STZ $B6,X                   ;$0189BE    |/
CODE_0189C0:                    ;           |
    JSR IsOnGround              ;$0189C0    |\ 
    BEQ CODE_0189E6             ;$0189C3    ||
    LDA $86                     ;$0189C5    || 
    CMP.b #$01                  ;$0189C7    ||
    LDA.b #$02                  ;$0189C9    || Apply friction to the sliding Koopa, with slipperiness factored in.
    BCC CODE_0189CE             ;$0189CB    ||
    LSR                         ;$0189CD    ||
CODE_0189CE:                    ;           ||
    STA $00                     ;$0189CE    ||
    LDA $B6,X                   ;$0189D0    ||\ 
    CMP.b #$02                  ;$0189D2    ||| If the Koopa's speed is less than #$02, branch to stop sliding.
    BCC CODE_0189FD             ;$0189D4    ||/
    BPL CODE_0189DE             ;$0189D6    ||\ 
    CLC                         ;$0189D8    |||
    ADC $00                     ;$0189D9    |||
    CLC                         ;$0189DB    |||
    ADC $00                     ;$0189DC    ||| Decelerate the Koopa.
CODE_0189DE:                    ;           |||  Subtract #$02 in a normal level, #$01 in a slippery level.
    SEC                         ;$0189DE    |||
    SBC $00                     ;$0189DF    |||
    STA $B6,X                   ;$0189E1    ||/
    JSR CODE_01804E             ;$0189E3    |/ Spawn sliding smoke sprites at the Koopa's position.
CODE_0189E6:                    ;           |
    STZ.w $1570,X               ;$0189E6    | Don't animate.
    JSR CODE_018B43             ;$0189E9    | Run the shared routine.
    LDA.b #$E6                  ;$0189EC    | Tile to use for the blue Koopas when they're knocked out of a shell.
    LDY $9E,X                   ;$0189EE    |
    CPY.b #$02                  ;$0189F0    |
    BEQ CODE_0189F6             ;$0189F2    |
    LDA.b #$86                  ;$0189F4    | Tile to use for the green/red/yellow Koopas when they're knocked out of a shell.
CODE_0189F6:                    ;           |
    LDY.w $15EA,X               ;$0189F6    |
    STA.w $0302,Y               ;$0189F9    |
    RTS                         ;$0189FC    |

CODE_0189FD:
    JSR IsOnGround              ;$0189FD    |\ If the sprite is not on the ground, branch.
    BEQ CODE_018A0F             ;$018A00    |/
    LDA.b #$FF                  ;$018A02    |] How many frames the green/red/yellow Koopas are stunned for after being knocked out of a shell (+#$80). 
    LDY $9E,X                   ;$018A04    |
    CPY.b #$02                  ;$018A06    |
    BNE CODE_018A0C             ;$018A08    |
    LDA.b #$A0                  ;$018A0A    |] How many frames the blue Koopas are stunned for after being knocked out of a shell (+#$80). 
CODE_018A0C:                    ;           |
    STA.w $163E,X               ;$018A0C    |
CODE_018A0F:                    ;           |
    STZ.w $1528,X               ;$018A0F    | Track that the Koopa is no longer sliding.
    JMP CODE_018913             ;$018A12    | Return back for stunned Koopa interaction.


CODE_018A15:                    ;```````````| Not sliding; check catching.
    LDA.w $1534,X               ;$018A15    |\ Branch if the the sprite isn't catching a shell/goomba/etc.
    BEQ CODE_018A88             ;$018A18    |/
    LDY.w $160E,X               ;$018A1A    |\ 
    LDA.w $14C8,Y               ;$018A1D    ||
    CMP.b #$0A                  ;$018A20    || Clear the "catching" flag and branch if the shell has stopped.
    BEQ CODE_018A29             ;$018A22    ||
    STZ.w $1534,X               ;$018A24    ||
    BRA CODE_018A62             ;$018A27    |/

CODE_018A29:                    ;```````````| Blue Koopa is catching a shell (or Goomba/Bob-omb/MechaKoopa).
    STA.w $1528,Y               ;$018A29    | Set the sliding flag.
    JSR IsTouchingObjSide       ;$018A2C    |\ 
    BEQ CODE_018A38             ;$018A2F    ||
    LDA.b #$00                  ;$018A31    || If the Koopa is pushed into a solid block, clear the X speed for both sprites.
    STA.w $00B6,Y               ;$018A33    ||
    STA $B6,X                   ;$018A36    |/
CODE_018A38:                    ;           |
    JSR IsOnGround              ;$018A38    |\ 
    BEQ CODE_018A62             ;$018A3B    ||
    LDA $86                     ;$018A3D    ||
    CMP.b #$01                  ;$018A3F    ||
    LDA.b #$02                  ;$018A41    || Apply friction to both sprites, with slipperiness factored in.
    BCC CODE_018A46             ;$018A43    ||
    LSR                         ;$018A45    ||
CODE_018A46:                    ;           ||
    STA $00                     ;$018A46    ||
    LDA.w $00B6,Y               ;$018A48    ||\ 
    CMP.b #$02                  ;$018A4B    ||| If the shell's speed is less than #$02, branch to stop sliding.
    BCC CODE_018A69             ;$018A4D    ||/
    BPL CODE_018A57             ;$018A4F    ||\ 
    CLC                         ;$018A51    |||
    ADC $00                     ;$018A52    |||
    CLC                         ;$018A54    |||
    ADC $00                     ;$018A55    ||| Decelerate the two sprites.
CODE_018A57:                    ;           |||  Subtract #$02 in a normal level, #$01 in a slippery level.
    SEC                         ;$018A57    |||
    SBC $00                     ;$018A58    |||
    STA.w $00B6,Y               ;$018A5A    |||
    STA $B6,X                   ;$018A5D    ||/
    JSR CODE_01804E             ;$018A5F    |/ Spawn sliding smoke sprites at the Koopa's position.
CODE_018A62:                    ;           |
    STZ.w $1570,X               ;$018A62    | Don't animate.
    JSR CODE_018B43             ;$018A65    | Run the shared routine.
    RTS                         ;$018A68    |

CODE_018A69:                    ;```````````| Blue Koopa has just stopped a shell (or Goomba/Bob-omb/MechaKoopa).
    LDA.b #$00                  ;$018A69    |\ 
    STA $B6,X                   ;$018A6B    || Clear both sprites' X speed.
    STA.w $00B6,Y               ;$018A6D    |/
    STZ.w $1534,X               ;$018A70    | Clear catching flag.
    LDA.b #$09                  ;$018A73    |\ Make the sprite stationary/carryable.
    STA.w $14C8,Y               ;$018A75    |/
    PHX                         ;$018A78    |
    TYX                         ;$018A79    |\ 
    JSR CODE_01AA0B             ;$018A7A    ||
    LDA.w $1540,X               ;$018A7D    || If the sprite is a Goomba/Bob-omb/MechaKoopa, reset their stun timer to #$FF.
    BEQ CODE_018A87             ;$018A80    ||
    LDA.b #$FF                  ;$018A82    ||
    STA.w $1540,X               ;$018A84    |/
CODE_018A87:                    ;           |
    PLX                         ;$018A87    |


CODE_018A88:                    ;```````````| Not catching; check kicking/flipping.
    LDA $C2,X                   ;$018A88    |\ If the Koopa is not kicking/flipping a shell, branch.
    BEQ CODE_018A9B             ;$018A8A    |/
    DEC $C2,X                   ;$018A8C    |
    CMP.b #$08                  ;$018A8E    |\ 
    LDA.b #$04                  ;$018A90    ||| Animation frame to use when it kicks a shell (including to flip a shell over).
    BCS CODE_018A96             ;$018A92    ||
    LDA.b #$00                  ;$018A94    ||| Animation frame to use for a few frames after kicking before it starts moving again.
CODE_018A96:                    ;           ||
    STA.w $1602,X               ;$018A96    |/
    BRA CODE_018B00             ;$018A99    | Run the shared routine.


CODE_018A9B:                    ;```````````| Not kicking/flipping; check entering.
    LDA.w $1558,X               ;$018A9B    |\ 
    CMP.b #$01                  ;$018A9E    || If not about to enter a shell, branch to the general sprite code.
    BNE Spr0to13Main            ;$018AA0    |/
    LDY.w $1594,X               ;$018AA2    |\ 
    LDA.w $14C8,Y               ;$018AA5    ||
    CMP.b #$08                  ;$018AA8    ||
    BCC Return018AD9            ;$018AAA    ||
    LDA.w $00AA,Y               ;$018AAC    ||
    BMI Return018AD9            ;$018AAF    || Return if:
    LDA.w $009E,Y               ;$018AB1    ||  - The shell is no longer alive.
    CMP.b #$21                  ;$018AB4    ||  - The shell has Y speed.
    BEQ Return018AD9            ;$018AB6    ||  - The shell turned into a coin.
    JSL GetSpriteClippingA      ;$018AB8    ||  - The Koopa and shell aren't touching anymore.
    PHX                         ;$018ABC    ||
    TYX                         ;$018ABD    ||
    JSL GetSpriteClippingB      ;$018ABE    ||
    PLX                         ;$018AC2    ||
    JSL CheckForContact         ;$018AC3    ||
    BCC Return018AD9            ;$018AC7    |/
    JSR OffScrEraseSprite       ;$018AC9    | Erase the Koopa.
    LDY.w $1594,X               ;$018ACC    |\ 
    LDA.b #$10                  ;$018ACF    ||| Number of frames to shake the Koopa shell for after a Koopa enters it.
    STA.w $1558,Y               ;$018AD1    |/
    LDA $9E,X                   ;$018AD4    |\ Track the sprite ID of the Koopa that just jumped into the shell.
    STA.w $160E,Y               ;$018AD6    |/
Return018AD9:                   ;           |
    RTS                         ;$018AD9    |





    ; Bob-Omb misc RAM:
    ; $C2   - Set equal to the stun timer when the Bob-omb is kicked or capespinned. Does not decrement.
    ; $1534 - Set to #$01 when it explodes.
    ; $1540 - Explosion countdown timer. If the Bob-omb is stationary/carryable, it'll start flashing when the timer is below #$40.
    ;          Set to #$FF on spawn. At #$00, it becomes stationary/carryable and resets the timer to #$40.
    ;          Set to #$FF when it's kicked by a blue Koopa.
    ;          Set to #$FF when it's hit/kicked by Mario.
    ;          Set to #$80 when spawned from a para-Bomb.
    ;          Set to #$40 when the bomb actually explodes.
    ; $1558 - Timer for sinking in lava.
    ; $1564 - Timer to disable sprite contact with other sprites. Specifically set when stopped, dropped, or kicked.
    ; $1570 - Frame counter for animation.
    ; $157C - Direction of horizontal movement. 00 = right, 01 = left
    ; $15AC - Timer to tell the sprite to turn around. Set to #$08 when turning, decreases every frame.
    ; $1602 - Animation frame to use.
    ;          0/1 = walking, 02 = turning

ExplodeBomb:                    ;-----------| Bob-omb explosion subroutine.
    PHB                         ;$018ADA    |
    LDA.b #$02                  ;$018ADB    |
    PHA                         ;$018ADD    |
    PLB                         ;$018ADE    |
    JSL ExplodeBombRt           ;$018ADF    | Go blow up.
    PLB                         ;$018AE3    |
    RTS                         ;$018AE4    |

Bobomb:                         ;-----------| Bob-omb MAIN
    LDA.w $1534,X               ;$018AE5    |\ If exploding, use the subroutine for that instead.
    BNE ExplodeBomb             ;$018AE8    |/
    LDA.w $1540,X               ;$018AEA    |\ If not exploding yet and hasn't finished counting down the stun timer, run the general sprite code.
    BNE Spr0to13Start           ;$018AED    |/
    LDA.b #$09                  ;$018AEF    |\ Else, stop it and make it carryable when it's about to explode.
    STA.w $14C8,X               ;$018AF1    |/  (relevant code at $019624)
    LDA.b #$40                  ;$018AF4    |\ Stun the Bob-omb and set immediately set to flash.
    STA.w $1540,X               ;$018AF6    |/
    JMP SubSprGfx2Entry1        ;$018AF9    | Draw a 1-tile 16x16 sprite.





Spr0to13Start:                  ;-----------| Starting MAIN for: All normal Koopas, Yellow Winged Koopas, Bob-ombs, Goombas, Buzzy Beetles, and Spinies.
    LDA $9D                     ;$018AFC    |\ If the game is not frozen, branch to the MAIN.
    BEQ Spr0to13Main            ;$018AFE    |/
CODE_018B00:                    ;           |
    JSR MarioSprInteractRt      ;$018B00    | Process standard Mario-Sprite interaction.
CODE_018B03:                    ;           |
    JSR SubSprSprInteract       ;$018B03    | Process interaction with other sprites.
    JSR Spr0to13Gfx             ;$018B06    | Draw graphics.
    RTS                         ;$018B09    |



Spr0to13Main:                   ;-----------| Shared routine for most sprites 0 to 13.
    JSR IsOnGround              ;$018B0A    |\ Branch if the sprite is not on ground.
    BEQ CODE_018B2E             ;$018B0D    |/
    LDY $9E,X                   ;$018B0F    |\ 
    LDA.w Spr0to13Prop,Y        ;$018B11    || 
    LSR                         ;$018B14    ||
    LDY.w $157C,X               ;$018B15    ||
    BCC CODE_018B1C             ;$018B18    ||
    INY                         ;$018B1A    ||
    INY                         ;$018B1B    ||
CODE_018B1C:                    ;           || Set the sprite's X speed, depending on the type of slope it's standing on.
    LDA.w Spr0to13SpeedX,Y      ;$018B1C    || If the corresponding property bit is set, the sprite will move a bit faster.
    EOR.w $15B8,X               ;$018B1F    ||
    ASL                         ;$018B22    ||
    LDA.w Spr0to13SpeedX,Y      ;$018B23    ||
    BCC CODE_018B2C             ;$018B26    ||
    CLC                         ;$018B28    ||
    ADC.w $15B8,X               ;$018B29    ||
CODE_018B2C:                    ;           ||
    STA $B6,X                   ;$018B2C    |/
CODE_018B2E:                    ;           |
    LDY.w $157C,X               ;$018B2E    |\ 
    TYA                         ;$018B31    ||
    INC A                       ;$018B32    ||
    AND.w $1588,X               ;$018B33    || If the sprite walks into the side of a block, stop it.
    AND.b #$03                  ;$018B36    ||
    BEQ CODE_018B3C             ;$018B38    ||
    STZ $B6,X                   ;$018B3A    |/
CODE_018B3C:                    ;           |
    JSR IsTouchingCeiling       ;$018B3C    |\ 
    BEQ CODE_018B43             ;$018B3F    || If the sprite is touching a ceiling, zero its Y speed.
    STZ $AA,X                   ;$018B41    |/
CODE_018B43:                    ;```````````| Primary code for handling most sprites in 00-13.
    JSR SubOffscreen0Bnk1       ;$018B43    | Erase if offscreen.
    JSR SubUpdateSprPos         ;$018B46    | Update X/Y position, apply gravity, and process interaction with blocks.
    JSR SetAnimationFrame       ;$018B49    | Handle 2-frame animation.
    JSR IsOnGround              ;$018B4C    |\ If the sprite is not on the ground, branch.
    BEQ SpriteInAir             ;$018B4F    |/
SpriteOnGround:                 ;```````````| Sprite is on the ground.
    JSR SetSomeYSpeed           ;$018B51    | Set the sprite's ground Y speed (#$00 or #$18 depending on flat or slope).
    STZ.w $151C,X               ;$018B54    | For sprites that stay on ledges: you're currently on a ledge.
    LDY $9E,X                   ;$018B57    |\ 
    LDA.w Spr0to13Prop,Y        ;$018B59    ||
    PHA                         ;$018B5C    || Follow Mario if set to do so.
    AND.b #$04                  ;$018B5D    ||  Don't turn if not time to or already facing Mario.
    BEQ DontFollowMario         ;$018B5F    ||
    LDA.w $1570,X               ;$018B61    ||
    AND.b #$7F                  ;$018B64    ||| How often to poll for Mario's direction.
    BNE DontFollowMario         ;$018B66    ||
    LDA.w $157C,X               ;$018B68    ||
    PHA                         ;$018B6B    ||
    JSR FaceMario               ;$018B6C    ||
    PLA                         ;$018B6F    ||
    CMP.w $157C,X               ;$018B70    ||
    BEQ DontFollowMario         ;$018B73    ||
    LDA.b #$08                  ;$018B75    ||\ Turn around.
    STA.w $15AC,X               ;$018B77    |//
DontFollowMario:                ;           |
    PLA                         ;$018B7A    |\ 
    AND.b #$08                  ;$018B7B    || If the sprite is set to jump over shells (yellow Koopas), run the code for that.
    BEQ CODE_018B82             ;$018B7D    ||
    JSR JumpOverShells          ;$018B7F    |/
CODE_018B82:                    ;           |
    BRA CODE_018BB0             ;$018B82    |

SpriteInAir:                    ;```````````| Sprite is in midair.
    LDY $9E,X                   ;$018B84    |\ 
    LDA.w Spr0to13Prop,Y        ;$018B86    ||
    BPL CODE_018B90             ;$018B89    || If set to do so, animate the sprite twice as fast in mid-air.
    JSR SetAnimationFrame       ;$018B8B    ||  (only winged yellow Koopas)
    BRA CODE_018B93             ;$018B8E    ||
CODE_018B90:                    ;           ||
    STZ.w $1570,X               ;$018B90    |/
CODE_018B93:                    ;           |
    LDA.w Spr0to13Prop,Y        ;$018B93    |\ 
    AND.b #$02                  ;$018B96    || 
    BEQ CODE_018BB0             ;$018B98    ||
    LDA.w $151C,X               ;$018B9A    ||
    ORA.w $1558,X               ;$018B9D    ||
    ORA.w $1528,X               ;$018BA0    || If the sprite is set to turn on ledges and is not having a special function run, flip its direction.
    ORA.w $1534,X               ;$018BA3    ||
    BNE CODE_018BB0             ;$018BA6    ||
    JSR FlipSpriteDir           ;$018BA8    ||
    LDA.b #$01                  ;$018BAB    ||
    STA.w $151C,X               ;$018BAD    |/
CODE_018BB0:                    ;```````````| On-ground code rejoins here.
    LDA.w $1528,X               ;$018BB0    |\ 
    BEQ CODE_018BBA             ;$018BB3    ||
    JSR CODE_018931             ;$018BB5    || If the sprite is not sliding, process standard interaction with Mario.
    BRA CODE_018BBD             ;$018BB8    ||  If the sprite is sliding, process the kick-kill interaction with Mario.
CODE_018BBA:                    ;           ||
    JSR MarioSprInteractRt      ;$018BBA    |/
CODE_018BBD:                    ;           |
    JSR SubSprSprInteract       ;$018BBD    |\ Process interaction with other sprites; turn around if it hits something.
    JSR FlipIfTouchingObj       ;$018BC0    |/
Spr0to13Gfx:                    ;```````````| Routine to handle graphics for sprites 00-13.
    LDA.w $157C,X               ;$018BC3    |
    PHA                         ;$018BC6    |
    LDY.w $15AC,X               ;$018BC7    |\ 
    BEQ CODE_018BDE             ;$018BCA    ||
    LDA.b #$02                  ;$018BCC    ||
    STA.w $1602,X               ;$018BCE    ||
    LDA.b #$00                  ;$018BD1    || If the sprite's turn timer is non-zero, turn it around.
    CPY.b #$05                  ;$018BD3    || The actual turn occurs on frame 3 of the animation.
    BCC CODE_018BD8             ;$018BD5    ||
    INC A                       ;$018BD7    ||
CODE_018BD8:                    ;           ||
    EOR.w $157C,X               ;$018BD8    ||
    STA.w $157C,X               ;$018BDB    |/
CODE_018BDE:                    ;           |
    LDY $9E,X                   ;$018BDE    |\ 
    LDA.w Spr0to13Prop,Y        ;$018BE0    ||
    AND.b #$40                  ;$018BE3    || If the sprite is set to use 16x16 graphics, then draw the sprite with such and return.
    BNE CODE_018BEC             ;$018BE5    ||
    JSR SubSprGfx2Entry1        ;$018BE7    ||
    BRA DoneWithSprite          ;$018BEA    |/

CODE_018BEC:                    ;```````````| Sprite uses 16x32 graphics, not 16x16.
    LDA.w $1602,X               ;$018BEC    |\ If in an odd frame of animation, carry is set.
    LSR                         ;$018BEF    |/
    LDA $D8,X                   ;$018BF0    |\ 
    PHA                         ;$018BF2    ||
    SBC.b #$0F                  ;$018BF3    ||
    STA $D8,X                   ;$018BF5    ||
    LDA.w $14D4,X               ;$018BF7    ||
    PHA                         ;$018BFA    ||
    SBC.b #$00                  ;$018BFB    || Draw 32x16 graphics for the sprite.
    STA.w $14D4,X               ;$018BFD    ||
    JSR SubSprGfx1              ;$018C00    ||
    PLA                         ;$018C03    || 
    STA.w $14D4,X               ;$018C04    ||
    PLA                         ;$018C07    ||
    STA $D8,X                   ;$018C08    |/
    LDA $9E,X                   ;$018C0A    |\ 
    CMP.b #$08                  ;$018C0C    || Draw wings for sprites 08-0C (would also draw for 0D-13, but those aren't 32x16).
    BCC DoneWithSprite          ;$018C0E    ||
    JSR KoopaWingGfxRt          ;$018C10    |/
DoneWithSprite:                 ;           |
    PLA                         ;$018C13    |
    STA.w $157C,X               ;$018C14    |
    RTS                         ;$018C17    |





    ; Falling Spiny misc RAM:
    ; $1558 - Timer for sinking in lava.
    ; $1570 - Frame counter for animation.
    ; $157C - Direction of horizontal movement. 00 = right, 01 = left
    ; $15AC - Timer to tell the sprite to turn around. Set to #$08 when turning, decreases every frame.
    ; $1602 - Animation frame to use.
    ;          0/1 = spinning

SpinyEgg:                       ;-----------| Falling spiny MAIN
    LDA $9D                     ;$018C18    |\ Skip to just draw graphics if game frozen.
    BNE CODE_018C44             ;$018C1A    |/
    LDA.w $14C8,X               ;$018C1C    |
    CMP.b #$08                  ;$018C1F    |\ If the sprite is dead, branch.
    BNE CODE_018C44             ;$018C21    |/
    JSR SetAnimationFrame       ;$018C23    |
    JSR SubUpdateSprPos         ;$018C26    | Update X/Y position, apply gravity, and process interaction with blocks.
    DEC $AA,X                   ;$018C29    | Decrease gravity effect; also prevents it from accelerating in water.
    JSR IsOnGround              ;$018C2B    |\ 
    BEQ CODE_018C3E             ;$018C2E    ||
    LDA.b #$13                  ;$018C30    ||| Sprite to spawn when a Spiny hits the ground.
    STA $9E,X                   ;$018C32    || If the sprite hits the ground, turn it into a normal spiny.
    JSL InitSpriteTables        ;$018C34    ||
    JSR FaceMario               ;$018C38    ||
    JSR CODE_0197D5             ;$018C3B    |/
CODE_018C3E:                    ;           |
    JSR FlipIfTouchingObj       ;$018C3E    | Flip if walking into a block.
    JSR SubSprSprPMarioSpr      ;$018C41    | Process interaction with Mario and other sprites.
CODE_018C44:                    ;           |
    JSR SubOffscreen0Bnk1       ;$018C44    |
    LDA.b #$02                  ;$018C47    |\ Draw the spiny with a single 8x8 tile X/Y flipped.
    JSR SubSprGfx0Entry0        ;$018C49    |/
    RTS                         ;$018C4C    |





    ; Green Parakoopa misc RAM:
    ; $1558 - Timer for sinking in lava.
    ; $1570 - Frame counter for animation.
    ; $157C - Direction of horizontal movement. 00 = right, 01 = left
    ; $15AC - Timer to tell the sprite to turn around. Set to #$08 when turning, decreases every frame.
    ; $1602 - Animation frame to use.
    ;          0/1 = walking, 02 = turning
    ; $160E - Bounce height for the bouncing Koopa. 00 = high, 10 = low

GreenParaKoopa:                 ;-----------| Green Parakoopa MAIN. Used by both the flying and bouncing ones.
    LDA $9D                     ;$018C4D    |\ If sprites are locked, just draw the graphics.
    BNE CODE_018CB7             ;$018C4F    |/
    LDY.w $157C,X               ;$018C51    |\ 
    LDA.w Spr0to13SpeedX,Y      ;$018C54    ||
    EOR.w $15B8,X               ;$018C57    ||
    ASL                         ;$018C5A    ||
    LDA.w Spr0to13SpeedX,Y      ;$018C5B    || Set X speed. If it bounces against a slope, slow it down correspondingly.
    BCC CODE_018C64             ;$018C5E    ||  Kind of dumb though since the Koopa only gets slowed down for the frame it touches the slope.
    CLC                         ;$018C60    ||
    ADC.w $15B8,X               ;$018C61    ||
CODE_018C64:                    ;           ||
    STA $B6,X                   ;$018C64    |/
    TYA                         ;$018C66    |\ 
    INC A                       ;$018C67    ||
    AND.w $1588,X               ;$018C68    || If the Koopa lands against a very steep slope, stop it and turn it around.
    AND.b #$03                  ;$018C6B    ||
    BEQ CODE_018C71             ;$018C6D    ||
    STZ $B6,X                   ;$018C6F    |/
CODE_018C71:                    ;           |
    LDA $9E,X                   ;$018C71    |\\ 
    CMP.b #$08                  ;$018C73    ||| Branch if the bouncing Koopa, not the flying one.
    BNE CODE_018C8C             ;$018C75    ||/
    JSR SubSprXPosNoGrvty       ;$018C77    ||\ Update the flying Parakoopa's position and speed without gravity. 
    LDY.b #$FC                  ;$018C7A    |||| Upwards Y speed for the flying Koopa.
    LDA.w $1570,X               ;$018C7C    |||
    AND.b #$20                  ;$018C7F    |||| How often to change the flying Koopa's Y speed.
    BEQ CODE_018C85             ;$018C81    |||
    LDY.b #$04                  ;$018C83    |||| Downwards Y speed for the flying Koopa.
CODE_018C85:                    ;           |||
    STY $AA,X                   ;$018C85    |||
    JSR SubSprYPosNoGrvty       ;$018C87    ||/
    BRA CODE_018C91             ;$018C8A    ||
CODE_018C8C:                    ;           ||
    JSR SubUpdateSprPos         ;$018C8C    ||\ Update X/Y position, apply gravity, and process interaction with blocks.
    DEC $AA,X                   ;$018C8F    |//
CODE_018C91:                    ;           |
    JSR SubSprSprPMarioSpr      ;$018C91    | Process interaction with other sprites and Mario.
    JSR IsTouchingCeiling       ;$018C94    |\ 
    BEQ CODE_018C9B             ;$018C97    || If it hits a ceiling, clear Y speed.
    STZ $AA,X                   ;$018C99    |/
CODE_018C9B:                    ;           |
    JSR IsOnGround              ;$018C9B    |\ If it hits the ground, make it bounce.
    BEQ CODE_018CAE             ;$018C9E    ||
    JSR SetSomeYSpeed           ;$018CA0    ||| (pointless)
    LDA.b #$D0                  ;$018CA3    ||| Y speed to give the low bouncing Parakoopa when it hits the ground.
    LDY.w $160E,X               ;$018CA5    ||
    BNE CODE_018CAC             ;$018CA8    ||
    LDA.b #$B0                  ;$018CAA    ||| Y speed to give the high bouncing Parakoopa when it hits the ground.
CODE_018CAC:                    ;           ||
    STA $AA,X                   ;$018CAC    |/
CODE_018CAE:                    ;           |
    JSR FlipIfTouchingObj       ;$018CAE    |
    JSR SetAnimationFrame       ;$018CB1    |
    JSR SubOffscreen0Bnk1       ;$018CB4    |
CODE_018CB7:                    ;           |
    JMP Spr0to13Gfx             ;$018CB7    |





DATA_018CBA:                    ;$018CBA    | Acceleration values for the flying red Parakoopas. Affects both X and Y speeds!
    db $FF,$01

DATA_018CBC:                    ;$01BCBC    | Max speeds for the flying red Parakoopas. Affects both X and Y speeds!
    db $F0,$10

    ; Red Parakoopa misc RAM:
    ; $C2   - Timer for acceleration. Increments while accelerating; the Koopa's speed gets updated every 4th value.
    ; $151C - Direction of next acceleration. Even = -, odd = +.
    ; $1540 - Timer for how long to wait before applying acceleration again. Set to #$30 each time $151C increments.
    ; $1570 - Frame counter for animation.
    ; $157C - Direction of horizontal movement. 00 = right, 01 = left
    ; $15AC - Timer to tell the sprite to turn around. Set to #$08 when turning, decreases every frame.
    ; $1602 - Animation frame to use.
    ;          0/1 = walking, 02 = turning

RedHorzParaKoopa:               ;-----------| Red horizontal Parakoopa MAIN
    JSR SubOffscreen1Bnk1       ;$018CBE    | Process offscreen from -$40 to +$A0.
    BRA CODE_018CC6             ;$018CC1    |

RedVertParaKoopa:               ;-----------| Red vertical Parakoopa MAIN
    JSR SubOffscreen0Bnk1       ;$018CC3    | Process offscreen from -$40 to +$30.

CODE_018CC6:
    LDA $9D                     ;$018CC6    |\ If sprites are locked, just draw the graphics.
    BNE CODE_018D2A             ;$018CC8    |/
    LDA.w $157C,X               ;$018CCA    |\ 
    PHA                         ;$018CCD    ||
    JSR UpdateDirection         ;$018CCE    ||
    PLA                         ;$018CD1    || If the sprite's direction of movement isn't the same as the one it's facing, turn it around.
    CMP.w $157C,X               ;$018CD2    ||
    BEQ CODE_018CDC             ;$018CD5    ||
    LDA.b #$08                  ;$018CD7    ||
    STA.w $15AC,X               ;$018CD9    |/
CODE_018CDC:                    ;           |
    JSR SetAnimationFrame       ;$018CDC    |
    LDA $9E,X                   ;$018CDF    |\ 
    CMP.b #$0A                  ;$018CE1    || Branch if not the vertical Koopa.
    BNE CODE_018CEA             ;$018CE3    |/
    JSR SubSprYPosNoGrvty       ;$018CE5    |
    BRA CODE_018CFD             ;$018CE8    |

CODE_018CEA:
    LDY.b #$FC                  ;$018CEA    |\- Upwards Y speed for the horizontal Koopa.
    LDA.w $1570,X               ;$018CEC    ||
    AND.b #$20                  ;$018CEF    ||| How often to change the horizontal Koopa's Y speed.
    BEQ CODE_018CF5             ;$018CF1    ||
    LDY.b #$04                  ;$018CF3    ||| Downwards Y speed for the horizontal Koopa.
CODE_018CF5:                    ;           ||
    STY $AA,X                   ;$018CF5    || Update the Koopa's position and speed without gravity.
    JSR SubSprYPosNoGrvty       ;$018CF7    ||
    JSR SubSprXPosNoGrvty       ;$018CFA    |/
CODE_018CFD:                    ;           |
    LDA.w $1540,X               ;$018CFD    |\\ Branch if the Koopa is currently not accelerating.
    BNE CODE_018D27             ;$018D00    ||/
    INC $C2,X                   ;$018D02    ||
    LDA $C2,X                   ;$018D04    ||\ 
    AND.b #$03                  ;$018D06    ||| Affect the Koopa's speed every 3 frames.
    BNE CODE_018D27             ;$018D08    ||/
    LDA.w $151C,X               ;$018D0A    ||\ 
    AND.b #$01                  ;$018D0D    |||
    TAY                         ;$018D0F    |||
    LDA $B6,X                   ;$018D10    ||| Accelerate the Koopa.
    CLC                         ;$018D12    |||
    ADC.w DATA_018CBA,Y         ;$018D13    |||
    STA $AA,X                   ;$018D16    |||
    STA $B6,X                   ;$018D18    ||/
    CMP.w DATA_018CBC,Y         ;$018D1A    ||\ 
    BNE CODE_018D27             ;$018D1D    ||| If the Koopa has reached max speed, stop accelerating for a bit.
    INC.w $151C,X               ;$018D1F    |||
    LDA.b #$30                  ;$018D22    |||| How many frames to wait before accelerating again.
    STA.w $1540,X               ;$018D24    |//
CODE_018D27:                    ;           |
    JSR SubSprSprPMarioSpr      ;$018D27    |
CODE_018D2A:                    ;           |
    JSR CODE_018CB7             ;$018D2A    | Draw graphics.
    RTS                         ;$018D2D    |





    ; Winged Goomba misc RAM:
    ; $C2   - Frame counter to decide when to turn toward Mario. Increments every frame.
    ; $151C - Counter for the Goomba's hops. Counts up to 03, and then clears when the Goomba does a large jump.
    ; $1540 - Timer to wait a bit before starting to hop again. Set to a random value #$50-#$7F when the Goomba does a large jump.
    ; $1558 - Timer for sinking in lava.
    ; $1570 - Animation timer for the Goomba's wings. Increments every frame while $1540 is non-zero.
    ;          Increases two extra times each frame when rising during the large jump.
    ;          Cleared when the Goomba lands after the large jump.
    ; $157C - Direction of horizontal movement. 00 = right, 01 = left
    ; $15AC - Timer to tell the sprite to turn around. Set to #$08 when turning, decreases every frame.
    ; $1602 - Animation frame to use.
    ;          0/1 = walking, 02 = turning

WingedGoomba:                   ;-----------| Winged Goomba MAIN
    JSR SubOffscreen0Bnk1       ;$018D2E    | Process offscreen from -$40 to +$30.
    LDA $9D                     ;$018D31    |\ 
    BEQ CODE_018D39             ;$018D33    || If sprites are locked, just draw the graphics.
    JSR CODE_018DAC             ;$018D35    |/
    RTS                         ;$018D38    |

CODE_018D39:
    JSR CODE_018DBB             ;$018D39    | Set X speed.
    JSR SubUpdateSprPos         ;$018D3C    |\ Update X/Y position, apply gravity, and process interaction with blocks.
    DEC $AA,X                   ;$018D3F    |/
    LDA $C2,X                   ;$018D41    |\ 
    LSR                         ;$018D43    ||
    LSR                         ;$018D44    || Animate walking.
    LSR                         ;$018D45    ||
    AND.b #$01                  ;$018D46    ||
    STA.w $1602,X               ;$018D48    |/
    JSR CODE_018DAC             ;$018D4B    | Draw graphics.
    INC $C2,X                   ;$018D4E    |
    LDA.w $151C,X               ;$018D50    |\ 
    BNE CODE_018D5F             ;$018D53    ||
    LDA $AA,X                   ;$018D55    || If the Goomba is rising during a big hop, animate its wings thrice as fast.
    BPL CODE_018D5F             ;$018D57    ||
    INC.w $1570,X               ;$018D59    ||
    INC.w $1570,X               ;$018D5C    |/
CODE_018D5F:                    ;           |
    INC.w $1570,X               ;$018D5F    |
    JSR IsTouchingCeiling       ;$018D62    |\ 
    BEQ CODE_018D69             ;$018D65    || If the Goomba hits a ceiling, clear its Y speed.
    STZ $AA,X                   ;$018D67    |/
CODE_018D69:                    ;           |
    JSR IsOnGround              ;$018D69    |\\ If the Goomba isn't on the ground, branch.
    BEQ CODE_018DA5             ;$018D6C    ||/
    LDA $C2,X                   ;$018D6E    ||
    AND.b #$3F                  ;$018D70    ||| How many frames to wait before turning toward Mario.
    BNE CODE_018D77             ;$018D72    ||
    JSR FaceMario               ;$018D74    ||
CODE_018D77:                    ;           ||
    JSR SetSomeYSpeed           ;$018D77    || Set ground Y speed.
    LDA.w $151C,X               ;$018D7A    ||\ 
    BNE CODE_018D82             ;$018D7D    ||| If the Goomba has just landed after a big jump, don't animate its wings.
    STZ.w $1570,X               ;$018D7F    ||/
CODE_018D82:                    ;           ||
    LDA.w $1540,X               ;$018D82    ||\ Wait a bit after a big jump before starting to hop again.
    BNE CODE_018DA5             ;$018D85    ||/
    INC.w $151C,X               ;$018D87    ||
    LDY.b #$F0                  ;$018D8A    ||| Y speed for a normal hop.
    LDA.w $151C,X               ;$018D8C    ||
    CMP.b #$04                  ;$018D8F    ||| Number of times the Goomba hops before it does a big jump.
    BNE CODE_018DA3             ;$018D91    ||
    STZ.w $151C,X               ;$018D93    ||
    JSL GetRand                 ;$018D96    ||\ 
    AND.b #$3F                  ;$018D9A    ||| Get a random number of frames (#$50-#$7F) to wait before hopping again.
    ORA.b #$50                  ;$018D9C    |||
    STA.w $1540,X               ;$018D9E    ||/
    LDY.b #$D0                  ;$018DA1    ||| Y speed for a large hop.
CODE_018DA3:                    ;           ||
    STY $AA,X                   ;$018DA3    |/
CODE_018DA5:                    ;           |
    JSR FlipIfTouchingObj       ;$018DA5    |
    JSR SubSprSprPMarioSpr      ;$018DA8    |
    RTS                         ;$018DAB    |

CODE_018DAC:                    ;```````````| Winged Goomba graphics subroutine.
    JSR GoombaWingGfxRt         ;$018DAC    | Draw wings.
    LDA.w $15EA,X               ;$018DAF    |\ 
    CLC                         ;$018DB2    || Increase the OAM slot for the flying Goomba's body.
    ADC.b #$04                  ;$018DB3    ||
    STA.w $15EA,X               ;$018DB5    |/
    JMP SubSprGfx2Entry1        ;$018DB8    | Draw a single 16x16 tile.

CODE_018DBB:                    ;```````````| Subroutine to set the X speed for the Winged Goomba, Hopping Flame, and powerups.
    LDA.b #$F8                  ;$018DBB    | X speed when going left.
    LDY.w $157C,X               ;$018DBD    |
    BNE CODE_018DC4             ;$018DC0    |
    LDA.b #$08                  ;$018DC2    | X speed when going right.
CODE_018DC4:                    ;           |
    STA $B6,X                   ;$018DC4    |
    RTS                         ;$018DC6    |



DATA_018DC7:                    ;$018DC7    | Goomba wing X offsets. First eight are going left, second are right.
    db $F7,$0B,$F6,$0D,$FD,$0C,$FC,$0D      ; Each set is then split into two sets of four: first is stretched, second is folded.
    db $0B,$F5,$0A,$F3,$0B,$FC,$0C,$FB      ; Each of those is then split into two sets of two: first is animation frame 0, second is frame 1.

DATA_018DD7:                    ;$018DD7    | Goomba wing Y offsets. First four are stretched, second are folded.
    db $F7,$F7,$F8,$F8,$01,$01,$02,$02      ; The first two of each set are for animation frame 0, the second are frame 1.

GoombaWingGfxProp:              ;$018DDF    ; YXPPCCCT settings for the Goomba wings.
    db $46,$06

GoombaWingTiles:                ;$018DF1    ; Tile numbers for the Goomba wings.
    db $C6,$C6,$5D,$5D

GoombaWingTileSize:             ;$018DF5    ; Tile sizes for the Goomba wings.
    db $02,$02,$00,$00

    ; Scratch RAM used: $00-$05

GoombaWingGfxRt:                ;-----------| Subroutine to draw wings on the Goomba.
    JSR GetDrawInfoBnk1         ;$018DE9    |
    LDA.w $1570,X               ;$018DEC    |\ 
    LSR                         ;$018DEF    ||
    LSR                         ;$018DF0    ||
    AND.b #$02                  ;$018DF1    || Line the Goomba's wing animation up with the turns in its normal animation.
    CLC                         ;$018DF3    ||
    ADC.w $1602,X               ;$018DF4    ||
    STA $05                     ;$018DF7    || $05 = 00/01/02/03
    ASL                         ;$018DF9    || $02 = 00/02/04/06
    STA $02                     ;$018DFA    |/
    LDA.w $157C,X               ;$018DFC    |\ $04 = direction (0/1)
    STA $04                     ;$018DFF    |/
    LDY.w $15EA,X               ;$018E01    |
    PHX                         ;$018E04    |
    LDX.b #$01                  ;$018E05    |\ 
CODE_018E07:                    ;           || Loop to draw 2 wings.
    STX $03                     ;$018E07    || $03 = current wing
    TXA                         ;$018E09    ||
    CLC                         ;$018E0A    ||
    ADC $02                     ;$018E0B    ||
    PHA                         ;$018E0D    ||
    LDX $04                     ;$018E0E    ||
    BNE CODE_018E15             ;$018E10    ||
    CLC                         ;$018E12    ||
    ADC.b #$08                  ;$018E13    ||
CODE_018E15:                    ;           ||
    TAX                         ;$018E15    ||
    LDA $00                     ;$018E16    ||\ 
    CLC                         ;$018E18    ||| Get X offset for the wing tile.
    ADC.w DATA_018DC7,X         ;$018E19    |||
    STA.w $0300,Y               ;$018E1C    ||/
    PLX                         ;$018E1F    ||
    LDA $01                     ;$018E20    ||\ 
    CLC                         ;$018E22    ||| Get Y offset for the wing tile.
    ADC.w DATA_018DD7,X         ;$018E23    |||
    STA.w $0301,Y               ;$018E26    ||/
    LDX $05                     ;$018E29    ||\ 
    LDA.w GoombaWingTiles,X     ;$018E2B    ||| Get the tile number for the wing.
    STA.w $0302,Y               ;$018E2E    ||/
    PHY                         ;$018E31    ||
    TYA                         ;$018E32    ||
    LSR                         ;$018E33    ||
    LSR                         ;$018E34    ||
    TAY                         ;$018E35    ||
    LDA.w GoombaWingTileSize,X  ;$018E36    ||\ Get the tile size for the wing.
    STA.w $0460,Y               ;$018E39    ||/
    PLY                         ;$018E3C    ||
    LDX $03                     ;$018E3D    ||
    LDA $04                     ;$018E3F    ||\ 
    LSR                         ;$018E41    |||
    LDA.w GoombaWingGfxProp,X   ;$018E42    |||
    BCS CODE_018E49             ;$018E45    ||| Get the YXPPCCCT settings for the wing.
    EOR.b #$40                  ;$018E47    ||| X flip if facing right.
CODE_018E49:                    ;           |||
    ORA $64                     ;$018E49    |||
    STA.w $0303,Y               ;$018E4B    ||/
    TYA                         ;$018E4E    ||
    CLC                         ;$018E4F    ||
    ADC.b #$08                  ;$018E50    ||
    TAY                         ;$018E52    ||
    DEX                         ;$018E53    ||
    BPL CODE_018E07             ;$018E54    |/
    PLX                         ;$018E56    |
    LDY.b #$FF                  ;$018E57    |\ 
    LDA.b #$02                  ;$018E59    || Draw two tile of no defined size.
    JSR FinishOAMWriteRt        ;$018E5B    |/
    RTS                         ;$018E5E    |





SetAnimationFrame:              ;-----------| Subroutine to make 2-frame animations for sprites every 8 frames.
    INC.w $1570,X               ;$01835F    |
    LDA.w $1570,X               ;$018E62    |
    LSR                         ;$018E65    |
    LSR                         ;$018E66    |
    LSR                         ;$018E67    |
    AND.b #$01                  ;$018E68    |
    STA.w $1602,X               ;$018E6A    |
    RTS                         ;$018E6D    |





PiranhaSpeed:                   ;$018E6E    | Y speeds for the Piranha Plants.
    db $00,$F0,$00,$10                      ; In pipe; emerging; out of pipe; retracting.

PiranTimeInState:               ;$018E72    ; Timings for how long the plant stays in each phase.
    db $20,$30,$20,$30                      ; Emerging; out of pipe; retracting; in pipe.

    ; Piranha Plant misc RAM:
    ; $C2   - Increments each time the plant changes phase. 00 = in pipe; 01 = emerging; 02 = out of pipe; 03 = retracting.
    ; $1540 - Timer for how long the plant waits before shifting direction. Set to either #$20 or #$30 each phase change.
    ; $1570 - Frame counter for animation.
    ; $1594 - Sets to #$01 when the plant is inside the pipe. Tells it to turn invisible and not interact with Mario.
    ; $1602 - Animation frame to use.
    ;          0/1 = biting

ClassicPiranhas:                ;-----------| Classic Piranha Plant MAIN / Upside-Down Piranha Plant MAIN
    LDA.w $1594,X               ;$018E76    |\ Don't draw the plant if its being forced to stay inside the pipe.
    BNE CODE_018E9A             ;$018E79    |/
    LDA $64                     ;$018E7B    |
    PHA                         ;$018E7D    |
    LDA.w $15D0,X               ;$018E7E    |\ 
    BNE CODE_018E87             ;$018E81    || Unless it's being eaten by Yoshi, go behind objects.
    LDA.b #$10                  ;$018E83    ||
    STA $64                     ;$018E85    |/
CODE_018E87:                    ;           |
    JSR SubSprGfx1              ;$018E87    | Draw a 16x32 sprite.
    LDY.w $15EA,X               ;$018E8A    |\ 
    LDA.w $030B,Y               ;$018E8D    || Set the plant's vine to use palette D on GFX page 1.
    AND.b #$F1                  ;$018E90    || Note: the classic piranha plant does not correctly handle this,
    ORA.b #$0B                  ;$018E92    ||  and will edit the OAM data to another sprite's tiles instead.
    STA.w $030B,Y               ;$018E94    |/
    PLA                         ;$018E97    |
    STA $64                     ;$018E98    |
CODE_018E9A:                    ;           |
    JSR SubOffscreen0Bnk1       ;$018E9A    | Process offscreen from -$40 to +$30.
    LDA $9D                     ;$018E9D    |\ If sprites are frozen, return.
    BNE Return018EC7            ;$018E9F    |/
    JSR SetAnimationFrame       ;$018EA1    |
    LDA.w $1594,X               ;$018EA4    |\ 
    BNE CODE_018EAC             ;$018EA7    || Only process interaction with Mario and other sprites if it's not stuck inside a pipe.
    JSR SubSprSprPMarioSpr      ;$018EA9    |/
CODE_018EAC:                    ;           |
    LDA $C2,X                   ;$018EAC    |
    AND.b #$03                  ;$018EAE    |
    TAY                         ;$018EB0    |
    LDA.w $1540,X               ;$018EB1    |\ If the stun timer is 0, then move to the next movement phase.
    BEQ ChangePiranhaState      ;$018EB4    |/
    LDA.w PiranhaSpeed,Y        ;$018EB6    |\ 
    LDY $9E,X                   ;$018EB9    ||
    CPY.b #$2A                  ;$018EBB    ||
    BNE CODE_018EC2             ;$018EBD    || Get the movement speed for the plant.
    EOR.b #$FF                  ;$018EBF    || If it's the upside-down one, invert the speed.
    INC A                       ;$018EC1    ||
CODE_018EC2:                    ;           ||
    STA $AA,X                   ;$018EC2    |/
    JSR SubSprYPosNoGrvty       ;$018EC4    |
Return018EC7:                   ;           |
    RTS                         ;$018EC7    |

ChangePiranhaState:
    LDA $C2,X                   ;$018EC8    |\ 
    AND.b #$03                  ;$018ECA    ||
    STA $00                     ;$018ECC    ||
    BNE CODE_018EE1             ;$018ECE    ||
    JSR SubHorzPosBnk1          ;$018ED0    ||
    LDA $0F                     ;$018ED3    || If the plant is inside the pipe and Mario is close enough, keep it stuck inside the pipe.
    CLC                         ;$018ED5    ||
    ADC.b #$1B                  ;$018ED6    ||| Distance to the left of the plant Mario has to be.
    CMP.b #$37                  ;$018ED8    ||| Distance to the right of the above point Mario has to be.
    LDA.b #$01                  ;$018EDA    ||
    STA.w $1594,X               ;$018EDC    ||
    BCC Return018EEE            ;$018EDF    |/
CODE_018EE1:                    ;           |
    STZ.w $1594,X               ;$018EE1    |
    LDY $00                     ;$018EE4    |
    LDA.w PiranTimeInState,Y    ;$018EE6    |\ 
    STA.w $1540,X               ;$018EE9    || Set the stun timer and move to the next state.
    INC $C2,X                   ;$018EEC    |/
Return018EEE:                   ;           |
    RTS                         ;$018EEE    |





CODE_018EEF:                    ;-----------| Subroutine to find an extended sprite slot. Used by the Hopping Flame and Yoshi's fireballs.
    LDY.b #$07                  ;$018EEF    |
CODE_018EF1:                    ;           |
    LDA.w $170B,Y               ;$018EF1    |\ 
    BEQ CODE_018F07             ;$018EF4    || Loop until an empty slot is found.
    DEY                         ;$018EF6    ||
    BPL CODE_018EF1             ;$018EF7    |/
    DEC.w $18FC                 ;$018EF9    |\ 
    BPL CODE_018F03             ;$018EFC    ||
    LDA.b #$07                  ;$018EFE    || If all the extended sprite slots are filled, overwrite one.
    STA.w $18FC                 ;$018F00    ||
CODE_018F03:                    ;           ||
    LDY.w $18FC                 ;$018F03    |/
Return018F06:                   ;           |
    RTS                         ;$018F06    |

CODE_018F07:
    LDA.w $15A0,X               ;$018F07    |\ If the sprite is offscreen, uh, return either way.
    BNE Return018F06            ;$018F0A    |/
    RTS                         ;$018F0C    |



    ; Hopping Flame misc RAM:
    ; $1540 - Timer for waiting to hop. Set to a random number #$1F-#$3F each time it lands.
    ; $1558 - Timer for sinking in lava. The flame disappears in a cloud of smoke though, so this never actually hits 0.
    ; $1570 - Frame counter for animation.
    ; $157C - Direction of horizontal movement. 00 = right, 01 = left
    ; $1602 - Animation frame to use.
    ;          0/1 = fire
    ; $176F - Extended sprite timer for how long the small fires should last.

HoppingFlame:
    LDA $9D                     ;$018F0D    |\ If sprites are frozen, just draw graphics.
    BNE CODE_018F49             ;$018F0F    |/
    INC.w $1602,X               ;$018F11    |
    JSR SetAnimationFrame       ;$018F14    |
    JSR SubUpdateSprPos         ;$018F17    |\ Update X/Y position, apply gravity, and process interaction with blocks.
    DEC $AA,X                   ;$018F1A    |/
    JSR CODE_018DBB             ;$018F1C    |\ Set X speed.
    ASL $B6,X                   ;$018F1F    |/
    JSR IsOnGround              ;$018F21    |\ 
    BEQ CODE_018F43             ;$018F24    ||
    STZ $B6,X                   ;$018F26    ||
    JSR SetSomeYSpeed           ;$018F28    || Clear X and Y speed if on the ground.
    LDA.w $1540,X               ;$018F2B    || If the stun timer is zero, then it landed and the stun timer needs to be reset.
    BEQ CODE_018F38             ;$018F2E    || If the stun timer is one, then make it hop.
    DEC A                       ;$018F30    ||
    BNE CODE_018F43             ;$018F31    ||
    JSR CODE_018F50             ;$018F33    ||
    BRA CODE_018F43             ;$018F36    |/

CODE_018F38:
    JSL GetRand                 ;$018F38    |\ 
    AND.b #$1F                  ;$018F3C    || The flame has just landed; set the stun timer to a random number #$1F-#$3F.
    ORA.b #$20                  ;$018F3E    ||
    STA.w $1540,X               ;$018F40    |/
CODE_018F43:                    ;           |
    JSR FlipIfTouchingObj       ;$018F43    |
    JSR MarioSprInteractRt      ;$018F46    |
CODE_018F49:                    ;           |
    JSR SubOffscreen0Bnk1       ;$018F49    | Process offscreen from -$40 to +$30.
    JSR SubSprGfx2Entry1        ;$018F4C    | Draw a 16x16 tile.
    RTS                         ;$018F4F    |

CODE_018F50:                    ;```````````| Make the flame hop.
    JSL GetRand                 ;$018F50    |\ 
    AND.b #$0F                  ;$018F54    || Give it a random Y speed #$D0-#$DF.
    ORA.b #$D0                  ;$018F56    ||
    STA $AA,X                   ;$018F58    |/
    LDA.w $148D                 ;$018F5A    |\ 
    AND.b #$03                  ;$018F5D    || Decide whether to jump toward Mario or go straight.
    BNE CODE_018F64             ;$018F5F    ||
    JSR FaceMario               ;$018F61    |/
CODE_018F64:                    ;           |
    JSR IsSprOffScreen          ;$018F64    |\ If the sprite goes offscreen, don't spawn a flame.
    BNE Return018F96            ;$018F67    |/
    JSR CODE_018EEF             ;$018F69    | Find an empty extended sprite slot.
    LDA $E4,X                   ;$018F6C    |\ 
    CLC                         ;$018F6E    ||
    ADC.b #$04                  ;$018F6F    ||
    STA.w $171F,Y               ;$018F71    ||
    LDA.w $14E0,X               ;$018F74    ||
    ADC.b #$00                  ;$018F77    ||
    STA.w $1733,Y               ;$018F79    || Put the small fire at the hopping flame's position.
    LDA $D8,X                   ;$018F7C    ||
    CLC                         ;$018F7E    ||
    ADC.b #$08                  ;$018F7F    ||
    STA.w $1715,Y               ;$018F81    ||
    LDA.w $14D4,X               ;$018F84    ||
    ADC.b #$00                  ;$018F87    ||
    STA.w $1729,Y               ;$018F89    |/
    LDA.b #$03                  ;$018F8C    |\ Make the actual flame.
    STA.w $170B,Y               ;$018F8E    |/
    LDA.b #$FF                  ;$018F91    |\ Set the timer for how long the flame lasts.
    STA.w $176F,Y               ;$018F93    |/
Return018F96:                   ;           |
    RTS                         ;$018F96    |





    ; Lakitu misc RAM:
    ; $C2   - Set to #$01 for the cloud while Mario is riding in it.
    ; $151C - Set to #$10 for the Lakitu if it's fishing with a 1up.
    ;          Set to #$10 for the cloud if the Lakitu is killed by a fireball.
    ; $1534 - Used to decide which way to accelerate the cloud vertically. Even = +, odd = -.
    ; $1540 - Used as a timer for erasing the cloud sprite after the Lakitu is killed.
    ;          Set to #$1F for the Lakitu when killed by jumping on it.
    ; $154C - Timer to not make Mario enter the cloud again after jumping out.
    ; $1558 - Timer for how long to show the Lakitu's throwing animation. Set to #$1F each time he throws.
    ; $157C - Direction of horizontal movement. 00 = right, 01 = left
    ; $1602 - Animation frame to use. Only used by the Lakitu, not the cloud.
    ;          0 = normal, 1 = killed/falling, 2 = throwing
    ; $160E - Set for the cloud to the Lakitu's sprite slot.

Lakitu:                         ;-----------| Lakitu MAIN (note: most of its code is handled by the actual cloud)
    LDY.b #$00                  ;$018F97    |\ 
    LDA.w $1558,X               ;$018F99    ||
    BEQ CODE_018FA0             ;$018F9C    ||
    LDY.b #$02                  ;$018F9E    || Set the animation frame based on whether the Lakitu is throwing a Spiny.
CODE_018FA0:                    ;           ||
    TYA                         ;$018FA0    ||
    STA.w $1602,X               ;$018FA1    |/
    JSR SubSprGfx1              ;$018FA4    | Draw a 16x32 sprite.
    LDA.w $1558,X               ;$018FA7    |\ 
    BEQ CODE_018FB8             ;$018FAA    ||
    LDY.w $15EA,X               ;$018FAC    || If the Lakitu isn't throwing, shift its body up 3 pixels?
    LDA.w $0305,Y               ;$018FAF    ||
    SEC                         ;$018FB2    ||
    SBC.b #$03                  ;$018FB3    ||
    STA.w $0305,Y               ;$018FB5    |/
CODE_018FB8:                    ;           |
    LDA.w $151C,X               ;$018FB8    |\ 
    BEQ SubSprSprPMarioSpr      ;$018FBB    || If fishing with a 1up, draw and handle interaction with that.
    JSL CODE_02E672             ;$018FBD    |/
SubSprSprPMarioSpr:             ;-----------| Subroutine to register interaction between two sprites as well as one sprite and Mario.
    JSR SubSprSprInteract       ;$018FC1    |
    JMP MarioSprInteractRt      ;$018FC4    |





BulletGfxProp:                  ;$018FC7    | YXPPCCCT properties for each of the Bullet Bills.
    db $42,$02,$03,$83,$03,$43,$03,$43

DATA_018FCF:                    ;$018FCF    | Animation frames for each Bullet Bill direction.
    db $00,$00,$01,$01,$02,$03,$03,$02

BulletSpeedX:                   ;$018FD7    | X speeds for each Bullet Bill direction.
    db $20,$E0,$00,$00,$18,$18,$E8,$E8

BulletSpeedY:                   ;$018FDF    | Y speeds for each Bullet Bill direction.
    db $00,$00,$E0,$20,$E8,$18,$18,$E8

    ; Bullet Bill misc RAM:
    ; $C2   - Direction being shot in.
    ;          00 = right     01 = left        02 = up         03 = down
    ;          04 = up-right  05 = down-right  06 = down-left  07 = up-left
    ; $1540 - Sends the Bullet Bill behind objects while non-zero. Set to #$10 when it spawns.
    ; $157C - Always 1. Setting to 0 will make it face backwards.
    ; $1602 - Animation frame to use.
    ;          0 = horizontal, 1 = vertical, 2 = diagonal up, 3 = diagonal down

BulletBill:                     ;-----------| Bullet Bill MAIN
    LDA.b #$01                  ;$018FE7    |
    STA.w $157C,X               ;$018FE9    |
    LDA $9D                     ;$018FEC    |\ If sprites are frozen, just draw graphics.
    BNE CODE_019014             ;$018FEE    |/
    LDY $C2,X                   ;$018FF0    |\ 
    LDA.w BulletGfxProp,Y       ;$018FF2    ||
    STA.w $15F6,X               ;$018FF5    ||
    LDA.w DATA_018FCF,Y         ;$018FF8    ||
    STA.w $1602,X               ;$018FFB    || Set graphics and speeds for each type of Bullet Bill.
    LDA.w BulletSpeedX,Y        ;$018FFE    ||
    STA $B6,X                   ;$019001    ||
    LDA.w BulletSpeedY,Y        ;$019003    ||
    STA $AA,X                   ;$019006    |/
    JSR SubSprXPosNoGrvty       ;$019008    |
    JSR SubSprYPosNoGrvty       ;$01900B    |
    JSR CODE_019140             ;$01900E    | Process interaction with objects...? (afaik this should only do water/lava interaction...)
    JSR SubSprSprPMarioSpr      ;$019011    | Process interaction with sprites and Mario.
CODE_019014:                    ;           |
    JSR SubOffscreen0Bnk1       ;$019014    | Process offscreen from -$40 to +$30.
    LDA $D8,X                   ;$019017    |\ 
    SEC                         ;$019019    ||
    SBC $1C                     ;$01901A    || Erase it if it goes offscreen vertically.
    CMP.b #$F0                  ;$01901C    ||
    BCC CODE_019023             ;$01901E    ||
    STZ.w $14C8,X               ;$019020    |/
CODE_019023:                    ;           |
    LDA.w $1540,X               ;$019023    |\ 
    BEQ CODE_01902B             ;$019026    || 
    JMP CODE_019546             ;$019028    || Draw a 16x16 sprite. Send it behind objects if the stun timer is set.
CODE_01902B:                    ;           ||
    JMP SubSprGfx2Entry1        ;$01902B    |/





DATA_01902E:                    ;$01902E    | Sprite max Y speed (normal, water)
    db $40,$10

DATA_019030:                    ;$019030    | Sprite gravity (normal, water)
    db $03,$01

    ; JSL located at $01802A
SubUpdateSprPos:                ;-----------| Routine to update a sprite's position and apply gravity, as well as interact with objects if set to do so.
    JSR SubSprYPosNoGrvty       ;$019032    | Update the sprite's Y position.
    LDY.b #$00                  ;$019035    |
    LDA.w $164A,X               ;$019037    |\ 
    BEQ CODE_019049             ;$01903A    ||
    INY                         ;$01903C    ||
    LDA $AA,X                   ;$01903D    ||
    BPL CODE_019049             ;$01903F    || Limit the sprite's rising Y speed in water to -18.
    CMP.b #$E8                  ;$019041    ||
    BCS CODE_019049             ;$019043    ||
    LDA.b #$E8                  ;$019045    ||
    STA $AA,X                   ;$019047    |/
CODE_019049:                    ;           |
    LDA $AA,X                   ;$019049    |\ 
    CLC                         ;$01904B    || Apply gravity to the sprite's Y speed.
    ADC.w DATA_019030,Y         ;$01904C    ||
    STA $AA,X                   ;$01904F    |/
    BMI CODE_01905D             ;$019051    |\ 
    CMP.w DATA_01902E,Y         ;$019053    || 
    BCC CODE_01905D             ;$019056    || Limit the sprite's falling Y speed to either 40 (air) or 10 (water).
    LDA.w DATA_01902E,Y         ;$019058    ||
    STA $AA,X                   ;$01905B    |/
CODE_01905D:                    ;           |
    LDA $B6,X                   ;$01905D    |\ 
    PHA                         ;$01905F    ||
    LDY.w $164A,X               ;$019060    ||
    BEQ CODE_019076             ;$019063    ||
    ASL                         ;$019065    ||
    ROR $B6,X                   ;$019066    ||
    LDA $B6,X                   ;$019068    ||
    PHA                         ;$01906A    || If the sprite is in water, slow it down to 3/4s of its normal speed.
    STA $00                     ;$01906B    ||
    ASL                         ;$01906D    ||
    ROR $00                     ;$01906E    ||
    PLA                         ;$019070    ||
    CLC                         ;$019071    ||
    ADC $00                     ;$019072    ||
    STA $B6,X                   ;$019074    |/
CODE_019076:                    ;           |
    JSR SubSprXPosNoGrvty       ;$019076    | Update the sprite's X position.
    PLA                         ;$019079    |
    STA $B6,X                   ;$01907A    |
    LDA.w $15DC,X               ;$01907C    |\ 
    BNE CODE_019085             ;$01907F    || Process object interaction if set to do so.
    JSR CODE_019140             ;$019081    |/
    RTS                         ;$019084    |

CODE_019085:
    STZ.w $1588,X               ;$019085    |
    RTS                         ;$019088    |



FlipIfTouchingObj:              ;-----------| Subroutine to turn a sprite around if it hits an object.
    LDA.w $157C,X               ;$019089    |
    INC A                       ;$01908C    |
    AND.w $1588,X               ;$01908D    |
    AND.b #$03                  ;$019090    |
    BEQ Return019097            ;$019092    |
    JSR FlipSpriteDir           ;$019094    |
Return019097:                   ;           |
    RTS                         ;$019097    |

FlipSpriteDir:                  ;-----------| Subroutine to change the direction of a sprite's movement.
    LDA.w $15AC,X               ;$019098    |\ If it's already turning, return.
    BNE Return0190B1            ;$01909B    |/
    LDA.b #$08                  ;$01909D    |\ Set the turning timer.
    STA.w $15AC,X               ;$01909F    |/
CODE_0190A2:                    ;           |
    LDA $B6,X                   ;$0190A2    |\ 
    EOR.b #$FF                  ;$0190A4    ||
    INC A                       ;$0190A6    ||
    STA $B6,X                   ;$0190A7    || Invert the sprite's speed.
    LDA.w $157C,X               ;$0190A9    ||
    EOR.b #$01                  ;$0190AC    ||
    STA.w $157C,X               ;$0190AE    |/
Return0190B1:                   ;           |
    RTS                         ;$0190B1    |





GenericSprGfxRt2:               ;-----------| JSL wrapper for SubSprGFX2Entry1. This routine draws a single 16x16.
    PHB                         ;$0190B2    |
    PHK                         ;$0190B3    |
    PLB                         ;$0190B4    |
    JSR SubSprGfx2Entry1        ;$0190B5    |
    PLB                         ;$0190B8    |
    RTL                         ;$0190B9    |





SpriteObjClippingX:             ;$0190BA    | X positions of the sprite/object clippings.
    db $0E,$02,$08,$08,$0E,$02,$07,$07      ; Every set of 4 bytes here points to which pixels the sprite uses to interact with layers,
    db $07,$07,$07,$07,$0E,$02,$08,$08      ;  relative to its X position ($E4).
    db $10,$00,$08,$08,$0D,$02,$08,$08
    db $07,$00,$04,$04,$1F,$01,$10,$10
    db $0F,$00,$08,$08,$10,$00,$08,$08
    db $0D,$02,$08,$08,$0E,$02,$08,$08
    db $0D,$02,$08,$08,$10,$00,$08,$08
    db $1F,$00,$10,$10,$08

SpriteObjClippingY:             ;$0190F7    | Y positions of the sprite/object clippings.
    db $08,$08,$10,$02,$12,$12,$20,$02      ; Every set of 4 bytes here points to which pixels the sprite uses to interact with layers,
    db $07,$07,$07,$07,$10,$10,$20,$0B      ;  relative to its Y position ($D8).
    db $12,$12,$20,$02,$18,$18,$20,$10
    db $04,$04,$08,$00,$10,$10,$1F,$01
    db $08,$08,$0F,$00,$08,$08,$10,$00
    db $48,$48,$50,$42,$04,$04,$08,$00
    db $00,$00,$00,$00,$08,$08,$10,$00
    db $08,$08,$10,$00,$04

DATA_019134:
    db $01,$02,$04,$08

CODE_019138:                    ;-----------| Sprite-object interaction routine.
    PHB                         ;$019138    |  Note that it while it sets the blocked bits, it does not handle them,
    PHK                         ;$019139    |   except for sprites set to "not get stuck in walls".
    PLB                         ;$01913A    |  The bits should be handled from within the sprite instead.
    JSR CODE_019140             ;$01913B    |
    PLB                         ;$01913E    |
    RTL                         ;$01913F    |

CODE_019140:
    STZ.w $1694                 ;$019140    |\ 
    STZ.w $1588,X               ;$019143    ||
    STZ.w $15B8,X               ;$019146    ||
    STZ.w $185E                 ;$019149    || Clear blocked bits, slope offset, and layer being interacted with, and preserve in-water flag.
    LDA.w $164A,X               ;$01914C    ||
    STA.w $1695                 ;$01914F    ||
    STZ.w $164A,X               ;$019152    |/
    JSR CODE_019211             ;$019155    | Handle object interaction for Layer 1.
    LDA $5B                     ;$019158    |\ Branch down if not set to interact with Layer 2/3. 
    BPL CODE_0191BE             ;$01915A    |/
    INC.w $185E                 ;$01915C    |
    LDA $E4,X                   ;$01915F    |\ 
    CLC                         ;$019161    ||
    ADC $26                     ;$019162    ||
    STA $E4,X                   ;$019164    ||
    LDA.w $14E0,X               ;$019166    ||
    ADC $27                     ;$019169    ||
    STA.w $14E0,X               ;$01916B    || Get position offset to Layer 2/3.
    LDA $D8,X                   ;$01916E    ||
    CLC                         ;$019170    ||
    ADC $28                     ;$019171    ||
    STA $D8,X                   ;$019173    ||
    LDA.w $14D4,X               ;$019175    ||
    ADC $29                     ;$019178    ||
    STA.w $14D4,X               ;$01917A    |/
    JSR CODE_019211             ;$01917D    | Handle object interaction for Layer 2/3.
    LDA $E4,X                   ;$019180    |\ 
    SEC                         ;$019182    ||
    SBC $26                     ;$019183    ||
    STA $E4,X                   ;$019185    ||
    LDA.w $14E0,X               ;$019187    ||
    SBC $27                     ;$01918A    ||
    STA.w $14E0,X               ;$01918C    || Restore position.
    LDA $D8,X                   ;$01918F    ||
    SEC                         ;$019191    ||
    SBC $28                     ;$019192    ||
    STA $D8,X                   ;$019194    ||
    LDA.w $14D4,X               ;$019196    ||
    SBC $29                     ;$019199    ||
    STA.w $14D4,X               ;$01919B    |/
    LDA.w $1588,X               ;$01919E    |\ 
    BPL CODE_0191BE             ;$0191A1    ||
    AND.b #$03                  ;$0191A3    || If on top of Layer 2 and not blocked on right/left...
    BNE CODE_0191BE             ;$0191A5    ||
    LDY.b #$00                  ;$0191A7    ||
    LDA.w $17BF                 ;$0191A9    ||\ 
    EOR.b #$FF                  ;$0191AC    |||
    INC A                       ;$0191AE    |||
    BPL CODE_0191B2             ;$0191AF    |||
    DEY                         ;$0191B1    |||
CODE_0191B2:                    ;           ||| Move the sprite with Layer 2.
    CLC                         ;$0191B2    |||
    ADC $E4,X                   ;$0191B3    |||
    STA $E4,X                   ;$0191B5    |||
    TYA                         ;$0191B7    |||
    ADC.w $14E0,X               ;$0191B8    |||
    STA.w $14E0,X               ;$0191BB    |//

CODE_0191BE:                    ;```````````| Get carryable sprites out of walls.
    LDA.w $190F,X               ;$0191BE    |\ 
    BPL CODE_0191ED             ;$0191C1    ||
    LDA.w $1588,X               ;$0191C3    || Skip sprite if 
    AND.b #$03                  ;$0191C6    || - not set to avoid getting stuck in walls
    BEQ CODE_0191ED             ;$0191C8    || - not blocked on a side
    TAY                         ;$0191CA    || - being eaten by Yoshi
    LDA.w $15D0,X               ;$0191CB    ||
    BNE CODE_0191ED             ;$0191CE    |/
    LDA $E4,X                   ;$0191D0    |\ 
    CLC                         ;$0191D2    ||
    ADC.w DATA_019284-1,Y       ;$0191D3    ||
    STA $E4,X                   ;$0191D6    || Push back from the block.
    LDA.w $14E0,X               ;$0191D8    ||
    ADC.w DATA_019284+1,Y       ;$0191DB    ||
    STA.w $14E0,X               ;$0191DE    |/
    LDA $B6,X                   ;$0191E1    |\ 
    BNE CODE_0191ED             ;$0191E3    ||
    LDA.w $1588,X               ;$0191E5    || If it has no X speed, clear side blocked status.
    AND.b #$FC                  ;$0191E8    ||
    STA.w $1588,X               ;$0191EA    |/

CODE_0191ED:                    ;```````````| Handle water/lava splash.
    LDA.w $164A,X               ;$0191ED    |\ 
    EOR.w $1695                 ;$0191F0    || If the sprite hasn't just moved into or out of water, return.
    BEQ Return019210            ;$0191F3    |/
    ASL                         ;$0191F5    |
    LDA.w $166E,X               ;$0191F6    |\ 
    AND.b #$40                  ;$0191F9    || Return if the sprite isn't set to show a water splash or is set to briefly not show the graphic.
    ORA.w $1FE2,X               ;$0191FB    ||
    BNE Return019210            ;$0191FE    |/
    BCS CODE_01920C             ;$019200    |\ 
    BIT.w $0D9B                 ;$019202    || If the sprite is entering lava or in a Mode 7 room, branch to show the correct splash.
    BMI CODE_01920C             ;$019205    |/
    JSL CODE_0284C0             ;$019207    | Show a water splash.
    RTS                         ;$01920B    |

CODE_01920C:
    JSL CODE_028528             ;$01920C    | Show a lava splash.
Return019210:                   ;           |
    RTS                         ;$019210    |



CODE_019211:                    ;-----------| Object interaction check. This first part is the sprite buoyancy routine.
    LDA.w $190E                 ;$019211    |\ Skip if sprite buoyancy is not enabled. 
    BEQ CODE_01925B             ;$019214    |/
    LDA $85                     ;$019216    |\ Branch to always apply buoyancy in a water level.
    BNE CODE_019258             ;$019218    |/
    LDY.b #$3C                  ;$01921A    |\ 
    JSR CODE_01944D             ;$01921C    || Branch if the tile being touched is on page 0.
    BEQ CODE_019233             ;$01921F    |/
    LDA.w $1693                 ;$019221    |\ 
    CMP.b #$6E                  ;$019224    ||
    BCC CODE_01925B             ;$019226    || Skip if the tile is not a slope in water.
    JSL CODE_00F04D             ;$019228    ||
    LDA.w $1693                 ;$01922C    ||
    BCC CODE_01925B             ;$01922F    |/
    BCS CODE_01923A             ;$019231    |
CODE_019233:                    ;           |
    LDA.w $1693                 ;$019233    |\ 
    CMP.b #$06                  ;$019236    || Skip if the tile is not a water tile (000-005).
    BCS CODE_01925B             ;$019238    |/

CODE_01923A:                    ;```````````| Sprite is in water and buoyancy is enabled.
    TAY                         ;$01923A    |
    LDA.w $164A,X               ;$01923B    |\ 
    ORA.b #$01                  ;$01923E    ||
    CPY.b #$04                  ;$019240    ||
    BNE CODE_019258             ;$019242    ||
    PHA                         ;$019244    ||
    LDA $9E,X                   ;$019245    ||
    CMP.b #$35                  ;$019247    ||
    BEQ CODE_019252             ;$019249    || Set bit 0 of $164A for the sprite.
    LDA.w $167A,X               ;$01924B    || If in lava, also set bit 7.
    AND.b #$02                  ;$01924E    ||  If in lava and not invincible to lava, kill the sprite too.
    BNE CODE_019255             ;$019250    ||
CODE_019252:                    ;           ||
    JSR CODE_019330             ;$019252    ||
CODE_019255:                    ;           ||
    PLA                         ;$019255    ||
    ORA.b #$80                  ;$019256    ||
CODE_019258:                    ;           ||
    STA.w $164A,X               ;$019258    |/

CODE_01925B:                    ;```````````| Routine joins back up here; handle other object interaction.
    LDA.w $1686,X               ;$01925B    |\ 
    BMI Return019210            ;$01925E    ||
    LDA.w $185E                 ;$019260    ||
    BEQ CODE_01926F             ;$019263    || Return if the sprite is set to not interact with objects,
    BIT.w $190E                 ;$019265    ||  or if it's touching Layer 2 but interaction with Layer 2 is disabled.
    BVS Return0192C0            ;$019268    ||
    LDA.w $166E,X               ;$01926A    ||
    BMI Return0192C0            ;$01926D    |/
CODE_01926F:                    ;           |
    JSR CODE_0192C9             ;$01926F    | Process vertical block interaction.
    LDA.w $190F,X               ;$019272    |\ 
    BPL CODE_019288             ;$019275    || Process horizontal block interaction for all sprites in the direction they're moving.
    LDA $B6,X                   ;$019277    || For most sprites, if the X speed is 00, skip horizontal interaction entirely.
    ORA.w $15AC,X               ;$019279    || For carriable sprites (indicated by bit 7 of $190F), if the X speed is 00:
    BNE CODE_019288             ;$01927C    ||  - If $15AC is non-zero, skip horizontal interaction.
    LDA $13                     ;$01927E    ||  - If $15AC is also zero, alternate between left and right interaction every frame.
    JSR CODE_01928E             ;$019280    |/
Return019283:                   ;           |
    RTS                         ;$019283    |



DATA_019284:                    ;$019284    | Distance to push a carryable sprite to the side if inside a block.
    db $FC,$04,$FF,$00                      ; Blocked right, blocked left; low bytes, high bytes.



CODE_019288:                    ;-----------| Routine to process horizontal block interaction for sprites.
    LDA $B6,X                   ;$019288    |\ If not moving horizontally, return. 
    BEQ Return0192C0            ;$01928A    |/
    ASL                         ;$01928C    |\ Result: 0 = right, 1 = left 
    ROL                         ;$01928D    |/
CODE_01928E:                    ;```````````| Add in stationary carryable sprites here.
    AND.b #$01                  ;$01928E    |
    TAY                         ;$019290    |
    JSR CODE_019441             ;$019291    |\ Get and preserve the high byte of the tile the sprite is touching horizontally.
    STA.w $1862                 ;$019294    |/
    BEQ CODE_0192BA             ;$019297    |\ 
    LDA.w $1693                 ;$019299    ||
    CMP.b #$11                  ;$01929C    || Skip if not tiles 111-16D.
    BCC CODE_0192BA             ;$01929E    ||
    CMP.b #$6E                  ;$0192A0    ||
    BCS CODE_0192BA             ;$0192A2    ||
    JSR CODE_019425             ;$0192A4    || Preserve the position of the block, and set sprite blocked status.
    LDA.w $1693                 ;$0192A7    ||\ Preserve the low byte of the tile (111-16D only).
    STA.w $18A7                 ;$0192AA    ||/
    LDA.w $185E                 ;$0192AD    ||\ 
    BEQ CODE_0192BA             ;$0192B0    |||
    LDA.w $1588,X               ;$0192B2    ||| If the tile is on Layer 2, set the bit for touching its side.
    ORA.b #$40                  ;$0192B5    |||
    STA.w $1588,X               ;$0192B7    |//
CODE_0192BA:                    ;           |
    LDA.w $1693                 ;$0192BA    |\ Preserve the low byte of the tile the sprite is touching horizontally.
    STA.w $1860                 ;$0192BD    |/
Return0192C0:                   ;           |
    RTS                         ;$0192BA    |



DATA_0192C1:                    ;$0192C1    | Unused?
    db $FE,$02,$FF,$00

DATA_0192C5:                    ;$0192C5    | Speed (lo) that sprites get pushed with on tiles 10C/10D, the conveyors.
    db $01,$FF
DATA_0192C7:                    ;$0192C7    | Speed (hi) that sprites get pushed with on tiles 10C/10D, the conveyors.
    db $00,$FF



CODE_0192C9:                    ;-----------| Routine to process vertical block interaction for sprites.
    LDY.b #$02                  ;$0192C9    |\ 
    LDA $AA,X                   ;$0192CB    || Result: 2 = down, 3 = up (or stationary).
    BPL CODE_0192D0             ;$0192CD    ||
    INY                         ;$0192CF    |/
CODE_0192D0:                    ;           |
    JSR CODE_019441             ;$0192D0    |\ Get and preserve the high byte of the tile the sprite is touching vertically. 
    STA.w $18D7                 ;$0192D3    |/
    PHP                         ;$0192D6    |
    LDA.w $1693                 ;$0192D7    |\ Preserve the low byte of the tile the sprite is touching vertically.
    STA.w $185F                 ;$0192DA    |/
    PLP                         ;$0192DD    |
    BEQ Return01930F            ;$0192DE    |\ 
    LDA.w $1693                 ;$0192E0    ||
    CPY.b #$02                  ;$0192E3    ||
    BEQ CODE_019310             ;$0192E5    ||
    CMP.b #$11                  ;$0192E7    ||
    BCC Return01930F            ;$0192E9    || Return if the tile is on page 0, or not tile 111-16D and not a tileset-specific solid tile.
    CMP.b #$6E                  ;$0192EB    ||  Alternatively, branch to the next routine if the sprite is moving down onto a tile on page 1.
    BCC CODE_0192F9             ;$0192ED    ||
    CMP.w $1430                 ;$0192EF    ||
    BCC Return01930F            ;$0192F2    ||
    CMP.w $1431                 ;$0192F4    ||
    BCS Return01930F            ;$0192F7    |/
CODE_0192F9:                    ;           |
    JSR CODE_019425             ;$0192F9    | Preserve the position of the block, and set sprite blocked status.
    LDA.w $1693                 ;$0192FC    |
    STA.w $1868                 ;$0192FF    |
    LDA.w $185E                 ;$019302    |\ 
    BEQ Return01930F            ;$019305    ||
    LDA.w $1588,X               ;$019307    || If the tile was on Layer 2, set the corresponding blocked-from-below bit.
    ORA.b #$20                  ;$01930A    ||
    STA.w $1588,X               ;$01930C    |/
Return01930F:                   ;           |
    RTS                         ;$01930F    |

CODE_019310:                    ;```````````| Sprite is moving downward onto a tile on page 1.
    CMP.b #$59                  ;$019310    |\ 
    BCC CODE_01933B             ;$019312    ||
    CMP.b #$5C                  ;$019314    ||
    BCS CODE_01933B             ;$019316    || Branch if not tiles 159-15B and not in tilesets 03/0E.
    LDY.w $1931                 ;$019318    ||  (In other words, if not the tileset-specific lava.)
    CPY.b #$0E                  ;$01931B    ||
    BEQ CODE_019323             ;$01931D    ||
    CPY.b #$03                  ;$01931F    ||
    BNE CODE_01933B             ;$019321    |/
CODE_019323:                    ;           |
    LDA $9E,X                   ;$019323    |\ 
    CMP.b #$35                  ;$019325    ||
    BEQ CODE_019330             ;$019327    || If not invincible to lava, kill the sprite.
    LDA.w $167A,X               ;$019329    ||
    AND.b #$02                  ;$01932C    ||
    BNE CODE_01933B             ;$01932E    ||
CODE_019330:                    ;           ||
    LDA.b #$05                  ;$019330    ||\ 
    STA.w $14C8,X               ;$019332    |||
    LDA.b #$40                  ;$019335    ||| Set status to burning in lava, and set the sinking timer.
    STA.w $1558,X               ;$019337    |||
    RTS                         ;$01933A    |//

CODE_01933B:                    ;```````````| Touching a non-lava tile.
    CMP.b #$11                  ;$01933B    |\ Branch if touching a ledge (100-110)
    BCC CODE_0193B0             ;$01933D    |/
    CMP.b #$6E                  ;$01933F    |\ Branch if touching a solid block (111-16D)
    BCC CODE_0193B8             ;$019341    |/
    CMP.b #$D8                  ;$019343    |\ Branch if touching a non-slope tile (1D8-1FF; not 16E-1D7)
    BCS CODE_019386             ;$019345    |/
    JSL CODE_00FA19             ;$019347    |\ 
    LDA [$05],Y                 ;$01934B    || Get the pixel offset distance.
    CMP.b #$10                  ;$01934D    ||  Return as blank if #$10 (a full block; very steep slopes only).
    BEQ Return0193AF            ;$01934F    ||  Branch as a non-slope tile if greater than #$10 (i.e. an upside-down slope or the "inside" area of the bottom very steep tile).
    BCS CODE_019386             ;$019351    |/
    LDA $00                     ;$019353    |\ 
    CMP.b #$0C                  ;$019355    ||
    BCS CODE_01935D             ;$019357    || Return as blank if more than 4 pixels from the bottom of the block and below the pixel offset distance (i.e. don't force on top).
    CMP [$05],Y                 ;$019359    ||
    BCC Return0193AF            ;$01935B    |/
CODE_01935D:                    ;           |
    LDA [$05],Y                 ;$01935D    |\ Preserve pixel offset distance.
    STA.w $1694                 ;$01935F    |/
    PHX                         ;$019362    |
    LDX $08                     ;$019363    |\ 
    LDA.l DATA_00E53D,X         ;$019365    || Store the value for the slope the sprite is on.
    PLX                         ;$019369    ||
    STA.w $15B8,X               ;$01936A    |/
    CMP.b #$04                  ;$01936D    |\ 
    BEQ CODE_019375             ;$01936F    ||
    CMP.b #$FC                  ;$019371    ||
    BNE CODE_019384             ;$019373    ||
CODE_019375:                    ;           ||
    EOR $B6,X                   ;$019375    || If the sprite is moving towards (or is stationary on) a very steep slope,
    BPL CODE_019380             ;$019377    ||  flip its direction and push it down the slope.
    LDA $B6,X                   ;$019379    ||
    BEQ CODE_019380             ;$01937B    ||
    JSR FlipSpriteDir           ;$01937D    ||
CODE_019380:                    ;           ||
    JSL CODE_03C1CA             ;$019380    |/
CODE_019384:                    ;           |
    BRA CODE_0193B8             ;$019384    | Make solid.

CODE_019386:                    ;```````````| Sprite is touching a corner tile (1D8-1FF) or an upside-down slope.
    LDA $0C                     ;$019386    |\ 
    AND.b #$0F                  ;$019388    || Treat as blank if not touching the top area of the tile (within 5 pixels).
    CMP.b #$05                  ;$01938A    ||
    BCS Return0193AF            ;$01938C    |/
    LDA.w $14C8,X               ;$01938E    |\  
    CMP.b #$02                  ;$019391    ||
    BEQ Return0193AF            ;$019393    ||
    CMP.b #$05                  ;$019395    || Return if the sprite is dead and falling, sinking in lava, or being carried.
    BEQ Return0193AF            ;$019397    ||
    CMP.b #$0B                  ;$019399    ||
    BEQ Return0193AF            ;$01939B    |/
    LDA $D8,X                   ;$01939D    |\ 
    SEC                         ;$01939F    ||
    SBC.b #$01                  ;$0193A0    ||
    STA $D8,X                   ;$0193A2    || Move the sprite slightly upwards.
    LDA.w $14D4,X               ;$0193A4    ||
    SBC.b #$00                  ;$0193A7    ||
    STA.w $14D4,X               ;$0193A9    |/
    JSR CODE_0192C9             ;$0193AC    | Process vertical block interaction (so that it doesn't sink through the ground).
Return0193AF:                   ;           |
    RTS                         ;$0193AF    |

CODE_0193B0:                    ;```````````| Sprite is touching a ledge.
    LDA $0C                     ;$0193B0    |\ 
    AND.b #$0F                  ;$0193B2    || Return if touching the top of the ledge.
    CMP.b #$05                  ;$0193B4    ||| Range for the top of the ledge.
    BCS Return019424            ;$0193B6    |/
CODE_0193B8:                    ;```````````| Sprite is touching a solid block, or is on top of a ledge/slope.
    LDA.w $1686,X               ;$0193B8    |\ 
    AND.b #$04                  ;$0193BB    || Branch if the sprite has "weird ground behavior".
    BNE CODE_019414             ;$0193BD    |/
    LDA.w $14C8,X               ;$0193BF    |\ 
    CMP.b #$02                  ;$0193C2    ||
    BEQ Return019424            ;$0193C4    ||
    CMP.b #$05                  ;$0193C6    || Return as blank if the sprite is dead and falling, sinking in lava, or being carried.
    BEQ Return019424            ;$0193C8    ||
    CMP.b #$0B                  ;$0193CA    ||
    BEQ Return019424            ;$0193CC    |/
    LDY.w $1693                 ;$0193CE    |\ 
    CPY.b #$0C                  ;$0193D1    ||
    BEQ CODE_0193D9             ;$0193D3    || Branch if not tiles 10C/10D (ledge conveyors).
    CPY.b #$0D                  ;$0193D5    ||
    BNE CODE_019405             ;$0193D7    |/
CODE_0193D9:                    ;           |
    LDA $13                     ;$0193D9    |\ 
    AND.b #$03                  ;$0193DB    ||
    BNE CODE_019405             ;$0193DD    ||
    JSR IsTouchingObjSide       ;$0193DF    ||
    BNE CODE_019405             ;$0193E2    || Branch if not touching an object's side and not in tileset 2 (rope 1) or 8 (rope 3).
    LDA.w $1931                 ;$0193E4    ||  Even if it is, run the below code only once every 4 frames.
    CMP.b #$02                  ;$0193E7    ||
    BEQ CODE_0193EF             ;$0193E9    ||
    CMP.b #$08                  ;$0193EB    ||
    BNE CODE_019405             ;$0193ED    |/
CODE_0193EF:                    ;```````````| Code to make sprites move when placed on conveyor belts (10C/10D).
    TYA                         ;$0193EF    |
    SEC                         ;$0193F0    |
    SBC.b #$0C                  ;$0193F1    |
    TAY                         ;$0193F3    |
    LDA $E4,X                   ;$0193F4    |\ 
    CLC                         ;$0193F6    ||
    ADC.w DATA_0192C5,Y         ;$0193F7    ||
    STA $E4,X                   ;$0193FA    || Push the sprite a pixel to the left/right.
    LDA.w $14E0,X               ;$0193FC    ||
    ADC.w DATA_0192C7,Y         ;$0193FF    ||
    STA.w $14E0,X               ;$019402    |/
CODE_019405:                    ;```````````| Not a conveyor.
    LDA.w $15D0,X               ;$019405    |\ Branch if on Yoshi's tongue.
    BNE CODE_019414             ;$019408    |/
    LDA $D8,X                   ;$01940A    |\ 
    AND.b #$F0                  ;$01940C    ||
    CLC                         ;$01940E    || Shift sprite on top of the tile.
    ADC.w $1694                 ;$01940F    ||
    STA $D8,X                   ;$019412    |/
CODE_019414:                    ;           |
    JSR CODE_019435             ;$019414    | Set blocked bit for being blocked below.
    LDA.w $185E                 ;$019417    |\ 
    BEQ Return019424            ;$01941A    ||
    LDA.w $1588,X               ;$01941C    || If the tile was on Layer 2, set corresponding blocked bit as well.
    ORA.b #$80                  ;$01941F    ||
    STA.w $1588,X               ;$019421    |/
Return019424:                   ;           |
    RTS                         ;$019424    |



CODE_019425:                    ;```````````| Short subroutine to store a block's pposition in $98-$9B and set the blocked status for it.
    LDA $0A                     ;$019425    |
    STA $9A                     ;$019427    |
    LDA $0B                     ;$019429    |
    STA $9B                     ;$01942B    |
    LDA $0C                     ;$01942D    |
    STA $98                     ;$01942F    |
    LDA $0D                     ;$019431    |
    STA $99                     ;$019433    |
CODE_019435:                    ;           |
    LDY $0F                     ;$019435    |
    LDA.w $1588,X               ;$019437    |\ 
    ORA.w DATA_019134,Y         ;$01943A    || Set blocked status.
    STA.w $1588,X               ;$01943D    |/
    RTS                         ;$019440    |



    ; Scratch RAM returns:
    ; $00 - Block position for clipping, in the format #$YX.
    ; $01 - Temporary duplicate of $0A.
    ; $0A - Clipping X position, low.
    ; $0B - Clipping X position, high.
    ; $0C - Clipping Y position, low.
    ; $0D - Clipping Y position, high.
    ; $0F - Side being touched. 0 = right, 1 = left, 2 = down, 3 = up

CODE_019441:                    ;-----------| Subroutine to find the Map16 number a sprite is touching. Returns the high byte in A, and the low in $1693.
    STY $0F                     ;$019441    |  Usage: side in Y. 0 = right, 1 = left, 2 = down, 3 = up
    LDA.w $1656,X               ;$019443    |
    AND.b #$0F                  ;$019446    |
    ASL                         ;$019448    |
    ASL                         ;$019449    |
    ADC $0F                     ;$01944A    |
    TAY                         ;$01944C    |
CODE_01944D:                    ;```````````| Jump here instead to use a specified clipping index (in Y) instead of the one from $1656.
    LDA.w $185E                 ;$01944D    |\ 
    INC A                       ;$019450    || Branch if running horizontal interaction.
    AND $5B                     ;$019451    ||  Else, running vertical interaction.
    BEQ CODE_0194BF             ;$019453    |/
    LDA $D8,X                   ;$019455    |\ 
    CLC                         ;$019457    ||
    ADC.w SpriteObjClippingY,Y  ;$019458    ||
    STA $0C                     ;$01945B    ||
    AND.b #$F0                  ;$01945D    ||
    STA $00                     ;$01945F    || Store 16-bit vertical clipping position to $0C/$0D.
    LDA.w $14D4,X               ;$019461    ||
    ADC.b #$00                  ;$019464    ||
    CMP $5D                     ;$019466    ||\ If outside the vertical bounds of the level, treat as water and return.
    BCS CODE_0194B4             ;$019468    ||/
    STA $0D                     ;$01946A    |/
    LDA $E4,X                   ;$01946C    |\ 
    CLC                         ;$01946E    ||
    ADC.w SpriteObjClippingX,Y  ;$01946F    ||
    STA $0A                     ;$019472    ||
    STA $01                     ;$019474    || Store 16-bit horizontal clipping position to $0A/$0B.
    LDA.w $14E0,X               ;$019476    ||
    ADC.b #$00                  ;$019479    ||
    CMP.b #$02                  ;$01947B    ||\ If outside the horizontal bounds of the level, treat as water and return.
    BCS CODE_0194B4             ;$01947D    ||/
    STA $0B                     ;$01947F    |/
    LDA $01                     ;$019481    |\ 
    LSR                         ;$019483    ||
    LSR                         ;$019484    ||
    LSR                         ;$019485    || Store block position in #$YX format to $00.
    LSR                         ;$019486    ||
    ORA $00                     ;$019487    ||
    STA $00                     ;$019489    |/
    LDX $0D                     ;$01948B    |\ 
    LDA.l DATA_00BA80,X         ;$01948D    ||
    LDY.w $185E                 ;$019491    ||
    BEQ CODE_01949A             ;$019494    ||
    LDA.l DATA_00BA8E,X         ;$019496    ||
CODE_01949A:                    ;           ||
    CLC                         ;$01949A    ||
    ADC $00                     ;$01949B    ||
    STA $05                     ;$01949D    || Get lower two bytes of the Map16 pointer.
    LDA.l DATA_00BABC,X         ;$01949F    ||
    LDY.w $185E                 ;$0194A3    ||
    BEQ CODE_0194AC             ;$0194A6    ||
    LDA.l DATA_00BACA,X         ;$0194A8    ||
CODE_0194AC:                    ;           ||
    ADC $0B                     ;$0194AC    ||
    STA $06                     ;$0194AE    |/
    JSR CODE_019523             ;$0194B0    |
    RTS                         ;$0194B3    |


CODE_0194B4:                    ;```````````| Return touched block as water. Used if the sprite goes outside of the level.
    LDY $0F                     ;$0194B4    |
    LDA.b #$00                  ;$0194B6    |\ 
    STA.w $1693                 ;$0194B8    || Set the space outside of the level to act like water (tile 000) for sprites.
    STA.w $1694                 ;$0194BB    |/
    RTS                         ;$0194BE    |


CODE_0194BF:                    ;-----------| Find the Map16 number a sprite is touching on specifically a horizontal layer.
    LDA $D8,X                   ;$0194BF    |\ 
    CLC                         ;$0194C1    ||
    ADC.w SpriteObjClippingY,Y  ;$0194C2    ||
    STA $0C                     ;$0194C5    ||
    AND.b #$F0                  ;$0194C7    || Store 16-bit vertical clipping position to $0C/$0D.
    STA $00                     ;$0194C9    ||
    LDA.w $14D4,X               ;$0194CB    ||
    ADC.b #$00                  ;$0194CE    ||
    STA $0D                     ;$0194D0    |/
    REP #$20                    ;$0194D2    |
    LDA $0C                     ;$0194D4    |\ 
    CMP.w #$01B0                ;$0194D6    || If outside the vertical bounds of the level, treat as water and return.
    SEP #$20                    ;$0194D9    ||
    BCS CODE_0194B4             ;$0194DB    |/
    LDA $E4,X                   ;$0194DD    |\ 
    CLC                         ;$0194DF    ||
    ADC.w SpriteObjClippingX,Y  ;$0194E0    ||
    STA $0A                     ;$0194E3    || Store current clipping position in $0A/$0B.
    STA $01                     ;$0194E5    ||
    LDA.w $14E0,X               ;$0194E7    ||
    ADC.b #$00                  ;$0194EA    ||
    STA $0B                     ;$0194EC    |/
    BMI CODE_0194B4             ;$0194EE    |\ 
    CMP $5D                     ;$0194F0    || If outside the horizontal bounds of the level, treat as water and return.
    BCS CODE_0194B4             ;$0194F2    |/
    LDA $01                     ;$0194F4    |\ 
    LSR                         ;$0194F6    ||
    LSR                         ;$0194F7    ||
    LSR                         ;$0194F8    || Store block position in #$YX format to $00.
    LSR                         ;$0194F9    ||
    ORA $00                     ;$0194FA    ||
    STA $00                     ;$0194FC    |/
    LDX $0B                     ;$0194FE    |\ 
    LDA.l DATA_00BA60,X         ;$019500    ||
    LDY.w $185E                 ;$019504    ||
    BEQ CODE_01950D             ;$019507    ||
    LDA.l DATA_00BA70,X         ;$019509    ||
CODE_01950D:                    ;           ||
    CLC                         ;$01950D    ||
    ADC $00                     ;$01950E    || Get lower two bytes of the Map16 pointer.
    STA $05                     ;$019510    ||
    LDA.l DATA_00BA9C,X         ;$019512    ||
    LDY.w $185E                 ;$019516    ||
    BEQ CODE_01951F             ;$019519    ||
    LDA.l DATA_00BAAC,X         ;$01951B    ||
CODE_01951F:                    ;           ||
    ADC $0D                     ;$01951F    ||
    STA $06                     ;$019521    |/
CODE_019523:                    ;           |
    LDA.b #$7E                  ;$019523    |\ 
    STA $07                     ;$019525    ||
    LDX.w $15E9                 ;$019527    ||
    LDA [$05]                   ;$01952A    || Find what type of block the sprite is touching.
    STA.w $1693                 ;$01952C    ||  Get the proper Acts-Like setting in the process.
    INC $07                     ;$01952F    ||
    LDA [$05]                   ;$019531    ||
    JSL CODE_00F545             ;$019533    |/
    LDY $0F                     ;$019537    |
    CMP.b #$00                  ;$019539    |
    RTS                         ;$01953B    |





HandleSprStunned:               ;-----------| Routine to handle sprites in the stationary/carryable/stunned state (sprite status 9).
    LDA $9E,X                   ;$01953C    |\ 
    CMP.b #$2C                  ;$01953E    || If not sprite 2C (Yoshi egg), branch.
    BNE CODE_019554             ;$019540    |/
    LDA $C2,X                   ;$019542    |\ This never seems to be set for the Yoshi egg, so always branch. (?)
    BEQ CODE_01956A             ;$019544    |/
CODE_019546:                    ;           |
    LDA $64                     ;$019546    |\ 
    PHA                         ;$019548    ||
    LDA.b #$10                  ;$019549    ||
    STA $64                     ;$01954B    || Draw the sprite behind objects.
    JSR SubSprGfx2Entry1        ;$01954D    ||
    PLA                         ;$019550    ||
    STA $64                     ;$019551    |/
    RTS                         ;$019553    |

CODE_019554:
    CMP.b #$2F                  ;$019554    |\ If sprite 2F (springboard), return to normal status.
    BEQ SetNormalStatus2        ;$019556    |/
    CMP.b #$85                  ;$019558    |\ If sprite 85 (unused), return to normal status.
    BEQ SetNormalStatus2        ;$01955A    |/
    CMP.b #$7D                  ;$01955C    |\ If not sprite 7D (P-balloon), branch.
    BNE CODE_01956A             ;$01955E    |/
    STZ $AA,X                   ;$019560    | Zero the P-balloon's Y speed.
SetNormalStatus2:               ;           |
    LDA.b #$08                  ;$019562    |\ 
    STA.w $14C8,X               ;$019564    || Return the springboard and P-balloon to normal status, then draw its graphics.
    JMP CODE_01A187             ;$019567    |/


CODE_01956A:                    ;```````````| Routine for all stunned sprites except springboards and P-balloons.
    LDA $9D                     ;$01956A    |\ 
    BEQ CODE_019571             ;$01956C    || If sprites are locked, then skip object/sprite/Mario interaction and movement.
    JMP CODE_0195F5             ;$01956E    |/

CODE_019571:
    JSR CODE_019624             ;$019571    | Handle stun timer related routines.
    JSR SubUpdateSprPos         ;$019574    | Update X/Y position, apply gravity, and process interaction with blocks.
    JSR IsOnGround              ;$019577    |\ 
    BEQ CODE_019598             ;$01957A    || If the sprite is on the ground, process ground interaction.
    JSR CODE_0197D5             ;$01957C    ||
    LDA $9E,X                   ;$01957F    ||\ 
    CMP.b #$16                  ;$019581    ||| 
    BEQ ADDR_019589             ;$019583    ||| Return sprites 15 and 16 (fish) to normal status.
    CMP.b #$15                  ;$019585    |||  (seems to be unused?)
    BNE CODE_01958C             ;$019587    |||
ADDR_019589:                    ;           |||
    JMP SetNormalStatus2        ;$019589    ||/
CODE_01958C:                    ;           ||
    CMP.b #$2C                  ;$01958C    ||\ 
    BNE CODE_019598             ;$01958E    ||| Initialize the Yoshi egg's hatching sequence when it hits the ground and return it to normal status.
    LDA.b #$F0                  ;$019590    ||| Only applies to ? block eggs, and the speed doesn't actually affect anything.
    STA $AA,X                   ;$019592    |||
    JSL CODE_01F74C             ;$019594    |//
CODE_019598:                    ;           |
    JSR IsTouchingCeiling       ;$019598    |\ 
    BEQ CODE_0195DB             ;$01959B    || If the sprite hits a ceiling, send it back downwards.
    LDA.b #$10                  ;$01959D    ||
    STA $AA,X                   ;$01959F    ||
    JSR IsTouchingObjSide       ;$0195A1    ||\ 
    BNE CODE_0195DB             ;$0195A4    |||
    LDA $E4,X                   ;$0195A6    |||
    CLC                         ;$0195A8    |||
    ADC.b #$08                  ;$0195A9    |||
    STA $9A                     ;$0195AB    |||
    LDA.w $14E0,X               ;$0195AD    |||
    ADC.b #$00                  ;$0195B0    |||
    STA $9B                     ;$0195B2    |||
    LDA $D8,X                   ;$0195B4    |||
    AND.b #$F0                  ;$0195B6    |||
    STA $98                     ;$0195B8    |||
    LDA.w $14D4,X               ;$0195BA    ||| If the sprite isn't also touching the side of a block, make it interact with the block.
    STA $99                     ;$0195BD    |||  i.e. this is the code that lets you actually hit a block with a carryable sprite.
    LDA.w $1588,X               ;$0195BF    |||
    AND.b #$20                  ;$0195C2    ||| Why it matters that the side isn't being touched, who knows.
    ASL                         ;$0195C4    |||
    ASL                         ;$0195C5    |||
    ASL                         ;$0195C6    |||
    ROL                         ;$0195C7    |||
    AND.b #$01                  ;$0195C8    |||
    STA.w $1933                 ;$0195CA    |||
    LDY.b #$00                  ;$0195CD    |||
    LDA.w $1868                 ;$0195CF    |||
    JSL CODE_00F160             ;$0195D2    |||
    LDA.b #$08                  ;$0195D6    |||
    STA.w $1FE2,X               ;$0195D8    |//
CODE_0195DB:                    ;           |
    JSR IsTouchingObjSide       ;$0195DB    |\ 
    BEQ CODE_0195F2             ;$0195DE    ||
    LDA $9E,X                   ;$0195E0    ||\ 
    CMP.b #$0D                  ;$0195E2    ||| If the sprite is touching the side of a block and is not a shell, then interact with that block.
    BCC CODE_0195E9             ;$0195E4    |||
    JSR CODE_01999E             ;$0195E6    ||/
CODE_0195E9:                    ;           ||
    LDA $B6,X                   ;$0195E9    ||\ 
    ASL                         ;$0195EB    |||
    PHP                         ;$0195EC    ||| Make the sprite bounce backwards from the wall at 1/4th of its speed.
    ROR $B6,X                   ;$0195ED    |||
    PLP                         ;$0195EF    |||
    ROR $B6,X                   ;$0195F0    |//
CODE_0195F2:                    ;           |
    JSR SubSprSprPMarioSpr      ;$0195F2    | Interact with Mario and other sprites.
CODE_0195F5:                    ;           |
    JSR CODE_01A187             ;$0195F5    | Draw graphics, and handle stunned sprite routines.
    JSR SubOffscreen0Bnk1       ;$0195F8    | Process offscreen from -$40 to +$30.
    RTS                         ;$0195FB    |



Unused0195FC:                   ;$0195FC    | Unused table.
    db $00,$00,$00,$00,$04,$05,$06,$07
    db $00,$00,$00,$00,$04,$05,$06,$07
    db $00,$00,$00,$00,$04,$05,$06,$07
    db $00,$00,$00,$00,$04,$05,$06,$07



SpriteKoopasSpawn:              ;$01961C    | Sprites spawned from a stunned shell. First four bytes are unused.
    db $00,$00,$00,$00,$00,$01,$02,$03

CODE_019624:                    ;-----------| Subroutine to handle routines relating to the stun timer for stunned sprites.
    LDA $9E,X                   ;$019624    |\ 
    CMP.b #$0D                  ;$019626    || If not sprite 0D (Bob-omb), branch.
    BNE CODE_01965C             ;$019628    ||
    LDA.w $1540,X               ;$01962A    ||\ 
    CMP.b #$01                  ;$01962D    ||| If the Bob-omb's timer isn't 01, then branch becuase it's not set to explode.
    BNE CODE_01964E             ;$01962F    ||/
    LDA.b #$09                  ;$019631    ||\ SFX for the Bob-omb explosion.
    STA.w $1DFC                 ;$019633    ||/
    LDA.b #$01                  ;$019636    ||\ Set the Bob-omb's exploding flag.
    STA.w $1534,X               ;$019638    ||/
    LDA.b #$40                  ;$01963B    || How long the Bob-omb's explosion should last.
    STA.w $1540,X               ;$01963D    ||
    LDA.b #$08                  ;$019640    ||\ Run the explosion in a normal status.
    STA.w $14C8,X               ;$019642    ||/
    LDA.w $1686,X               ;$019645    ||\ 
    AND.b #$F7                  ;$019648    ||| Don't let Yoshi eat the explosion and don't let it turn into a coin after a goal post.
    STA.w $1686,X               ;$01964A    ||/
    RTS                         ;$01964D    |/

CODE_01964E:
    CMP.b #$40                  ;$01964E    |\ 
    BCS Return01965B            ;$019650    ||
    ASL                         ;$019652    || If the Bob-omb's timer is less than #$40, then make it flash.
    AND.b #$0E                  ;$019653    || Either way, return afterwards.
    EOR.w $15F6,X               ;$019655    ||
    STA.w $15F6,X               ;$019658    |/
Return01965B:                   ;           |
    RTS                         ;$01965B    |


CODE_01965C:                    ;```````````| Not a Bob-omb. This part checks if it's shell with a Koopa inside, that is about to turn into a normal Koopa.
    LDA.w $1540,X               ;$01965C    |\ 
    ORA.w $1558,X               ;$01965F    || Duplicate the stun timer to $C2. No real reason for this (maybe?), but it happens.
    STA $C2,X                   ;$019662    |/
    LDA.w $1558,X               ;$019664    |\ 
    BEQ CODE_01969C             ;$019667    ||
    CMP.b #$01                  ;$019669    || Essentially, branch if this is not a shell
    BNE CODE_01969C             ;$01966B    ||  or there is not a Koopa currently jumping into it.
    LDY.w $1594,X               ;$01966D    || Of course, it doesn't explicitely check this, which results in some odd bugs.
    LDA.w $15D0,Y               ;$019670    ||
    BNE CODE_01969C             ;$019673    |/
    JSL LoadSpriteTables        ;$019675    |
    JSR FaceMario               ;$019679    |
    ASL.w $15F6,X               ;$01967C    |\ Clear the shell's Y flip.
    LSR.w $15F6,X               ;$01967F    |/
    LDY.w $160E,X               ;$019682    |\ Turn the shell into a Koopa. If a yellow Koopa entered it, turn it into a disco shell.
    LDA.b #$08                  ;$019685    ||
    CPY.b #$03                  ;$019687    ||| Koopa sprite ID that makes a disco shell.
    BNE CODE_019698             ;$019689    ||
    INC.w $187B,X               ;$01968B    ||
    LDA.w $166E,X               ;$01968E    ||\ 
    ORA.b #$30                  ;$019691    ||| Disable cape/fireball killing.
    STA.w $166E,X               ;$019693    ||/
    LDA.b #$0A                  ;$019696    ||
CODE_019698:                    ;           ||
    STA.w $14C8,X               ;$019698    |/
Return01969B:                   ;           |
    RTS                         ;$01969B    |

CODE_01969C:                    ;```````````| Not a shell turning into a Koopa. Check other stunned sprite routines.
    LDA.w $1540,X               ;$01969C    |\ If the sprite's stun timer isn't set, return.
    BEQ Return01969B            ;$01969F    |/  (i.e. it's not a stunned Goomba, Koopa, MechaKoopa, etc.)
    CMP.b #$03                  ;$0196A1    |\ 
    BEQ UnstunSprite            ;$0196A3    || If the stun timer is not #$03 or #$01, handle the stun timer as usual.
    CMP.b #$01                  ;$0196A5    ||
    BNE IncrmntStunTimer        ;$0196A7    |/
UnstunSprite:                   ;```````````| Routine to unstun a sprite.
    LDA $9E,X                   ;$0196A9    |
    CMP.b #$11                  ;$0196AB    |\ Sprite 11 (Buzzy Beetle): Return to normal status.
    BEQ SetNormalStatus         ;$0196AD    ||
    CMP.b #$2E                  ;$0196AF    || Sprite 2E (Spike Top?): Return to normal status.
    BEQ SetNormalStatus         ;$0196B1    ||
    CMP.b #$2D                  ;$0196B3    || Sprite 2D (Baby Yoshi): Stay stunned.
    BEQ Return0196CA            ;$0196B5    ||
    CMP.b #$A2                  ;$0196B7    || Sprite A2 (MechaKoopa): Return to normal status.
    BEQ SetNormalStatus         ;$0196B9    ||
    CMP.b #$0F                  ;$0196BB    || Sprite 0F (Goomba): Return to normal status.
    BEQ SetNormalStatus         ;$0196BD    ||
    CMP.b #$2C                  ;$0196BF    || Sprite 2C (Yoshi Egg): Stay stunned.
    BEQ Return0196CA            ;$0196C1    ||
    CMP.b #$53                  ;$0196C3    || Sprite 04-07 (Shells): Spawn a Koopa. [note: the BNE is why stun glitch happens]
    BNE GeneralResetSpr         ;$0196C5    ||  Yellow koopas also spawn a coin.
    JSR CODE_019ACB             ;$0196C7    |/ Sprite 53 (Throwblock): Erase it with a cloud of smoke.
Return0196CA:                   ;           |
    RTS                         ;$0196CA    |

SetNormalStatus:                ;-----------| Subroutine to return a sprite to normal status.
    LDA.b #$08                  ;$0196CB    |
    STA.w $14C8,X               ;$0196CD    |
    ASL.w $15F6,X               ;$0196D0    |\ Reset Y flip.
    LSR.w $15F6,X               ;$0196D3    |/
    RTS                         ;$0196D6    |

IncrmntStunTimer:               ;-----------| Subroutine to counter the stun timer every other frame.
    LDA $13                     ;$0196D7    |\ 
    AND.b #$01                  ;$0196D9    || Increment the stun timer every other frame.
    BNE Return0196E0            ;$0196DB    || Since the stun timer decrements EVERY frame, what this is actually doing is decrementing every two frames.
    INC.w $1540,X               ;$0196DD    |/
Return0196E0:                   ;           |
    RTS                         ;$0196E0    |

GeneralResetSpr:                ;-----------| Subroutine to spawn a sprite from a shell when unstunning (includes being knocked out from bouncing on).
    JSL FindFreeSprSlot         ;$0196E1    |\ Return if no empty slots.
    BMI Return0196CA            ;$0196E5    |/
    LDA.b #$08                  ;$0196E7    |
    STA.w $14C8,Y               ;$0196E9    |
    LDA $9E,X                   ;$0196EC    |\ 
    TAX                         ;$0196EE    || Spawn the Koopa corresponding to the shell's ID.
    LDA.w SpriteKoopasSpawn,X   ;$0196EF    ||
    STA.w $009E,Y               ;$0196F2    |/
    TYX                         ;$0196F5    |
    JSL InitSpriteTables        ;$0196F6    |
    LDX.w $15E9                 ;$0196FA    |
    LDA $E4,X                   ;$0196FD    |\ 
    STA.w $00E4,Y               ;$0196FF    ||
    LDA.w $14E0,X               ;$019702    ||
    STA.w $14E0,Y               ;$019705    || Make sure it spawns at the same position as the shell.
    LDA $D8,X                   ;$019708    ||
    STA.w $00D8,Y               ;$01970A    ||
    LDA.w $14D4,X               ;$01970D    ||
    STA.w $14D4,Y               ;$019710    |/
    LDA.b #$00                  ;$019713    |\ Face the koopa right.
    STA.w $157C,Y               ;$019715    |/
    LDA.b #$10                  ;$019718    |\ Briefly disable sprite contact for the Koopa.
    STA.w $1564,Y               ;$01971A    |/
    LDA.w $164A,X               ;$01971D    |\ 
    STA.w $164A,Y               ;$019720    || Share RAM for being in water + being stunned.
    LDA.w $1540,X               ;$019723    ||
    STZ.w $1540,X               ;$019726    |/
    CMP.b #$01                  ;$019729    |\ Branch if the koopa is being spawned from being knocked out of the shell, not shaking itself out.
    BEQ CODE_019747             ;$01972B    |/
    LDA.b #$D0                  ;$01972D    |\\ Y speed for a shell-less Koopa when it jumps out of a shell.
    STA.w $00AA,Y               ;$01972F    |/
    PHY                         ;$019732    |
    JSR SubHorzPosBnk1          ;$019733    |\ 
    TYA                         ;$019736    ||
    EOR.b #$01                  ;$019737    ||
    PLY                         ;$019739    ||
    STA.w $157C,Y               ;$01973A    || Face away from Mario.
    PHX                         ;$01973D    ||
    TAX                         ;$01973E    ||
    LDA.w Spr0to13SpeedX,X      ;$01973F    ||
    STA.w $00B6,Y               ;$019742    |/
    PLX                         ;$019745    |
    RTS                         ;$019746    |

CODE_019747:                    ;```````````| Spawning a koopa from a shell and about to unstun.
    PHY                         ;$019747    |
    JSR SubHorzPosBnk1          ;$019748    |\ 
    LDA.w DATA_0197AD,Y         ;$01974B    ||
    STY $00                     ;$01974E    ||
    PLY                         ;$019750    || Give Koopa an X speed away from Mario.
    STA.w $00B6,Y               ;$019751    ||
    LDA $00                     ;$019754    ||
    EOR.b #$01                  ;$019756    ||
    STA.w $157C,Y               ;$019758    ||
    STA $01                     ;$01975B    |/
    LDA.b #$10                  ;$01975D    |\ 
    STA.w $154C,Y               ;$01975F    || Disable player contact and set sliding flag for the Koopa.
    STA.w $1528,Y               ;$019762    |/
    LDA $9E,X                   ;$019765    |\ 
    CMP.b #$07                  ;$019767    || Return if not knocking out a yellow Koopa.
    BNE Return019775            ;$019769    |/
    LDY.b #$08                  ;$01976B    |\ 
CODE_01976D:                    ;           ||
    LDA.w $14C8,Y               ;$01976D    || Spawn a coin too.
    BEQ SpawnMovingCoin         ;$019770    ||
    DEY                         ;$019772    ||
    BPL CODE_01976D             ;$019773    |/
Return019775:                   ;           |
    RTS                         ;$019775    |


SpawnMovingCoin:                ;-----------| Routine to spawn a moving coin when a yellow koopa is hit.
    LDA.b #$08                  ;$019776    |
    STA.w $14C8,Y               ;$019778    |
    LDA.b #$21                  ;$01977B    |
    STA.w $009E,Y               ;$01977D    |
    LDA $E4,X                   ;$019780    |
    STA.w $00E4,Y               ;$019782    |
    LDA.w $14E0,X               ;$019785    |
    STA.w $14E0,Y               ;$019788    |
    LDA $D8,X                   ;$01978B    |
    STA.w $00D8,Y               ;$01978D    |
    LDA.w $14D4,X               ;$019790    |
    STA.w $14D4,Y               ;$019793    |
    PHX                         ;$019796    |
    TYX                         ;$019797    |
    JSL InitSpriteTables        ;$019798    |
    PLX                         ;$01979C    |
    LDA.b #$D0                  ;$01979D    |
    STA.w $00AA,Y               ;$01979F    |
    LDA $01                     ;$0197A2    |
    STA.w $157C,Y               ;$0197A4    |
    LDA.b #$20                  ;$0197A7    |
    STA.w $154C,Y               ;$0197A9    |
    RTS                         ;$0197AC    |

DATA_0197AD:                    ;$0197AD    | X speeds to give Koopas spawned when knocked out of a shell.
    db $C0,$40





DATA_0197AF:                    ;$0197AF    | Bounce speeds for carryable sprites when hitting the ground. Indexed by Y speed divided by 4.
    db $00,$00,$00,$F8,$F8,$F8,$F8,$F8
    db $F8,$F7,$F6,$F5,$F4,$F3,$F2,$E8
    db $E8,$E8,$E8,$00,$00,$00,$00,$FE      ; Goombas in particular use the values starting at the $00s here.
    db $FC,$F8,$EC,$EC,$EC,$E8,$E4,$E0
    db $DC,$D8,$D4,$D0,$CC,$C8

CODE_0197D5:                    ;-----------| Subroutine to make carryable sprites bounce when they hit the ground.
    LDA $B6,X                   ;$0197D5    |\ 
    PHP                         ;$0197D7    ||
    BPL CODE_0197DD             ;$0197D8    ||
    JSR InvertAccum             ;$0197DA    ||
CODE_0197DD:                    ;           ||
    LSR                         ;$0197DD    || Halve the sprite's X speed.
    PLP                         ;$0197DE    ||
    BPL CODE_0197E4             ;$0197DF    ||
    JSR InvertAccum             ;$0197E1    ||
CODE_0197E4:                    ;           ||
    STA $B6,X                   ;$0197E4    |/
    LDA $AA,X                   ;$0197E6    |\ 
    PHA                         ;$0197E8    || Set a normal ground Y speed.
    JSR SetSomeYSpeed           ;$0197E9    |/
    PLA                         ;$0197EC    |
    LSR                         ;$0197ED    |
    LSR                         ;$0197EE    |
    TAY                         ;$0197EF    |
    LDA $9E,X                   ;$0197F0    |\ 
    CMP.b #$0F                  ;$0197F2    ||
    BNE CODE_0197FB             ;$0197F4    ||
    TYA                         ;$0197F6    || Make Goombas bounce extra high.
    CLC                         ;$0197F7    ||
    ADC.b #$13                  ;$0197F8    ||
    TAY                         ;$0197FA    |/
CODE_0197FB:                    ;           |
    LDA.w DATA_0197AF,Y         ;$0197FB    |\ 
    LDY.w $1588,X               ;$0197FE    || Get the Y speed to make the sprite bounce at when it hits the ground.
    BMI Return019805            ;$019801    ||
    STA $AA,X                   ;$019803    |/
Return019805:                   ;           |
    RTS                         ;$019805    |





    ; Shell misc RAM:
    ; $C2   - If set to a non-zero value, there is a Koopa inside the shell. Set in a few ways:
    ;          Set to #$0F when it's entered and starts to shake, after which it turns into a Koopa.
    ;          Always set to #$01 when a Koopa is inside the shell. Also applies to disco shells.
    ;          Set to the value in $1540 or $1558 for a shell while stunned.
    ; $151C - When in disco shell form, if set, the shell will not follow Mario.
    ; $1528 - Sliding flag. Set when a blue Koopa is catching it.
    ; $1540 - Stun timer. Set to #$02 for a shell on the frame a Koopa is knocked out of it, cleared the next frame.
    ;          Set to #$FF when capespinned with a Koopa inside, or when spawned from a block. At zero, the Koopa jumps out.
    ; $154C - Timer for disabling interaction with Mario and other sprites. Set under a few circumstances:
    ;          Set to #$2C when spawned from a block.
    ;          Set to #$08 when picked up.
    ;          Set to #$10 when dropping or throwing.
    ; $1558 - Used for various timers.
    ;          Set to #$10 when it's entered by a Koopa and starts to shake, after which it turns into a Koopa.
    ;          Set to #$40 when sinking in lava.
    ; $1564 - Timer to disable sprite contact with other sprites. Set to #$08 when kicked by a blue Koopa.
    ; $1570 - Frame counter for animation, as well as for when player-following Koopas should turn.
    ; $157C - Direction of horizontal movement. 00 = right, 01 = left
    ; $1594 - Shell-less Koopas and shells set this to each other's sprite slots when one is jumping into the other.
    ; $15AC - Timer to tell the sprite to turn around. Set to #$08 when turning, decrases every frame.
    ;          Also set to #$10 when spawned from a block for some reason.
    ; $1602 - Animation frame to use.
    ;          6/7/8 = shell
    ; $160E - When a shell-less Koopa jumps into the shell, this is set to its sprite ID.
    ; $1626 - Number of consecutive enemies the shell has killed.
    ; $187B - If non-zero, the shell functions as a disco shell.
    ; NOTE: These also apply to sprite 09, not just 04-07.
    
CODE_019806:                    ;-----------| Carryable shell MAIN.
    LDA.b #$06                  ;$019806    |\\ Default animation frame.
    LDY.w $15EA,X               ;$019808    ||
    BNE CODE_01980F             ;$01980B    ||
    LDA.b #$08                  ;$01980D    ||| Animation frame when turning while Mario is holding it.
CODE_01980F:                    ;           ||
    STA.w $1602,X               ;$01980F    |/
    LDA.w $15EA,X               ;$019812    |\ 
    PHA                         ;$019815    ||
    BEQ CODE_01981B             ;$019816    || Increase OAM index if the shell doesn't already have an index of 0?
    CLC                         ;$019818    ||  (it does this to draw the eyes on top, although I don't know why it ignores 0)
    ADC.b #$08                  ;$019819    ||
CODE_01981B:                    ;           ||
    STA.w $15EA,X               ;$01981B    |/
    JSR SubSprGfx2Entry1        ;$01981E    | Draw a 16x16 sprite.
    PLA                         ;$019821    |
    STA.w $15EA,X               ;$019822    |
    LDA.w $1EEB                 ;$019825    |\ If the Special World is passed, return.
    BMI Return0198A6            ;$019828    |/  (don't shake / display Koopa eyes)
    LDA.w $1602,X               ;$01982A    |\ 
    CMP.b #$06                  ;$01982D    || If the opening in the shell's graphics isn't facing the screen, return.
    BNE Return0198A6            ;$01982F    |/
    LDY.w $15EA,X               ;$019831    |
    LDA.w $1558,X               ;$019834    |\\ If the shell is being entered by a Koopa, make it shake.
    BNE CODE_019842             ;$019837    ||/
    LDA.w $1540,X               ;$019839    ||\ Or if the shell already has a Koopa hiding inside, make it shake when it's about to emerge.
    BEQ Return0198A6            ;$01983C    |||  (else, return the routine)
    CMP.b #$30                  ;$01983E    |||| At what time the Koopa shell begins to shake when a Koopa is hiding inside..
    BCS CODE_01984D             ;$019840    ||/
CODE_019842:                    ;           ||
    LSR                         ;$019842    || Make the Koopa shell shake.
    LDA.w $0308,Y               ;$019843    ||
    ADC.b #$00                  ;$019846    ||
    BCS CODE_01984D             ;$019848    ||
    STA.w $0308,Y               ;$01984A    |/
CODE_01984D:                    ;           |
    LDA $9E,X                   ;$01984D    |\ 
    CMP.b #$11                  ;$01984F    ||
    BEQ Return0198A6            ;$019851    || If the shell is a Buzzy Beetle or offscreen, return (don't draw Koopa eyes).
    JSR IsSprOffScreen          ;$019853    ||
    BNE Return0198A6            ;$019856    |/
    LDA.w $15F6,X               ;$019858    |\ 
    ASL                         ;$01985B    ||
    LDA.b #$08                  ;$01985C    ||| Y offset of the Koopa eyes when the shell is upside down.
    BCC CODE_019862             ;$01985E    ||
    LDA.b #$00                  ;$019860    ||| Y offset of the Koopa eyes when the shell is rightside up.
CODE_019862:                    ;           ||
    STA $00                     ;$019862    |/
    LDA.w $0308,Y               ;$019864    |\ 
    CLC                         ;$019867    ||
    ADC.b #$02                  ;$019868    ||
    STA.w $0300,Y               ;$01986A    ||
    CLC                         ;$01986D    ||
    ADC.b #$04                  ;$01986E    || Set X/Y position.
    STA.w $0304,Y               ;$019870    ||
    LDA.w $0309,Y               ;$019873    ||
    CLC                         ;$019876    ||
    ADC $00                     ;$019877    ||
    STA.w $0301,Y               ;$019879    ||
    STA.w $0305,Y               ;$01987C    |/
    PHY                         ;$01987F    |
    LDY.b #$64                  ;$019880    |\\ Koopa shell eye tile (open)
    LDA $14                     ;$019882    ||
    AND.b #$F8                  ;$019884    ||
    BNE CODE_01988A             ;$019886    ||
    LDY.b #$4D                  ;$019888    ||| Koopa shell eye tile (closed)
CODE_01988A:                    ;           ||
    TYA                         ;$01988A    || Set tile numbers.
    PLY                         ;$01988B    ||
    STA.w $0302,Y               ;$01988C    ||
    STA.w $0306,Y               ;$01988F    |/
    LDA $64                     ;$019892    |\ 
    STA.w $0303,Y               ;$019894    || Set YXPPCCCT.
    STA.w $0307,Y               ;$019897    |/
    TYA                         ;$01989A    |\ 
    LSR                         ;$01989B    ||
    LSR                         ;$01989C    ||
    TAY                         ;$01989D    || Set tile size.
    LDA.b #$00                  ;$01989E    ||
    STA.w $0460,Y               ;$0198A0    ||
    STA.w $0461,Y               ;$0198A3    |/
Return0198A6:                   ;           |
    RTS                         ;$0198A6    |





DATA_0198A7:                    ;$0198A7    | X speeds to give the disco shell when it bumps into a wall.
    db $E0,$20

CODE_0198A9:                    ;-----------| Disco shell MAIN (see the actual shell's MAIN for misc ram)
    LDA $9D                     ;$0198A9    |\ 
    BEQ CODE_0198B0             ;$0198AB    || If the game is frozen, just draw graphics.
    JMP CODE_019A2A             ;$0198AD    |/

CODE_0198B0:
    JSR SubUpdateSprPos         ;$0198B0    | Update X/Y position, apply gravity, and process interaction with blocks.
    LDA.w $151C,X               ;$0198B3    |\ 
    AND.b #$1F                  ;$0198B6    || Follow Mario, except when $151C is non-zero. Likely a beta remnant?
    BNE CODE_0198BD             ;$0198B8    ||
    JSR FaceMario               ;$0198BA    |/
CODE_0198BD:                    ;           |
    LDA $B6,X                   ;$0198BD    |\ 
    LDY.w $157C,X               ;$0198BF    || If not at max speed, accelerate the disco Shell accordingly.
    CPY.b #$00                  ;$0198C2    ||
    BNE CODE_0198D0             ;$0198C4    ||
    CMP.b #$20                  ;$0198C6    ||| Maximum speed rightward for the disco shell.
    BPL CODE_0198D8             ;$0198C8    ||
    INC $B6,X                   ;$0198CA    ||
    INC $B6,X                   ;$0198CC    ||
    BRA CODE_0198D8             ;$0198CE    ||
CODE_0198D0:                    ;           ||
    CMP.b #$E0                  ;$0198D0    ||| Maximum speed leftward for the disco shell.
    BMI CODE_0198D8             ;$0198D2    ||
    DEC $B6,X                   ;$0198D4    ||
    DEC $B6,X                   ;$0198D6    |/
CODE_0198D8:                    ;           |
    JSR IsTouchingObjSide       ;$0198D8    |\ 
    BEQ CODE_0198EA             ;$0198DB    ||
    PHA                         ;$0198DD    ||
    JSR CODE_01999E             ;$0198DE    ||
    PLA                         ;$0198E1    || If it hits the side of a block, interact with the block and bump it up to maximum X speed.
    AND.b #$03                  ;$0198E2    ||
    TAY                         ;$0198E4    ||
    LDA.w DATA_0198A7-1,Y       ;$0198E5    ||
    STA $B6,X                   ;$0198E8    |/
CODE_0198EA:                    ;           |
    JSR IsOnGround              ;$0198EA    |\ 
    BEQ CODE_0198F6             ;$0198ED    ||
    JSR SetSomeYSpeed           ;$0198EF    || If on the ground, set its Y speed to 10. (useless JSR)
    LDA.b #$10                  ;$0198F2    ||
    STA $AA,X                   ;$0198F4    |/
CODE_0198F6:                    ;           |
    JSR IsTouchingCeiling       ;$0198F6    |\ 
    BEQ CODE_0198FD             ;$0198F9    || If it hits a ceiling, clear its Y speed.
    STZ $AA,X                   ;$0198FB    |/
CODE_0198FD:                    ;           |
    LDA $13                     ;$0198FD    |\ 
    AND.b #$01                  ;$0198FF    ||
    BNE CODE_01990D             ;$019901    ||
    LDA.w $15F6,X               ;$019903    || Cycle through the palettes every other frame.
    INC A                       ;$019906    ||
    INC A                       ;$019907    ||
    AND.b #$CF                  ;$019908    ||
    STA.w $15F6,X               ;$01990A    |/
CODE_01990D:                    ;           |
    JMP CODE_01998C             ;$01990D    |



DATA_019910:
    db $F0,$EE,$EC

HandleSprKicked:                ;-----------| Routine to handle a sprite being kicked (sprite status A). Serves as a MAIN for many carryable sprites.
    LDA.w $187B,X               ;$019913    |\ 
    BEQ CODE_01991B             ;$019916    || Jump to the code above if it's a shell set to become a disco shell.
    JMP CODE_0198A9             ;$019918    |/

CODE_01991B:                    ;```````````| Not a disco shell.
    LDA.w $167A,X               ;$01991B    |\ 
    AND.b #$10                  ;$01991E    ||
    BEQ CODE_019928             ;$019920    || If it can be kicked like a shell, set the stun timer and return to carryable status, then draw graphics.
    JSR CODE_01AA0B             ;$019922    ||
    JMP CODE_01A187             ;$019925    |/

CODE_019928:                    ;```````````| Kicked shell MAIN (see other main for misc ram; this routine also includes Buzzy Beetle shells and throwblocks)
    LDA.w $1528,X               ;$019928    |\ 
    BNE CODE_019939             ;$01992B    ||
    LDA $B6,X                   ;$01992D    ||
    CLC                         ;$01992F    || If not being caught by a Koopa, return the shell to carryable state if it somehow slows down enough.
    ADC.b #$20                  ;$019930    ||  (how to do this, though, is a mystery)
    CMP.b #$40                  ;$019932    ||
    BCS CODE_019939             ;$019934    ||
    JSR CODE_01AA0B             ;$019936    |/
CODE_019939:                    ;           |
    STZ.w $1528,X               ;$019939    |
    LDA $9D                     ;$01993C    |\ 
    ORA.w $163E,X               ;$01993E    || If sprites are frozen or (?) is happening, just draw graphics.
    BEQ CODE_019946             ;$019941    ||
    JMP CODE_01998F             ;$019943    |/

CODE_019946:
    JSR UpdateDirection         ;$019946    |
    LDA.w $15B8,X               ;$019949    |
    PHA                         ;$01994C    |
    JSR SubUpdateSprPos         ;$01994D    | Update X/Y position, apply gravity, and process interaction with blocks.
    PLA                         ;$019950    |
    BEQ CODE_019969             ;$019951    |\ 
    STA $00                     ;$019953    ||
    LDY.w $164A,X               ;$019955    ||
    BNE CODE_019969             ;$019958    ||
    CMP.w $15B8,X               ;$01995A    || If the sprite has just gone onto a slope, is not in water, and is moving faster than the slopes's angle,
    BEQ CODE_019969             ;$01995D    ||  then make it "bounce" slightly off the slope.
    EOR $B6,X                   ;$01995F    ||
    BMI CODE_019969             ;$019961    ||
    LDA.b #$F8                  ;$019963    ||
    STA $AA,X                   ;$019965    ||
    BRA CODE_019975             ;$019967    |/

CODE_019969:
    JSR IsOnGround              ;$019969    |\ 
    BEQ CODE_019984             ;$01996C    || If on the ground, set its Y speed to 10. (useless JSR)
    JSR SetSomeYSpeed           ;$01996E    ||
    LDA.b #$10                  ;$019971    || [Change to #$0C to make it never fall in one-tile gaps, and #$28 to make it always (#$19 if not sprinting)]
    STA $AA,X                   ;$019973    |/
CODE_019975:                    ;           |
    LDA.w $1860                 ;$019975    |\ 
    CMP.b #$B5                  ;$019978    ||
    BEQ CODE_019980             ;$01997A    ||
    CMP.b #$B4                  ;$01997C    || If the shell hits a purple triangle, send it flying in the air.
    BNE CODE_019984             ;$01997E    ||
CODE_019980:                    ;           ||
    LDA.b #$B8                  ;$019980    ||| Y speed to give the shell.
    STA $AA,X                   ;$019982    |/
CODE_019984:                    ;           |
    JSR IsTouchingObjSide       ;$019984    |\ 
    BEQ CODE_01998C             ;$019987    || If it hits the side of a block, handle interaction with it.
    JSR CODE_01999E             ;$019989    |/
CODE_01998C:                    ;           |
    JSR SubSprSprPMarioSpr      ;$01998C    | Process interaction with Mario and other sprites.
CODE_01998F:                    ;           |
    JSR SubOffscreen0Bnk1       ;$01998F    | Process offscreen from -$40 to +$30.
    LDA $9E,X                   ;$019992    |\ 
    CMP.b #$53                  ;$019994    ||
    BEQ CODE_01999B             ;$019996    || If the sprite is a throwblock, process its normal stunned routine simultaneously.
    JMP CODE_019A2A             ;$019998    ||  Else, draw shell graphics.
CODE_01999B:                    ;           ||
    JMP StunThrowBlock          ;$01999B    |/



CODE_01999E:                    ;-----------| Subroutine for thrown sprites interacting with the sides of blocks.
    LDA.b #$01                  ;$01999E    |\ SFX for hitting a block with any sprite.
    STA.w $1DF9                 ;$0199A0    |/
    JSR CODE_0190A2             ;$0199A3    | Invert the sprite's X speed.
    LDA.w $15A0,X               ;$0199A6    |\ 
    BNE CODE_0199D2             ;$0199A9    ||
    LDA $E4,X                   ;$0199AB    ||
    SEC                         ;$0199AD    ||
    SBC $1A                     ;$0199AE    ||
    CLC                         ;$0199B0    ||
    ADC.b #$14                  ;$0199B1    ||
    CMP.b #$1C                  ;$0199B3    ||
    BCC CODE_0199D2             ;$0199B5    ||
    LDA.w $1588,X               ;$0199B7    || If it's far enough on-screen, make it actually interact with the block.
    AND.b #$40                  ;$0199BA    ||  i.e. this is the code that lets you actually hit a block with a thrown sprite.
    ASL                         ;$0199BC    ||
    ASL                         ;$0199BD    ||
    ROL                         ;$0199BE    ||
    AND.b #$01                  ;$0199BF    ||
    STA.w $1933                 ;$0199C1    ||
    LDY.b #$00                  ;$0199C4    ||
    LDA.w $18A7                 ;$0199C6    ||
    JSL CODE_00F160             ;$0199C9    ||
    LDA.b #$05                  ;$0199CD    ||
    STA.w $1FE2,X               ;$0199CF    |/
CODE_0199D2:                    ;           |
    LDA $9E,X                   ;$0199D2    |\ 
    CMP.b #$53                  ;$0199D4    || If the sprite is a throwblock, shatter it.
    BNE Return0199DB            ;$0199D6    ||
    JSR BreakThrowBlock         ;$0199D8    |/
Return0199DB:                   ;           |
    RTS                         ;$0199DB    |

BreakThrowBlock:                ;-----------| Subroutine to shatter a throwblock.
    STZ.w $14C8,X               ;$0199DC    | Erase the throwblock.
    LDY.b #$FF                  ;$0199DF    |
CODE_0199E1:                    ;```````````| Subroutine to create shatter particles. Y contains the timer for the particles
    JSR IsSprOffScreen          ;$0199E1    |\ 
    BNE Return019A03            ;$0199E4    ||
    LDA $E4,X                   ;$0199E6    ||
    STA $9A                     ;$0199E8    ||
    LDA.w $14E0,X               ;$0199EA    ||
    STA $9B                     ;$0199ED    ||
    LDA $D8,X                   ;$0199EF    ||
    STA $98                     ;$0199F1    ||
    LDA.w $14D4,X               ;$0199F3    || If the sprite is on-screen, then create the shattered block effect.
    STA $99                     ;$0199F6    ||
    PHB                         ;$0199F8    ||
    LDA.b #$02                  ;$0199F9    ||
    PHA                         ;$0199FB    ||
    PLB                         ;$0199FC    ||
    TYA                         ;$0199FD    ||
    JSL ShatterBlock            ;$0199FE    ||
    PLB                         ;$019A02    |/
Return019A03:                   ;           |
    RTS                         ;$019A03    |



    ; Equivalent routine in bank 2 at $02FFD1.
SetSomeYSpeed:                  ;-----------| Subroutine to set Y speed for a sprite when on the ground.
    LDA.w $1588,X               ;$019A04    |\ 
    BMI CODE_019A10             ;$019A07    ||
    LDA.b #$00                  ;$019A09    || 
    LDY.w $15B8,X               ;$019A0B    || If standing on a slope or Layer 2, give the sprite a Y speed of #$18.
    BEQ CODE_019A12             ;$019A0E    || Else, clear its Y speed.
CODE_019A10:                    ;           ||
    LDA.b #$18                  ;$019A10    ||
CODE_019A12:                    ;           ||
    STA $AA,X                   ;$019A12    |/
    RTS                         ;$019A14    |





    ; Equivalent routine in bank 2 at $02C126.
UpdateDirection:                ;-----------| Subroutine to update a sprite's direction based on its current X speed.
    LDA.b #$00                  ;$019A15    |
    LDY $B6,X                   ;$019A17    |
    BEQ Return019A21            ;$019A19    |
    BPL CODE_019A1E             ;$019A1B    |
    INC A                       ;$019A1D    |
CODE_019A1E:                    ;           |
    STA.w $157C,X               ;$019A1E    |
Return019A21:                   ;           |
    RTS                         ;$019A21    |





ShellAniTiles:                  ;$019A22    | Animation frames for a spinning shell.
    db $06,$07,$08,$07

ShellGfxProp:                   ;$019A26    | YXPPCCCT properties for each frame.
    db $00,$00,$00,$40

CODE_019A2A:                    ;-----------| Subroutine to draw a spinning shell's graphics.
    LDA $C2,X                   ;$019A2A    |
    STA.w $1558,X               ;$019A2C    |
    LDA $14                     ;$019A2F    |\ 
    LSR                         ;$019A31    ||
    LSR                         ;$019A32    ||
    AND.b #$03                  ;$019A33    ||
    TAY                         ;$019A35    ||
    PHY                         ;$019A36    ||
    LDA.w ShellAniTiles,Y       ;$019A37    || Animate the spinning shell.
    JSR CODE_01980F             ;$019A3A    ||
    STZ.w $1558,X               ;$019A3D    ||
    PLY                         ;$019A40    ||
    LDA.w ShellGfxProp,Y        ;$019A41    ||
    LDY.w $15EA,X               ;$019A44    ||
    EOR.w $030B,Y               ;$019A47    ||
    STA.w $030B,Y               ;$019A4A    |/
    RTS                         ;$019A4D    |





SpinJumpSmokeTiles:             ;$019A4E    | Tile numbers for the smoke cloud spawned when a sprite is killed by a spinjump.
    db $64,$62,$60,$62

    ; Misc RAM usage:
    ; $1540 - Lifespan timer for the smoke cloud.
    
HandleSprSpinJump:              ;-----------| Routine to handle a sprite killed by a spinjump (sprite status 4)
    LDA.w $1540,X               ;$019A52    |\ Erase the sprite and return if the cloud's timer runs out.
    BEQ SpinJumpEraseSpr        ;$019A55    |/
    JSR SubSprGfx2Entry1        ;$019A57    | Draw a 16x16 sprite.
    LDY.w $15EA,X               ;$019A5A    |
    LDA.w $1540,X               ;$019A5D    |\ 
    LSR                         ;$019A60    ||
    LSR                         ;$019A61    ||
    LSR                         ;$019A62    ||
    AND.b #$03                  ;$019A63    || Replace the tile number in OAM.
    PHX                         ;$019A65    ||
    TAX                         ;$019A66    ||
    LDA.w SpinJumpSmokeTiles,X  ;$019A67    ||
    PLX                         ;$019A6A    ||
    STA.w $0302,Y               ;$019A6B    |/
    STA.w $0303,Y               ;$019A6E    |\ 
    AND.b #$30                  ;$019A71    || Clear all bits from YXPPCCCT except priority.
    STA.w $0303,Y               ;$019A73    |/  Has a typo: probably supposed to be an "LDA $0303,y" on the first line. Works fine regardless, though.
    RTS                         ;$019A76    |

SpinJumpEraseSpr:               ;```````````| Time to erase a sprite killed from a spinjump.
    JSR OffScrEraseSprite       ;$019A77    |
    RTS                         ;$019A7A    |





    ; Misc RAM usage:
    ; $1558 - Timer for sinking.

HandleSprLava:                  ;-----------| Routine to handle a sprite killed by lava (sprite status 5).
    LDA.w $1558,X               ;$019A7B    |\ If the sprite wasn't set to sink in lava for some reason, just completely erase it.
    BEQ SpinJumpEraseSpr        ;$019A7E    |/
    LDA.b #$04                  ;$019A80    | Sinking Y speed.
    STA $AA,X                   ;$019A82    |
    ASL.w $190F,X               ;$019A84    |\ Ignore walls.
    LSR.w $190F,X               ;$019A87    |/
    LDA $B6,X                   ;$019A8A    |\ 
    BEQ CODE_019A9D             ;$019A8C    || Slow down the sprite horizontally.
    BPL CODE_019A94             ;$019A8E    ||
    INC $B6,X                   ;$019A90    ||
    BRA CODE_019A9D             ;$019A92    || [change to BRA #$02 to fix a bug where sprites will slide through blocks when moving left]
CODE_019A94:                    ;           ||
    DEC $B6,X                   ;$019A94    |/
    JSR IsTouchingObjSide       ;$019A96    |\ 
    BEQ CODE_019A9D             ;$019A99    || Clear X speed if it hits a block (...but only when going right)
    STZ $B6,X                   ;$019A9B    |/
CODE_019A9D:                    ;           |
    LDA.b #$01                  ;$019A9D    |\ Send the sprite behind objects.
    STA.w $1632,X               ;$019A9F    |/
HandleSprKilled:                ;-----------| Routine to kill a sprite and knock it offscreen (sprite statue 2). Also used by the lava routine.
    LDA $9E,X                   ;$019AA2    |\ 
    CMP.b #$86                  ;$019AA4    || If sprite 86 (Wiggler), handle its death routine from within its MAIN code.
    BNE CODE_019AAB             ;$019AA6    ||
    JMP CallSpriteMain          ;$019AA8    |/

CODE_019AAB:
    CMP.b #$1E                  ;$019AAB    |\ 
    BNE CODE_019AB4             ;$019AAD    || If sprite 1E (Lakitu), set the timer for its cloud.
    LDY.b #$FF                  ;$019AAF    ||
    STY.w $18E0                 ;$019AB1    |/
CODE_019AB4:                    ;           |
    CMP.b #$53                  ;$019AB4    |\ 
    BNE CODE_019ABC             ;$019AB6    || If sprite 53 (throwblock), shatter it.
    JSR BreakThrowBlock         ;$019AB8    |/
    RTS                         ;$019ABB    |

CODE_019ABC:
    CMP.b #$4C                  ;$019ABC    |\ 
    BNE CODE_019AC4             ;$019ABE    || If sprite 4C (exploding block), make it explode.
    JSL CODE_02E463             ;$019AC0    |/
CODE_019AC4:                    ;           |
    LDA.w $1656,X               ;$019AC4    |\ 
    AND.b #$80                  ;$019AC7    || Branch if the sprite doesn't disappear in a cloud of smoke.
    BEQ CODE_019AD6             ;$019AC9    |/
CODE_019ACB:                    ;```````````| Subroutine to make a sprite poof. Used by the throwblock, P-switch, Bowser's fire, some sprites in lava, and spinjumped sprites.
    LDA.b #$04                  ;$019ACB    |\ 
    STA.w $14C8,X               ;$019ACD    || Erase the sprite in a cloud of smoke.
    LDA.b #$1F                  ;$019AD0    ||
    STA.w $1540,X               ;$019AD2    |/
    RTS                         ;$019AD5    |

CODE_019AD6:                    ;```````````| Kill the sprite by having it fall offscreen.
    LDA $9D                     ;$019AD6    |\ 
    BNE CODE_019ADD             ;$019AD8    || If sprites aren't locked, update X/Y position, apply gravity, and process interaction with blocks.
    JSR SubUpdateSprPos         ;$019ADA    |/
CODE_019ADD:                    ;           |
    JSR SubOffscreen0Bnk1       ;$019ADD    | Process offscreen from -$40 to +$30.
    JSR HandleSpriteDeath       ;$019AE0    | Draw the sprite's death graphics.
    RTS                         ;$019AE3    |





HandleSprSmushed:               ;-----------| Routine to handle "smushing" a sprite (sprite status 3).
    LDA $9D                     ;$019AE4    |\ If sprites are frozen, just draw graphics.
    BNE CODE_019AFE             ;$019AE6    |/
    LDA.w $1540,X               ;$019AE8    |\ 
    BNE ShowSmushedGfx          ;$019AEB    || Erase the sprite once the stun timer runs out.
    STZ.w $14C8,X               ;$019AED    |/
    RTS                         ;$019AF0    |

ShowSmushedGfx:
    JSR SubUpdateSprPos         ;$019AF1    | Update X/Y position, apply gravity, and process interaction with blocks.
    JSR IsOnGround              ;$019AF4    |\ 
    BEQ CODE_019AFE             ;$019AF7    || If on the ground, set a Y speed and clear its X speed.
    JSR SetSomeYSpeed           ;$019AF9    ||
    STZ $B6,X                   ;$019AFC    |/
CODE_019AFE:                    ;           |
    LDA $9E,X                   ;$019AFE    |\ 
    CMP.b #$6F                  ;$019B00    || If not the Dino Torch, branch to display a mirrored 8x8.
    BNE CODE_019B10             ;$019B02    |/
    JSR SubSprGfx2Entry1        ;$019B04    | Create a 16x16 sprite.
    LDY.w $15EA,X               ;$019B07    |
    LDA.b #$AC                  ;$019B0A    | Tile number to use for the squished Dino Torch.
    STA.w $0302,Y               ;$019B0C    |
    RTS                         ;$019B0F    |

CODE_019B10:
    JMP SmushedGfxRt            ;$019B10    |





HandleSpriteDeath:              ;-----------| Subroutine to handle sprite death graphics (HandleSprKilled and HandleSprLava)
    LDA.w $167A,X               ;$019B13    |\ 
    AND.b #$01                  ;$019B16    || If the regular kill routine is interrupted by the Tweaker bytes, return to sprite main.
    BEQ CODE_019B1D             ;$019B18    ||
    JMP CallSpriteMain          ;$019B1A    |/

CODE_019B1D:
    STZ.w $1602,X               ;$019B1D    | Set to the sprite's default animation frame.
    LDA.w $190F,X               ;$019B20    |\ 
    AND.b #$20                  ;$019B23    || Branch if the sprite's death frame is 16x16 (not 32x16).
    BEQ CODE_019B64             ;$019B25    |/
    LDA.w $1662,X               ;$019B27    |\ 
    AND.b #$40                  ;$019B2A    || Branch if the sprite uses a shell as the death frame.
    BNE CODE_019B5F             ;$019B2C    |/
    LDA $9E,X                   ;$019B2E    |\ 
    CMP.b #$1E                  ;$019B30    ||
    BEQ CODE_019B3D             ;$019B32    ||
    CMP.b #$4B                  ;$019B34    || If sprite 4B (pipe Lakitu), send it behind scenery as it dies.
    BNE CODE_019B44             ;$019B36    ||  Additionally, use animation frame 1 for both it and sprite 1E (Lakitu).
    LDA.b #$01                  ;$019B38    ||
    STA.w $1632,X               ;$019B3A    ||
CODE_019B3D:                    ;           ||
    LDA.b #$01                  ;$019B3D    || For all other sprites, just make its graphics face left.
    STA.w $1602,X               ;$019B3F    ||
    BRA CODE_019B4C             ;$019B42    ||
CODE_019B44:                    ;           ||
    LDA.w $15F6,X               ;$019B44    ||
    ORA.b #$80                  ;$019B47    ||
    STA.w $15F6,X               ;$019B49    |/
CODE_019B4C:                    ;           |
    LDA $64                     ;$019B4C    |\ 
    PHA                         ;$019B4E    ||
    LDY.w $1632,X               ;$019B4F    ||
    BEQ CODE_019B56             ;$019B52    ||
    LDA.b #$10                  ;$019B54    || Draw a 32x16 sprite, behind objects if applicable.
CODE_019B56:                    ;           ||
    STA $64                     ;$019B56    ||
    JSR SubSprGfx1              ;$019B58    ||
    PLA                         ;$019B5B    ||
    STA $64                     ;$019B5C    |/
    RTS                         ;$019B5E    |


CODE_019B5F:                    ;```````````| Sprite uses shell as a death frame.
    LDA.b #$06                  ;$019B5F    |\ Set animation frame for the shell.
    STA.w $1602,X               ;$019B61    |/
CODE_019B64:                    ;```````````| Sprite uses a 16x16 death frame.
    LDA.b #$00                  ;$019B64    |\ 
    CPY.b #$1C                  ;$019B66    ||
    BEQ CODE_019B6C             ;$019B68    || If the sprite's index to $1938 is #$1C, flip X?
    LDA.b #$80                  ;$019B6A    ||
CODE_019B6C:                    ;           ||
    STA $00                     ;$019B6C    |/
    LDA $64                     ;$019B6E    |\ 
    PHA                         ;$019B70    ||
    LDY.w $1632,X               ;$019B71    ||
    BEQ CODE_019B78             ;$019B74    ||
    LDA.b #$10                  ;$019B76    ||
CODE_019B78:                    ;           || Draw a 16x16 sprite. Send behind objects if applicable.
    STA $64                     ;$019B78    ||
    LDA $00                     ;$019B7A    ||
    JSR SubSprGfx2Entry0        ;$019B7C    ||
    PLA                         ;$019B7F    ||
    STA $64                     ;$019B80    |/
    RTS                         ;$019B82    |



SprTilemap:                     ;$019B83    | Various tilemaps for sprites. Indexed by the value from $019C7F + $1602 (*2 if 16x32, *4 if 4 8x8s).
    db $82,$A0,$82,$A2,$84,$A4              ; 00 - Koopa (2-byte)
    db $8C,$8A,$8E                          ;   03 - Shell (1-byte, but indexed from above set)
    db $C8,$CA,$CA,$CE,$CC,$86,$4E          ; 09 - Shell-less Koopa (fourth byte unused)
    db $E0,$E2,$E2,$CE,$E4,$E0,$E0          ; 10 - Shell-less blue Koopa (fourth byte unused)
    db $A3,$A3,$B3,$B3,$E9,$E8,$F9,$F8      ; 17 - Para-goomba
    db $E8,$E9,$F8,$F9,$E2,$E6
    db $AA,$A8,$A8,$AA                      ; 25 - Goomba
    db $A2,$A2,$B2,$B2,$C3,$C2,$D3,$D2      ; 29 - Para-bomb
    db $C2,$C3,$D2,$D3,$E2,$E6
    db $CA,$CC,$CA                          ; 37 - Bob-omb
    db $AC,$CE,$AE,$CE,$83,$83,$C4,$C4      ; 3A - Classic / Jumping Piranha Plant
    db $83,$83,$C5,$C5
    db $8A                                  ; 46 - Football
    db $A6,$A4,$A6,$A8                      ; 47 - Bullet Bill
    db $80,$82,$80                          ; 4B - Spiny
    db $84,$84,$84,$84,$94,$94,$94,$94      ; 4E - Spiny egg (4-byte)
    db $A0,$B0,$A0,$D0                      ; 56 - [Unused] (Display Level Message 1)
    db $82,$80,$82                          ; 5A - Buzzy Beetle
    db $00,$00,$00                          ; 5D - [Unused]
    db $86,$84,$88                          ; 60 - Buzzy Beetle shell
    db $EC,$8C,$A8,$AA,$8E,$AC              ; 63 - Spike Top
    db $AE,$8E                              ; 69 - Hopping Flame
    db $EC,$EE,$CE,$EE,$A8,$EE              ; 6B - Lakitu
    db $40,$40                              ; 71 - Moving Ledge Hole?
    db $A0,$C0,$A0,$C0,$A4,$C4,$A4,$C4      ; 73 - Magikoopa
    db $A0,$C0,$A0,$C0
    db $40                                  ; 7F - Throwblock / exploding turnblock
    db $07,$27,$4C,$29,$4E,$2B,$82,$A0      ; 80 - Climbing Koopa
    db $84,$A4
    db $67,$69,$88,$CE                      ; 8A - Fish
    db $8E,$AE                              ; 8E - [Unused] (Thwomp)
    db $A2,$A2,$B2,$B2                      ; 90 - Thwimp (4-byte)
    db $00,$40,$44,$42,$2C,$42              ; 94 - Yoshi Egg
    db $28,$28,$28,$28,$4C,$4C,$4C,$4C      ; 9A - Springboard (4-byte)
    db $83,$83,$6F,$6F
    db $AC,$BC,$AC,$A6                      ; A6 - Dry Bones (follow)
    db $8C,$AA,$86,$84                      ; AA - Bony Beetle
    db $DC,$EC,$DE,$EE                      ; AE - Dry Bones (ledge)
    db $06,$06,$16,$16,$07,$07,$17,$17      ; B2 - Podoboo (4-byte)
    db $16,$16,$06,$06,$17,$17,$07,$07
    db $84,$86                              ; C2 - [Unused] (Boss fireball)
    db $00,$00,$00,$0E,$2A,$24,$02,$06      ; C4 - Yoshi
    db $0A,$20,$22,$28,$26,$2E,$40,$42
    db $0C
    db $04,$2B                              ; D5 - [Unused]
    db $6A,$ED                              ; D7 - Eerie
    db $88,$8C,$A8,$8E,$AA,$AE,$8C,$88,$A8  ; D9 - Boo
    db $AE,$AC,$8C,$8E                      ; E2 - Rip Van Fish
    db $CE,$EE                              ; E6 - Vertical Dolphin
    db $C4,$C6                              ; E8 - Diggin' Chuck's Rock
    db $82,$84,$86                          ; EA - Monty Mole
    db $8C                                  ; ED - Goal Sphere, Ledge-dwelling Monty Mole's dirt
    db $CE,$CE,$88,$89,$CE,$CE,$89,$88      ; EE - Ground-dwelling Monty Mole's dirt (4-byte)
    db $F3,$CE,$F3,$CE                      ; F6 - Sumo Bros. Lightning
    db $A7,$A9                              ; FA - Ninji

SprTilemapOffset:               ;$019C7F    | Table of indices to the above table, indexed by sprite ID.
    db $09,$09,$10,$09,$00,$00,$00,$00      ; 00-07
    db $00,$00,$00,$00,$00,$37,$00,$25      ; 08-0F
    db $25,$5A,$00,$4B,$4E,$8A,$8A,$8A      ; 10-17
    db $8A,$56,$3A,$46,$47,$69,$6B,$73      ; 18-1F
    db $00,$00,$80,$80,$80,$80,$8E,$90      ; 20-27
    db $00,$00,$3A,$F6,$94,$95,$63,$9A      ; 28-2F
    db $A6,$AA,$AE,$B2,$C2,$C4,$D5,$D9      ; 30-37
    db $D7,$D7,$E6,$E6,$E6,$E2,$99,$17      ; 38-3F
    db $29,$E6,$E6,$E6,$00,$E8,$00,$8A      ; 40-47
    db $E8,$00,$ED,$EA,$7F,$EA,$EA,$3A      ; 48-4F
    db $3A,$FA,$71,$7F                      ; 50-53

GeneralSprDispX:                ;$019CD3    | X displacements for each 8x8 in the first shared GFX routine.
    db $00,$08,$00,$08

GeneralSprDispY:                ;$019CD7    | Y displacements for each 8x8 in the first shared GFX routine.
    db $00,$00,$08,$08

GeneralSprGfxProp:              ;$019CDA    | YXPPCCCT bytes for tiles in the first shared GFX routine (four 8x8s). p = normal orientation, q/b/d = flipped X/Y/XY.
    db $00,$00,$00,$00          ; 00 - pp   |      pq   |      qp
    db $00,$40,$00,$40          ;      pp   | 04 - pq   | 05 - qp
    
    db $00,$40,$80,$C0          ; 08 - pq   |      qq
    db $40,$40,$00,$00          ;      bd   | 0C - pp
    
    db $40,$00,$C0,$80          ; 10 - qp   |      qq
    db $40,$40,$40,$40          ;      db   | 14 - qq


    ; Misc RAM input:
    ; $1602 - Animation frame.
    
    ; Scratch RAM setup:
    ; A = Index (divided by 4) to the YXPPCCCT properties table.
    ; Y = Additional Y position offset for the graphics, when using Entry1. (used exclusively for springboards)

    ; Scratch RAM usage and output:
    ; $00 = Tile X offset.
    ; $01 = Tile Y offset.
    ; $02 = Index to the sprite tilemap table.
    ; $03 = General YXPPCCCT for the sprite.
    ; $04 = Used to count the 8x8 tiles. Returns with #$00.
    ; $05 = A; index (divided by 4) to the YXPPCCCT properties table.
    ; $0F = Y; additional Y offset.
    
    ; JSL located at $018042.
SubSprGfx0Entry0:               ;-----------| The first shared GFX routine. This creates 4 8x8 tiles in a 16x16 block.
    LDY.b #$00                  ;$019CF3    |
SubSprGfx0Entry1:               ;           |
    STA $05                     ;$019CF5    |
    STY $0F                     ;$019CF7    |
    JSR GetDrawInfoBnk1         ;$019CF9    |
    LDY $0F                     ;$019CFC    |\ 
    TYA                         ;$019CFE    ||
    CLC                         ;$019CFF    || Add Y position offset to the draw position.
    ADC $01                     ;$019D00    ||
    STA $01                     ;$019D02    |/
    LDY $9E,X                   ;$019D04    |\ 
    LDA.w $1602,X               ;$019D06    ||
    ASL                         ;$019D09    || $02 = Index to the tilemap table for the tile.
    ASL                         ;$019D0A    ||
    ADC.w SprTilemapOffset,Y    ;$019D0B    ||
    STA $02                     ;$019D0E    |/
    LDA.w $15F6,X               ;$019D10    |\ 
    ORA $64                     ;$019D13    || $03 = YXPPCCCT.
    STA $03                     ;$019D15    |/
    LDY.w $15EA,X               ;$019D17    |
    LDA.b #$03                  ;$019D1A    |\ $04 = Counter for the current tile being drawn.
    STA $04                     ;$019D1C    |/
    PHX                         ;$019D1E    |
CODE_019D1F:                    ;           |
    LDX $04                     ;$019D1F    |
    LDA $00                     ;$019D21    |\ 
    CLC                         ;$019D23    || Store X position.
    ADC.w GeneralSprDispX,X     ;$019D24    ||
    STA.w $0300,Y               ;$019D27    |/
    LDA $01                     ;$019D2A    |\ 
    CLC                         ;$019D2C    || Store Y position.
    ADC.w GeneralSprDispY,X     ;$019D2D    ||
    STA.w $0301,Y               ;$019D30    |/
    LDA $02                     ;$019D33    |\ 
    CLC                         ;$019D35    ||
    ADC $04                     ;$019D36    || Store tile number.
    TAX                         ;$019D38    ||
    LDA.w SprTilemap,X          ;$019D39    ||
    STA.w $0302,Y               ;$019D3C    |/
    LDA $05                     ;$019D3F    |\ 
    ASL                         ;$019D41    ||
    ASL                         ;$019D42    ||
    ADC $04                     ;$019D43    || Store YXPPCCCT.
    TAX                         ;$019D45    ||
    LDA.w GeneralSprGfxProp,X   ;$019D46    ||
    ORA $03                     ;$019D49    ||
    STA.w $0303,Y               ;$019D4B    |/
    INY                         ;$019D4E    |\ 
    INY                         ;$019D4F    ||
    INY                         ;$019D50    || Loop for all 4 tiles.
    INY                         ;$019D51    ||
    DEC $04                     ;$019D52    ||
    BPL CODE_019D1F             ;$019D54    |/
    PLX                         ;$019D56    |
    LDA.b #$03                  ;$019D57    |\ 
    LDY.b #$00                  ;$019D59    || Draw 4 8x8 tiles.
    JSR FinishOAMWriteRt        ;$019D5B    |/
    RTS                         ;$019D5E    |




    ; Misc RAM input:
    ; $157C - Horizontal direction the sprite is facing.
    ; $1602 - Animation frame.
    
GenericSprGfxRt1:               ;-----------| The second shared GFX routine. This one creates 2 16x16 tiles in a 16x32 block, with the second one tile below the base position.
    PHB                         ;$019D5F    |
    PHK                         ;$019D60    |
    PLB                         ;$019D61    |
    JSR SubSprGfx1              ;$019D62    |
    PLB                         ;$019D65    |
    RTL                         ;$019D66    |

SubSprGfx1:
    LDA.w $15F6,X               ;$019D67    |\ 
    BPL SubSprGfx1Hlpr0         ;$019D6A    || Branch to appropriate GFX routine, based on whether the sprite is Y flipped.
    JSR SubSprGfx1Hlpr1         ;$019D6C    |/
    RTS                         ;$019D6F    |

SubSprGfx1Hlpr0:                ;```````````| Sprite is not Y flipped.
    JSR GetDrawInfoBnk1         ;$019D70    |
    LDA.w $157C,X               ;$019D73    |\ $02 = X flip.
    STA $02                     ;$019D76    |/
    TYA                         ;$019D78    |
    LDY $9E,X                   ;$019D79    |\ 
    CPY.b #$0F                  ;$019D7B    || Increase OAM index by #$04 for sprites 00-0E (for Parakoopa wings?)
    BCS CODE_019D81             ;$019D7D    ||
    ADC.b #$04                  ;$019D7F    |/
CODE_019D81:                    ;           |
    TAY                         ;$019D81    |
    PHY                         ;$019D82    |
    LDY $9E,X                   ;$019D83    |\ 
    LDA.w $1602,X               ;$019D85    ||
    ASL                         ;$019D88    || Get index to the tilemap table for the tile.
    CLC                         ;$019D89    ||
    ADC.w SprTilemapOffset,Y    ;$019D8A    ||
    TAX                         ;$019D8D    |/
    PLY                         ;$019D8E    |
    LDA.w SprTilemap,X          ;$019D8F    |\ 
    STA.w $0302,Y               ;$019D92    || Store lower tile numbers for the two tiles.
    LDA.w SprTilemap+1,X        ;$019D95    ||
    STA.w $0306,Y               ;$019D98    |/
    LDX.w $15E9                 ;$019D9B    |
    LDA $01                     ;$019D9E    |\ 
    STA.w $0301,Y               ;$019DA0    ||
    CLC                         ;$019DA3    || Store Y positions for the two tiles.
    ADC.b #$10                  ;$019DA4    ||
    STA.w $0305,Y               ;$019DA6    |/
CODE_019DA9:                    ;```````````| Both routines share the below part.
    LDA $00                     ;$019DA9    |\ 
    STA.w $0300,Y               ;$019DAB    || Store X position.
    STA.w $0304,Y               ;$019DAE    |/
    LDA.w $157C,X               ;$019DB1    |\ 
    LSR                         ;$019DB4    ||
    LDA.b #$00                  ;$019DB5    ||
    ORA.w $15F6,X               ;$019DB7    ||
    BCS CODE_019DBE             ;$019DBA    || Store YXPPCCCT.
    ORA.b #$40                  ;$019DBC    ||
CODE_019DBE:                    ;           ||
    ORA $64                     ;$019DBE    ||
    STA.w $0303,Y               ;$019DC0    ||
    STA.w $0307,Y               ;$019DC3    |/
    TYA                         ;$019DC6    |
    LSR                         ;$019DC7    |
    LSR                         ;$019DC8    |
    TAY                         ;$019DC9    |
    LDA.b #$02                  ;$019DCA    |\ 
    ORA.w $15A0,X               ;$019DCC    || Set size as two 16x16s.
    STA.w $0460,Y               ;$019DCF    ||
    STA.w $0461,Y               ;$019DD2    |/
    JSR CODE_01A3DF             ;$019DD5    | Check for individual tiles being offscreen, and hide them if so.
    RTS                         ;$019DD8    |

SubSprGfx1Hlpr1:                ;```````````| Sprite is Y flipped.
    JSR GetDrawInfoBnk1         ;$019DD9    |
    LDA.w $157C,X               ;$019DDC    |\ $02 = X flip.
    STA $02                     ;$019DDF    |/
    TYA                         ;$019DE1    |\ 
    CLC                         ;$019DE2    || Increase OAM index by #$08 for some reason.
    ADC.b #$08                  ;$019DE3    ||
    TAY                         ;$019DE5    |/
    PHY                         ;$019DE6    |
    LDY $9E,X                   ;$019DE7    |\ 
    LDA.w $1602,X               ;$019DE9    ||
    ASL                         ;$019DEC    || Get index to the tilemap table for the tile.
    CLC                         ;$019DED    ||
    ADC.w SprTilemapOffset,Y    ;$019DEE    ||
    TAX                         ;$019DF1    |/
    PLY                         ;$019DF2    |
    LDA.w SprTilemap,X          ;$019DF3    |\ 
    STA.w $0306,Y               ;$019DF6    || Store lower tile numbers for the two tiles.
    LDA.w SprTilemap+1,X        ;$019DF9    ||
    STA.w $0302,Y               ;$019DFC    |/
    LDX.w $15E9                 ;$019DFF    |
    LDA $01                     ;$019E02    |\ 
    STA.w $0301,Y               ;$019E04    ||
    CLC                         ;$019E07    || Store Y positions for the two tiles.
    ADC.b #$10                  ;$019E08    ||
    STA.w $0305,Y               ;$019E0A    |/
    JMP CODE_019DA9             ;$019E0D    | Jump back to finish the routine.





KoopaWingDispXLo:               ;$019E10    | X displacements (lo) for the Parakoopa wings.
    db $FF,$F7,$09,$09                      ; NOTE: This (and all the below tables!) are ALSO used for the flying ? block wings and flying Yoshi wings.

KoopaWingDispXHi:               ;$019E14    | X displacements (hi) for the Parakoopa wings.
    db $FF,$FF,$00,$00

KoopaWingDispY:                 ;$019E18    | Y displacements for the Parakoopa wings.
    db $FC,$F4,$FC,$F4

KoopaWingTiles:                 ;$019E1C    | Tilemap for the Parakoopa wings.
    db $5D,$C6,$5D,$C6

KoopaWingGfxProp:               ;$019E20    | YXPPCCCT for the Parakoopa wings.
    db $46,$46,$06,$06

KoopaWingTileSize:              ;$019E24    | Size of the Parakoopa wings tiles (00 = 8x8, 02 = 16x16).
    db $00,$02,$00,$02

    ; Misc RAM returns:
    ; $00 - Wing low X position within the level
    ; $01 - Wing low Y position
    ; $02 - Animation frame (0 or 1; basically, extend or contract)
    ; $04 - Koopa high X position within the level

KoopaWingGfxRt:                 ;-----------| Subroutine to draw wings for sprites 08-0C.
    LDY.b #$00                  ;$019E28    |
    JSR IsOnGround              ;$019E2A    |
    BNE CODE_019E35             ;$019E2D    |
    LDA.w $1602,X               ;$019E2F    |
    AND.b #$01                  ;$019E32    |
    TAY                         ;$019E34    |
CODE_019E35:                    ;```````````| Generic subroutine to draw wings, ignoring animation frame or ground interaction.
    STY $02                     ;$019E35    |
CODE_019E37:                    ;           |
    LDA.w $186C,X               ;$019E37    |\ Don't draw if vertically offscreen.
    BNE Return019E94            ;$019E3A    |/
    LDA $E4,X                   ;$019E3C    |
    STA $00                     ;$019E3E    |
    LDA.w $14E0,X               ;$019E40    |
    STA $04                     ;$019E43    |
    LDA $D8,X                   ;$019E45    |
    STA $01                     ;$019E47    |
    LDY.w $15EA,X               ;$019E49    |
    PHX                         ;$019E4C    |
    LDA.w $157C,X               ;$019E4D    |
    ASL                         ;$019E50    |
    ADC $02                     ;$019E51    |
    TAX                         ;$019E53    |
    LDA $00                     ;$019E54    |\ 
    CLC                         ;$019E56    ||
    ADC.w KoopaWingDispXLo,X    ;$019E57    ||
    STA $00                     ;$019E5A    ||
    LDA $04                     ;$019E5C    ||
    ADC.w KoopaWingDispXHi,X    ;$019E5E    || Upload the wing's X position.
    PHA                         ;$019E61    ||
    LDA $00                     ;$019E62    ||
    SEC                         ;$019E64    ||
    SBC $1A                     ;$019E65    ||
    STA.w $0300,Y               ;$019E67    |/
    PLA                         ;$019E6A    |\ 
    SBC $1B                     ;$019E6B    || Return if horizontally offscreen.
    BNE CODE_019E93             ;$019E6D    |/
    LDA $01                     ;$019E6F    |\ 
    SEC                         ;$019E71    ||
    SBC $1C                     ;$019E72    || Upload the wing's Y position.
    CLC                         ;$019E74    ||
    ADC.w KoopaWingDispY,X      ;$019E75    ||
    STA.w $0301,Y               ;$019E78    |/
    LDA.w KoopaWingTiles,X      ;$019E7B    |\ Upload the tile. 
    STA.w $0302,Y               ;$019E7E    |/
    LDA $64                     ;$019E81    |\ 
    ORA.w KoopaWingGfxProp,X    ;$019E83    || Upload the YXPPCCCT.
    STA.w $0303,Y               ;$019E86    |/
    TYA                         ;$019E89    |\ 
    LSR                         ;$019E8A    ||
    LSR                         ;$019E8B    || Set the tile size.
    TAY                         ;$019E8C    ||
    LDA.w KoopaWingTileSize,X   ;$019E8D    ||
    STA.w $0460,Y               ;$019E90    |/
CODE_019E93:                    ;           |
    PLX                         ;$019E93    |
Return019E94:                   ;           |
    RTS                         ;$019E94    |



CODE_019E95:                    ;-----------| Subroutine to draw wings for the flying ? blocks, as well as the actual Yoshi wings.
    LDA $D8,X                   ;$019E95    |\ 
    PHA                         ;$019E97    ||
    CLC                         ;$019E98    ||
    ADC.b #$02                  ;$019E99    ||
    STA $D8,X                   ;$019E9B    || Offset the wings vertically from the sprite.
    LDA.w $14D4,X               ;$019E9D    ||
    PHA                         ;$019EA0    ||
    ADC.b #$00                  ;$019EA1    ||
    STA.w $14D4,X               ;$019EA3    |/
    LDA $E4,X                   ;$019EA6    |\ 
    PHA                         ;$019EA8    ||
    SEC                         ;$019EA9    ||
    SBC.b #$02                  ;$019EAA    ||
    STA $E4,X                   ;$019EAC    || Offset the wings horizontally from the sprite.
    LDA.w $14E0,X               ;$019EAE    ||
    PHA                         ;$019EB1    ||
    SBC.b #$00                  ;$019EB2    ||
    STA.w $14E0,X               ;$019EB4    |/
    LDA.w $15EA,X               ;$019EB7    |\ 
    PHA                         ;$019EBA    ||
    CLC                         ;$019EBB    || Increase OAM slot.
    ADC.b #$04                  ;$019EBC    ||
    STA.w $15EA,X               ;$019EBE    |/
    LDA.w $157C,X               ;$019EC1    |\ 
    PHA                         ;$019EC4    ||
    STZ.w $157C,X               ;$019EC5    ||
    LDA.w $1570,X               ;$019EC8    || 
    LSR                         ;$019ECB    || Upload the left wing to OAM.
    LSR                         ;$019ECC    ||
    LSR                         ;$019ECD    ||
    AND.b #$01                  ;$019ECE    ||
    TAY                         ;$019ED0    ||
    JSR CODE_019E35             ;$019ED1    |/
    LDA $E4,X                   ;$019ED4    |\ 
    CLC                         ;$019ED6    ||
    ADC.b #$04                  ;$019ED7    ||
    STA $E4,X                   ;$019ED9    || Offset the right wing.
    LDA.w $14E0,X               ;$019EDB    ||
    ADC.b #$00                  ;$019EDE    ||
    STA.w $14E0,X               ;$019EE0    |/
    LDA.w $15EA,X               ;$019EE3    |\ 
    CLC                         ;$019EE6    || Increase OAM slot.
    ADC.b #$04                  ;$019EE7    ||
    STA.w $15EA,X               ;$019EE9    |/
    INC.w $157C,X               ;$019EEC    |\ Upload the right wing to OAM.
    JSR CODE_019E37             ;$019EEF    |/
    PLA                         ;$019EF2    |\ 
    STA.w $157C,X               ;$019EF3    ||
    PLA                         ;$019EF6    ||
    STA.w $15EA,X               ;$019EF7    ||
    PLA                         ;$019EFA    ||
    STA.w $14E0,X               ;$019EFB    || Restore the sprite position, direction, and OAM slot.
    PLA                         ;$019EFE    ||
    STA $E4,X                   ;$019EFF    ||
    PLA                         ;$019F01    ||
    STA.w $14D4,X               ;$019F02    ||
    PLA                         ;$019F05    ||
    STA $D8,X                   ;$019F06    |/
    RTS                         ;$019F08    |





SubSprGfx2Entry0:               ;-----------| Alternate entry to the third shared GFX routine which allows for adding to the YXPPCCCT byte.
    STA $04                     ;$019F09    |
    BRA CODE_019F0F             ;$019F0B    |

    ; Misc RAM input:
    ; $157C - Horizontal direction the sprite is facing.
    ; $1602 - Animation frame.
    
    ; JSL located at $0190B2
SubSprGfx2Entry1:               ;-----------| The third shared GFX routine. This one creates a single 16x16 tile.
    STZ $04                     ;$019F0D    |
CODE_019F0F:                    ;           |
    JSR GetDrawInfoBnk1         ;$019F0F    |
    LDA.w $157C,X               ;$019F12    |
    STA $02                     ;$019F15    |
    LDY $9E,X                   ;$019F17    |\ 
    LDA.w $1602,X               ;$019F19    ||
    CLC                         ;$019F1C    ||
    ADC.w SprTilemapOffset,Y    ;$019F1D    || Set tile number.
    LDY.w $15EA,X               ;$019F20    ||
    TAX                         ;$019F23    ||
    LDA.w SprTilemap,X          ;$019F24    ||
    STA.w $0302,Y               ;$019F27    |/
    LDX.w $15E9                 ;$019F2A    |
    LDA $00                     ;$019F2D    |\ 
    STA.w $0300,Y               ;$019F2F    || Set X/Y offsets.
    LDA $01                     ;$019F32    ||
    STA.w $0301,Y               ;$019F34    |/
    LDA.w $157C,X               ;$019F37    |\ 
    LSR                         ;$019F3A    ||
    LDA.b #$00                  ;$019F3B    ||
    ORA.w $15F6,X               ;$019F3D    ||
    BCS CODE_019F44             ;$019F40    || Set YXPPCCCT.
    EOR.b #$40                  ;$019F42    ||  Flip X if the sprite is facing left.
CODE_019F44:                    ;           ||
    ORA $04                     ;$019F44    ||
    ORA $64                     ;$019F46    ||
    STA.w $0303,Y               ;$019F48    |/
    TYA                         ;$019F4B    |
    LSR                         ;$019F4C    |
    LSR                         ;$019F4D    |
    TAY                         ;$019F4E    |
    LDA.b #$02                  ;$019F4F    |\ 
    ORA.w $15A0,X               ;$019F51    || Draw a 16x16.
    STA.w $0460,Y               ;$019F54    ||
    JSR CODE_01A3DF             ;$019F57    |/
    RTS                         ;$019F5A    |





DATA_019F5B:                    ;$019F5B    | X low position offsets for sprites from Mario when carrying them.
    db $0B,$F5,$04,$FC,$04,$00              ; Right, left, turning (< 1), turning (< 2, > 1), turning (> 2), centered.

DATA_019F61:                    ;$019F61    | X high position offsets for sprites from Mario when carrying them.
    db $00,$FF,$00,$FF,$00,$00

DATA_019F67:                    ;$019F67    | X low byte offsets from Mario to drop sprites at.
    db $F3,$0D
DATA_019F69:                    ;$019F69    | X high byte offsets from Mario to drop sprites at.
    db $FF,$00

KickSpeedX:                     ;$019F6B    | Base X speeds for carryable sprites when kicked/thrown.
    db $D2,$2E,$CC,$34                      ; Third and fourth bytes are when spit out by Yoshi.

Unused019F6F:
    db $00,$10

HandleSprCarried:               ;-----------| Routine to handle carried sprites (sprite status B).
    JSR CODE_019F9B             ;$019F71    | Run specific sprite routines.
    LDA.w $13DD                 ;$019F74    |\ 
    BNE CODE_019F83             ;$019F77    ||
    LDA.w $1419                 ;$019F79    ||
    BNE CODE_019F83             ;$019F7C    || If turning while sliding, going down a pipe, or otherwise facing the screen,
    LDA.w $1499                 ;$019F7E    ||  center the item on Mario, and change OAM index to #00.
    BEQ CODE_019F86             ;$019F81    ||  (to make it go in front of Mario).
CODE_019F83:                    ;           ||
    STZ.w $15EA,X               ;$019F83    |/
CODE_019F86:                    ;           |
    LDA $64                     ;$019F86    |\ 
    PHA                         ;$019F88    ||
    LDA.w $1419                 ;$019F89    || If going down a pipe, send behind objects.
    BEQ CODE_019F92             ;$019F8C    ||
    LDA.b #$10                  ;$019F8E    ||
    STA $64                     ;$019F90    |/
CODE_019F92:                    ;           |
    JSR CODE_01A187             ;$019F92    | Draw graphics and handle basic routines.
    PLA                         ;$019F95    |
    STA $64                     ;$019F96    |
    RTS                         ;$019F98    |



DATA_019F99:                    ;$019F99    | Base X speeds for carryable sprites when dropped.
    db $FC,$04

CODE_019F9B:                    ;```````````| Running carryable-sprite-specific routines; first up is P-balloon.
    LDA $9E,X                   ;$019F9B    |\ 
    CMP.b #$7D                  ;$019F9D    || Branch if not the P-balloon.
    BNE CODE_019FE0             ;$019F9F    |/
    LDA $13                     ;$019FA1    |
    AND.b #$03                  ;$019FA3    | How quickly the P-balloon timer decrements.
    BNE CODE_019FBE             ;$019FA5    |
    DEC.w $1891                 ;$019FA7    |\ Decrement the timer, and end the balloon if it passes 0.
    BEQ CODE_019FC4             ;$019FAA    |/
    LDA.w $1891                 ;$019FAC    |
    CMP.b #$30                  ;$019FAF    | At what time the deflating animation for the P-balloon starts.
    BCS CODE_019FBE             ;$019FB1    |
    LDY.b #$01                  ;$019FB3    |\ 
    AND.b #$04                  ;$019FB5    ||
    BEQ CODE_019FBB             ;$019FB7    || Handle the deflating animation.
    LDY.b #$09                  ;$019FB9    ||
CODE_019FBB:                    ;           ||
    STY.w $13F3                 ;$019FBB    |/
CODE_019FBE:                    ;           |
    LDA $71                     ;$019FBE    |\ 
    CMP.b #$01                  ;$019FC0    || End the balloon if Mario takes damage.
    BCC CODE_019FCA             ;$019FC2    |/
CODE_019FC4:                    ;           |
    STZ.w $13F3                 ;$019FC4    |
    JMP OffScrEraseSprite       ;$019FC7    |

CODE_019FCA:                    ;```````````| Balloon Mario routine.
    PHB                         ;$019FCA    |
    LDA.b #$02                  ;$019FCB    |
    PHA                         ;$019FCD    |
    PLB                         ;$019FCE    |
    JSL CODE_02D214             ;$019FCF    | Handle control and speeds.
    PLB                         ;$019FD3    |
    JSR CODE_01A0B1             ;$019FD4    | Handle position in relation to Mario.
    LDY.w $15EA,X               ;$019FD7    |
    LDA.b #$F0                  ;$019FDA    |\ Stick the balloon's graphics offscreen (they still get drawn for some reason). 
    STA.w $0301,Y               ;$019FDC    |/
    RTS                         ;$019FDF    |



CODE_019FE0:                    ;```````````| Carrying sprite other than P-balloon (i.e. actually carrying something).
    JSR CODE_019140             ;$019FE0    | Handle interaction with blocks.
    LDA $71                     ;$019FE3    |\ 
    CMP.b #$01                  ;$019FE5    ||
    BCC CODE_019FF4             ;$019FE7    ||
    LDA.w $1419                 ;$019FE9    || If Mario let go of it (not thrown), return to stationary status.
    BNE CODE_019FF4             ;$019FEC    ||
    LDA.b #$09                  ;$019FEE    ||
    STA.w $14C8,X               ;$019FF0    ||
    RTS                         ;$019FF3    |/

CODE_019FF4:
    LDA.w $14C8,X               ;$019FF4    |\ 
    CMP.b #$08                  ;$019FF7    || If the sprite returned to normal status (e.g. Goombas un-stunning), return.
    BEQ Return01A014            ;$019FF9    |/
    LDA $9D                     ;$019FFB    |\ 
    BEQ CODE_01A002             ;$019FFD    || If the game is frozen, just handle offset from Mario.
    JMP CODE_01A0B1             ;$019FFF    |/

CODE_01A002:
    JSR CODE_019624             ;$01A002    | Handle stun timer routines.
    JSR SubSprSprInteract       ;$01A005    | Handle interaction with other sprites.
    LDA.w $1419                 ;$01A008    |\ 
    BNE CODE_01A011             ;$01A00B    ||
    BIT $15                     ;$01A00D    || If X/Y are held or Mario is going down a pipe, offset the sprite from his position.
    BVC CODE_01A015             ;$01A00F    ||  Else, branch to let go of the sprite.
CODE_01A011:                    ;           ||
    JSR CODE_01A0B1             ;$01A011    |/
Return01A014:                   ;           |
    RTS                         ;$01A014    |



CODE_01A015:                    ;```````````| Subroutine to handle letting go of a sprite.
    STZ.w $1626,X               ;$01A015    |
    LDY.b #$00                  ;$01A018    |\\ Base Y speed to give sprites when kicking them.
    LDA $9E,X                   ;$01A01A    ||
    CMP.b #$0F                  ;$01A01C    ||
    BNE CODE_01A026             ;$01A01E    || Reset the sprite's Y speed.
    LDA $72                     ;$01A020    ||  If kicking a Goomba on the ground, punt it slightly into the air.
    BNE CODE_01A026             ;$01A022    ||
    LDY.b #$EC                  ;$01A024    ||| Base Y speed give Goombas when kicking them on the ground.
CODE_01A026:                    ;           ||
    STY $AA,X                   ;$01A026    |/
    LDA.b #$09                  ;$01A028    |\ Return to carryable status. 
    STA.w $14C8,X               ;$01A02A    |/
    LDA $15                     ;$01A02D    |\ 
    AND.b #$08                  ;$01A02F    || Branch if holding up.
    BNE CODE_01A068             ;$01A031    |/
    LDA $9E,X                   ;$01A033    |\ 
    CMP.b #$15                  ;$01A035    ||
    BCS CODE_01A041             ;$01A037    ||
    LDA $15                     ;$01A039    ||
    AND.b #$04                  ;$01A03B    || If not a Goomba or shell, don't kick by default.
    BEQ CODE_01A079             ;$01A03D    || If holding down, never kick.
    BRA CODE_01A047             ;$01A03F    || If holding left/right and not down, always kick.
CODE_01A041:                    ;           ||
    LDA $15                     ;$01A041    ||
    AND.b #$03                  ;$01A043    ||
    BNE CODE_01A079             ;$01A045    |/


CODE_01A047:                    ;```````````| Gently dropping a sprite (holding down, or release a non-shell/goomba sprite).
    LDY $76                     ;$01A047    |\ 
    LDA $D1                     ;$01A049    ||
    CLC                         ;$01A04B    ||
    ADC.w DATA_019F67,Y         ;$01A04C    || Fix offset from Mario (in case of turning).
    STA $E4,X                   ;$01A04F    ||
    LDA $D2                     ;$01A051    ||
    ADC.w DATA_019F69,Y         ;$01A053    ||
    STA.w $14E0,X               ;$01A056    |/
    JSR SubHorzPosBnk1          ;$01A059    |\ 
    LDA.w DATA_019F99,Y         ;$01A05C    ||
    CLC                         ;$01A05F    || Set X speed.
    ADC $7B                     ;$01A060    ||
    STA $B6,X                   ;$01A062    |/
    STZ $AA,X                   ;$01A064    |
    BRA CODE_01A0A6             ;$01A066    |


CODE_01A068:                    ;```````````| Kicking a sprite upwards (holding up).
    JSL DispContactSpr          ;$01A068    |
    LDA.b #$90                  ;$01A06C    |\\ Y speed to give sprites kicked upwards.
    STA $AA,X                   ;$01A06E    |/
    LDA $7B                     ;$01A070    |\ 
    STA $B6,X                   ;$01A072    || Give the sprite half Mario's speed.
    ASL                         ;$01A074    ||
    ROR $B6,X                   ;$01A075    |/
    BRA CODE_01A0A6             ;$01A077    |


CODE_01A079:                    ;```````````| Kicking a sprite sideways (holding left/right, or releasing a shell/Goomba).
    JSL DispContactSpr          ;$01A079    |
    LDA.w $1540,X               ;$01A07D    |
    STA $C2,X                   ;$01A080    |
    LDA.b #$0A                  ;$01A082    |\ Set thrown status. 
    STA.w $14C8,X               ;$01A084    |/
    LDY $76                     ;$01A087    |\ 
    LDA.w $187A                 ;$01A089    ||
    BEQ CODE_01A090             ;$01A08C    ||
    INY                         ;$01A08E    ||
    INY                         ;$01A08F    ||
CODE_01A090:                    ;           ||
    LDA.w KickSpeedX,Y          ;$01A090    ||
    STA $B6,X                   ;$01A093    || Set X speed to throw the sprite at; take base speed, and add half Mario's speed if moving in the same direction as him.
    EOR $7B                     ;$01A095    ||  For whatever reason, if Mario is throwing the item while on Yoshi, the base speed will be faster.
    BMI CODE_01A0A6             ;$01A097    ||  (not that you can do that without a glitch...)
    LDA $7B                     ;$01A099    ||
    STA $00                     ;$01A09B    ||
    ASL $00                     ;$01A09D    ||
    ROR                         ;$01A09F    ||
    CLC                         ;$01A0A0    ||
    ADC.w KickSpeedX,Y          ;$01A0A1    ||
    STA $B6,X                   ;$01A0A4    |/
CODE_01A0A6:                    ;           |
    LDA.b #$10                  ;$01A0A6    |\\ Number of frames to disable contact with Mario for when kicking any carryable sprite.
    STA.w $154C,X               ;$01A0A8    |/
    LDA.b #$0C                  ;$01A0AB    |\ Show Mario's kicking pose.
    STA.w $149A                 ;$01A0AD    |/
    RTS                         ;$01A0B0    |



    ; Scratch RAM usage and output:
    ; $00 - Mario X position, low
    ; $01 - Mario X position, high
    ; $02 - Mario Y position, low
    ; $03 - Mario Y position, high

CODE_01A0B1:                    ;-----------| Subroutine to offset a carryable sprite from Mario's position.
    LDY.b #$00                  ;$01A0B1    |\ 
    LDA $76                     ;$01A0B3    || Get 0 = right, 1 = left.
    BNE CODE_01A0B8             ;$01A0B5    ||
    INY                         ;$01A0B7    |/
CODE_01A0B8:                    ;           |
    LDA.w $1499                 ;$01A0B8    |\ 
    BEQ CODE_01A0C4             ;$01A0BB    ||
    INY                         ;$01A0BD    ||
    INY                         ;$01A0BE    || Set Y = 2/3 or 3/4 when turning.
    CMP.b #$05                  ;$01A0BF    ||
    BCC CODE_01A0C4             ;$01A0C1    ||
    INY                         ;$01A0C3    |/
CODE_01A0C4:                    ;           |
    LDA.w $1419                 ;$01A0C4    |\ 
    BEQ CODE_01A0CD             ;$01A0C7    ||
    CMP.b #$02                  ;$01A0C9    ||
    BEQ CODE_01A0D4             ;$01A0CB    ||
CODE_01A0CD:                    ;           || If turning while sliding, going down a vertical pipe, or climbing, set Y = 5.
    LDA.w $13DD                 ;$01A0CD    ||
    ORA $74                     ;$01A0D0    ||
    BEQ CODE_01A0D6             ;$01A0D2    ||
CODE_01A0D4:                    ;           ||
    LDY.b #$05                  ;$01A0D4    |/
CODE_01A0D6:                    ;           |
    PHY                         ;$01A0D6    |
    LDY.b #$00                  ;$01A0D7    |\ 
    LDA.w $1471                 ;$01A0D9    ||
    CMP.b #$03                  ;$01A0DC    ||
    BEQ CODE_01A0E2             ;$01A0DE    ||
    LDY.b #$3D                  ;$01A0E0    ||
CODE_01A0E2:                    ;           ||
    LDA.w $94,Y                 ;$01A0E2    || Decide whether to use Mario's position on the current frame ($D1/$D3), 
    STA $00                     ;$01A0E5    ||  or if on a revolving brown platform, next frame ($94/$97).
    LDA.w $95,Y                 ;$01A0E7    ||
    STA $01                     ;$01A0EA    ||
    LDA.w $96,Y                 ;$01A0EC    ||
    STA $02                     ;$01A0EF    ||
    LDA.w $97,Y                 ;$01A0F1    ||
    STA $03                     ;$01A0F4    |/
    PLY                         ;$01A0F6    |
    LDA $00                     ;$01A0F7    |\ 
    CLC                         ;$01A0F9    ||
    ADC.w DATA_019F5B,Y         ;$01A0FA    ||
    STA $E4,X                   ;$01A0FD    || Offset horizontally from Mario.
    LDA $01                     ;$01A0FF    ||
    ADC.w DATA_019F61,Y         ;$01A101    ||
    STA.w $14E0,X               ;$01A104    |/
    LDA.b #$0D                  ;$01A107    |\\ Y offset when big.
    LDY $73                     ;$01A109    ||
    BNE CODE_01A111             ;$01A10B    ||
    LDY $19                     ;$01A10D    || Offset vertically from Mario.
    BNE CODE_01A113             ;$01A10F    ||
CODE_01A111:                    ;           ||
    LDA.b #$0F                  ;$01A111    ||| Y offset when ducking or small.
CODE_01A113:                    ;           ||
    LDY.w $1498                 ;$01A113    ||
    BEQ CODE_01A11A             ;$01A116    ||
    LDA.b #$0F                  ;$01A118    ||| Y offset when picking up an item.
CODE_01A11A:                    ;           ||
    CLC                         ;$01A11A    ||
    ADC $02                     ;$01A11B    ||
    STA $D8,X                   ;$01A11D    ||
    LDA $03                     ;$01A11F    ||
    ADC.b #$00                  ;$01A121    ||
    STA.w $14D4,X               ;$01A123    |/
    LDA.b #$01                  ;$01A126    |\ 
    STA.w $148F                 ;$01A128    || Set the flag for carrying an item.
    STA.w $1470                 ;$01A12B    |/
    RTS                         ;$01A12E    |



StunGoomba:                     ;-----------| Stunned Goomba MAIN
    LDA $14                     ;$01A12F    |\ 
    LSR                         ;$01A131    ||
    LSR                         ;$01A132    ||
    LDY.w $1540,X               ;$01A133    ||
    CPY.b #$30                  ;$01A136    || Animate the Goomba.
    BCC CODE_01A13B             ;$01A138    ||
    LSR                         ;$01A13A    ||
CODE_01A13B:                    ;           ||
    AND.b #$01                  ;$01A13B    ||
    STA.w $1602,X               ;$01A13D    |/
    CPY.b #$08                  ;$01A140    |\ 
    BNE CODE_01A14D             ;$01A142    ||
    JSR IsOnGround              ;$01A144    || Make the Goomba hop upwards when the stun timer gets low enough.
    BEQ CODE_01A14D             ;$01A147    ||
    LDA.b #$D8                  ;$01A149    ||] Y-speed to give the Goomba.
    STA $AA,X                   ;$01A14B    |/
CODE_01A14D:                    ;           |
    LDA.b #$80                  ;$01A14D    |\ Draw an upside-down 16x16 sprite.
    JMP SubSprGfx2Entry0        ;$01A14F    |/



StunMechaKoopa:                 ;-----------| Stunned MechaKoopa GFX subroutine.
    LDA $1A                     ;$01A152    |\ 
    PHA                         ;$01A154    ||
    LDA.w $1540,X               ;$01A155    || 
    CMP.b #$30                  ;$01A158    || Shake the MechaKoopa when the stun timer gets low.
    BCS CODE_01A162             ;$01A15A    ||
    AND.b #$01                  ;$01A15C    ||
    EOR $1A                     ;$01A15E    ||
    STA $1A                     ;$01A160    |/
CODE_01A162:                    ;           |
    JSL CODE_03B307             ;$01A162    | Draw the MechaKoopa.
    PLA                         ;$01A166    |
    STA $1A                     ;$01A167    |
CODE_01A169:                    ;```````````| Turn a sprite away from Mario when carried. Used by MechaKoopas, keys, and Baby Yoshi.
    LDA.w $14C8,X               ;$01A169    |\ 
    CMP.b #$0B                  ;$01A16C    ||
    BNE Return01A177            ;$01A16E    || Turn the sprite away from Mario if carried.
    LDA $76                     ;$01A170    ||
    EOR.b #$01                  ;$01A172    ||
    STA.w $157C,X               ;$01A174    |/
Return01A177:                   ;           |
    RTS                         ;$01A177    |



StunFish:                       ;-----------| Stunned fish GFX subroutine (unused?...)
    JSR SetAnimationFrame       ;$01A178    |
    LDA.w $15F6,X               ;$01A17B    |\ 
    ORA.b #$80                  ;$01A17E    || Flip it upside down.
    STA.w $15F6,X               ;$01A180    |/
    JSR SubSprGfx2Entry1        ;$01A183    | Draw a 16x16 sprite.
    RTS                         ;$01A186    |



CODE_01A187:                    ;-----------| Routine to handle graphics for stunned sprites, as well as basic routines for some sprites.
    LDA.w $167A,X               ;$01A187    |\ 
    AND.b #$08                  ;$01A18A    || Branch if set to turn into a shell when stunned. Useless since it branches to this anyway.
    BEQ CODE_01A1D0             ;$01A18C    |/
    LDA $9E,X                   ;$01A18E    |\ 
    CMP.b #$A2                  ;$01A190    ||
    BEQ StunMechaKoopa          ;$01A192    ||
    CMP.b #$15                  ;$01A194    ||
    BEQ StunFish                ;$01A196    ||
    CMP.b #$16                  ;$01A198    ||
    BEQ StunFish                ;$01A19A    ||
    CMP.b #$0F                  ;$01A19C    ||
    BEQ StunGoomba              ;$01A19E    ||
    CMP.b #$53                  ;$01A1A0    ||
    BEQ StunThrowBlock          ;$01A1A2    ||
    CMP.b #$2C                  ;$01A1A4    ||
    BEQ StunYoshiEgg            ;$01A1A6    || Branch to the corresponding routines for stunned sprites.
    CMP.b #$80                  ;$01A1A8    ||
    BEQ StunKey                 ;$01A1AA    ||
    CMP.b #$7D                  ;$01A1AC    ||\ Don't do anything with the balloon.
    BEQ Return01A1D3            ;$01A1AE    ||/
    CMP.b #$3E                  ;$01A1B0    ||
    BEQ StunPow                 ;$01A1B2    ||
    CMP.b #$2F                  ;$01A1B4    ||
    BEQ StunSpringBoard         ;$01A1B6    ||
    CMP.b #$0D                  ;$01A1B8    ||
    BEQ StunBomb                ;$01A1BA    ||
    CMP.b #$2D                  ;$01A1BC    ||
    BEQ StunBabyYoshi           ;$01A1BE    ||
    CMP.b #$85                  ;$01A1C0    ||
    BNE CODE_01A1D0             ;$01A1C2    |/
    JSR SubSprGfx2Entry1        ;$01A1C4    |\ 
    LDY.w $15EA,X               ;$01A1C7    || Unused routine for sprite 85. May have originally been a Dry Bones?
    LDA.b #$47                  ;$01A1CA    ||
    STA.w $0302,Y               ;$01A1CC    |/
    RTS                         ;$01A1CF    |



CODE_01A1D0:                    ;-----------| Carryable shell GFX subroutine (redirect)
    JSR CODE_019806             ;$01A1D0    |
Return01A1D3:                   ;           |
    RTS                         ;$01A1D3    |



    ; Throwblock misc RAM:
    ; $C2   - Duplicate of $1540.
    ; $1540 - Timer for how long the throwblock lasts.
    ;          Also used as a timer for its smoke cloud when it times out. Set to #$20 when it poofs.
    ; $154C - Timer for disabling interaction with Mario. Set under a few circumstances:
    ;          Set to #$08 when picked up.
    ;          Set to #$10 when dropping or throwing.
    ; $1558 - Timer for sinking in lava. The throwblock explodes on contact with lava though so this isn't really used.
    ; $157C - Direction the sprite is facing, though it's never modified by the sprite.

StunThrowBlock:                 ;-----------| Throwblock GFX subroutine.
    LDA.w $1540,X               ;$01A1D4    |\ 
    CMP.b #$40                  ;$01A1D7    ||
    BCS CODE_01A1DE             ;$01A1D9    || Slow down the throwblock's flashing colors if the stun timer is nearly out.
    LSR                         ;$01A1DB    ||
    BCS StunYoshiEgg            ;$01A1DC    |/
CODE_01A1DE:                    ;           |
    LDA.w $15F6,X               ;$01A1DE    |\ 
    INC A                       ;$01A1E1    ||
    INC A                       ;$01A1E2    || Cycle through the palettes.
    AND.b #$0F                  ;$01A1E3    ||
    STA.w $15F6,X               ;$01A1E5    |/

StunYoshiEgg:                   ;-----------| Yoshi egg GFX subroutine (+throwblock).
    JSR SubSprGfx2Entry1        ;$01A1E8    | Draw a 16x16 sprite.
    RTS                         ;$01A1EB    |



StunBomb:                       ;-----------| Stunned Bob-omb GFX subroutine.
    JSR SubSprGfx2Entry1        ;$01A1EC    | Draw a 16x16 sprite.
    LDA.b #$CA                  ;$01A1EF    |\\ Tile used for the stunned Bob-omb.
    BRA CODE_01A222             ;$01A1F1    |/



StunKey:                        ;-----------| Key GFX subroutine.
    JSR CODE_01A169             ;$01A1F3    | Face away from Mario when carried.
    JSR SubSprGfx2Entry1        ;$01A1F6    | Draw a 16x16 sprite.
    LDA.b #$EC                  ;$01A1F9    |\\ Tile used for the key.
    BRA CODE_01A222             ;$01A1FB    |/



    ; P-switch misc RAM:
    ; $151C - P-switch type (0 = blue, 1 = silver)
    ; $1540 - Timer for the P-switch's smoke cloud. Set to #$20 when it poofs.
    ; $154C - Timer for disabling interaction with Mario. Set under a few circumstances:
    ;          Set to #$2C when spawned from a block.
    ;          Set to #$08 when picked up.
    ;          Set to #$10 when dropping or throwing.
    ;          Set to #$08 when pressed; will reset to #$08 when it hits zero.
    ; $157C - Always 1. Setting to 0 will make the switch backwards.
    ; $15AC - Set to #$0F when the P-switch is spawned from a block.
    ; $163E - Timer for erasing a pressed P-switch. Set to #$20 when it's pressed.

StunPow:                        ;-----------| Actual P-switch MAIN
    LDY.w $163E,X               ;$01A1FD    |\ Branch if not pressed.
    BEQ CODE_01A218             ;$01A200    |/
    CPY.b #$01                  ;$01A202    |\ Branch if pressed and not disappearing.
    BNE CODE_01A209             ;$01A204    |/
    JMP CODE_019ACB             ;$01A206    | Make it go poof.

CODE_01A209:                    ;```````````| P-switch is pressed.
    JSR SmushedGfxRt            ;$01A209    | Draw a smushed P-switch.
    LDY.w $15EA,X               ;$01A20C    |
    LDA.w $0303,Y               ;$01A20F    |\ 
    AND.b #$FE                  ;$01A212    || Useless. Seems like the P-switch used to use the second GFX page.
    STA.w $0303,Y               ;$01A214    |/
    RTS                         ;$01A217    |

CODE_01A218:                    ;```````````| P-switch is not pressed.
    LDA.b #$01                  ;$01A218    |\ Face left, always.
    STA.w $157C,X               ;$01A21A    |/
    JSR SubSprGfx2Entry1        ;$01A21D    | Draw a 16x16 sprite.
    LDA.b #$42                  ;$01A220    |\\ Tile to use for the P-switch.
CODE_01A222:                    ;           ||
    LDY.w $15EA,X               ;$01A222    ||
    STA.w $0302,Y               ;$01A225    |/
    RTS                         ;$01A228    |



StunSpringBoard:                ;-----------| Stunned springboard GFX subroutine (used on the first frame Mario kicks it).
    JMP CODE_01E6F0             ;$01A229    | Draw graphics.



    ; Baby Yoshi misc RAM:
    ; $154C - Timer for disabling interaction with Mario. Set under a few circumstances:
    ;          Set to #$08 when picked up.
    ;          Set to #$10 when dropping, throwing, or kicking.
    ; $1570 - Counter for how many sprites the baby Yoshi has eaten.
    ; $157C - Direction the sprite is facing. 00 = right, 01 = left
    ; $1594 - Affects the value of the 1up spawned from hitting a goal tape; 0 = 1up, 1 = 2up, 2 = 3up (3+ = glitched).
    ;          Not normally possible to set, however, so essentially unused.
    ; $1602 - Animation frame to use.
    ;          0 = normal, 1 = eating, 2 = swallowing, 3 = gulping/idle
    ; $160E - Sprite slot that the baby Yoshi is eating. Set to FF when null.
    ; $163E - Timer for baby Yoshi eating something. Set to #$38 when starting.
    
    
StunBabyYoshi:                  ;-----------| Baby Yoshi MAIN
    LDA $9D                     ;$01A22C    |\ If sprites are frozen, just draw graphics.
    BNE CODE_01A27B             ;$01A22E    |/
    LDA $E4,X                   ;$01A230    |\ 
    CLC                         ;$01A232    ||
    ADC.b #$08                  ;$01A233    ||
    STA $00                     ;$01A235    ||
    LDA.w $14E0,X               ;$01A237    ||
    ADC.b #$00                  ;$01A23A    ||
    STA $08                     ;$01A23C    || Get the position of Baby Yoshi's mouth.
    LDA $D8,X                   ;$01A23E    ||
    CLC                         ;$01A240    ||
    ADC.b #$08                  ;$01A241    ||
    STA $01                     ;$01A243    ||
    LDA.w $14D4,X               ;$01A245    ||
    ADC.b #$00                  ;$01A248    ||
    STA $09                     ;$01A24A    |/
    JSL CODE_02B9FA             ;$01A24C    | Process interaction with berries.
    JSL CODE_02EA4E             ;$01A250    | Process interaction with sprites.
    LDA.w $163E,X               ;$01A254    |\ Branch if currently eating something.
    BNE CODE_01A27E             ;$01A257    |/
    DEC A                       ;$01A259    |
    STA.w $160E,X               ;$01A25A    |
    LDA.w $14C8,X               ;$01A25D    |\ 
    CMP.b #$09                  ;$01A260    ||
    BNE CODE_01A26D             ;$01A262    || If the Yoshi is not being carried and is on the ground, make it bounce.
    JSR IsOnGround              ;$01A264    ||
    BEQ CODE_01A26D             ;$01A267    ||
    LDA.b #$F0                  ;$01A269    ||] Speed the Baby Yoshi bounces at.
    STA $AA,X                   ;$01A26B    |/
CODE_01A26D:                    ;           |
    LDY.b #$00                  ;$01A26C    |\ 
    LDA $14                     ;$01A26F    ||
    AND.b #$18                  ;$01A271    ||
    BNE CODE_01A277             ;$01A273    || Handle Baby Yoshi's idle animation.
    LDY.b #$03                  ;$01A275    ||
CODE_01A277:                    ;           ||
    TYA                         ;$01A277    ||
    STA.w $1602,X               ;$01A278    |/
CODE_01A27B:                    ;           |
    JMP CODE_01A34F             ;$01A27B    |


CODE_01A27E:                    ;```````````| Baby Yoshi is in the process of eating something.
    STZ.w $15EA,X               ;$01A27E    | Change OAM index to #$00, to send in front of all other sprites.
    CMP.b #$20                  ;$01A281    |\ Branch if it's time to actually swallow the sprite.
    BEQ CODE_01A288             ;$01A283    |/
    JMP CODE_01A30A             ;$01A285    |


CODE_01A288:                    ;```````````| Subroutine for Baby Yoshi swallowing a sprite.
    LDY.w $160E,X               ;$01A288    |\ 
    LDA.b #$00                  ;$01A28B    || Erase the sprite being eaten.
    STA.w $14C8,Y               ;$01A28D    |/
    LDA.b #$06                  ;$01A290    |\ SFX for baby Yoshi swallowing.
    STA.w $1DF9                 ;$01A292    |/
    LDA.w $160E,Y               ;$01A295    |\ If the sprite has $160E set (i.e. it's a berry, not a mushroom), don't grow instantly.
    BNE CODE_01A2F4             ;$01A298    |/
    LDA.w $009E,Y               ;$01A29A    |\ 
    CMP.b #$81                  ;$01A29D    ||
    BNE CODE_01A2AD             ;$01A29F    ||
    LDA $14                     ;$01A2A1    ||
    LSR                         ;$01A2A3    || If eating sprite 81 (roulette item), get the actual powerup being eaten.
    LSR                         ;$01A2A4    ||  (no real point in this though?)
    LSR                         ;$01A2A5    ||
    LSR                         ;$01A2A6    ||
    AND.b #$03                  ;$01A2A7    ||
    TAY                         ;$01A2A9    ||
    LDA.w ChangingItemSprite,Y  ;$01A2AA    |/
CODE_01A2AD:                    ;           |
    CMP.b #$74                  ;$01A2AD    |\ 
    BCC CODE_01A2F4             ;$01A2AF    || If baby Yoshi eats a powerup, instantly grow. Else, branch.
    CMP.b #$78                  ;$01A2B1    ||
    BCS CODE_01A2F4             ;$01A2B3    |/
CODE_01A2B5:                    ;```````````| Subroutine to grow an adult Yoshi. Used by both baby Yoshi and eggs.
    STZ.w $18AC                 ;$01A2B5    |
    STZ.w $141E                 ;$01A2B8    |
    LDA.b #$35                  ;$01A2BB    |\ 
    STA.w $9E,X                 ;$01A2BD    || Make a grown Yoshi.
    LDA.b #$08                  ;$01A2C0    ||
    STA.w $14C8,X               ;$01A2C2    |/
    LDA.b #$1F                  ;$01A2C5    |\ SFX for Yoshi growing up.
    STA.w $1DFC                 ;$01A2C7    |/
    LDA $D8,X                   ;$01A2CA    |\ 
    SBC.b #$10                  ;$01A2CC    ||
    STA $D8,X                   ;$01A2CE    || Spawn the adult Yoshi a tile higher than the baby Yoshi.
    LDA.w $14D4,X               ;$01A2D0    ||
    SBC.b #$00                  ;$01A2D3    ||
    STA.w $14D4,X               ;$01A2D5    |/
    LDA.w $15F6,X               ;$01A2D8    |
    PHA                         ;$01A2DB    |
    JSL InitSpriteTables        ;$01A2DC    |
    PLA                         ;$01A2E0    |
    AND.b #$FE                  ;$01A2E1    |
    STA.w $15F6,X               ;$01A2E3    |
    LDA.b #$0C                  ;$01A2E6    |
    STA.w $1602,X               ;$01A2E8    |
    DEC.w $160E,X               ;$01A2EB    |
    LDA.b #$40                  ;$01A2EE    |\\ How long Yoshi's growing animation lasts.
    STA.w $18E8                 ;$01A2F0    |/
    RTS                         ;$01A2F3    |

CODE_01A2F4:                    ;```````````| Baby Yoshi ate something other than a powerup.
    INC.w $1570,X               ;$01A2F4    |\ 
    LDA.w $1570,X               ;$01A2F7    ||
    CMP.b #$05                  ;$01A2FA    ||| How many sprites baby Yoshi has to eat to grow. Change with $03C0A2 as well.
    BNE CODE_01A300             ;$01A2FC    |/
    BRA CODE_01A2B5             ;$01A2FE    | Make him grow up.

CODE_01A300:                    ;```````````| Baby Yoshi is not grown up yet.
    JSL CODE_05B34A             ;$01A300    | Give Mario a coin.
    LDA.b #$01                  ;$01A304    | How many points Mario gets when baby Yoshi eats something (200).
    JSL GivePoints              ;$01A306    |
CODE_01A30A:                    ;           |
    LDA.w $163E,X               ;$01A30A    |\ 
    LSR                         ;$01A30D    ||
    LSR                         ;$01A30E    ||
    LSR                         ;$01A30F    || Pick the animation frame to use.
    TAY                         ;$01A310    ||
    LDA.w DATA_01A35A,Y         ;$01A311    ||
    STA.w $1602,X               ;$01A314    |/
    STZ $01                     ;$01A317    |
    LDA.w $163E,X               ;$01A319    |\ 
    CMP.b #$20                  ;$01A31C    || If the sprite Yoshi is eating no longer exists, branch and just draw graphics.
    BCC CODE_01A34F             ;$01A31E    |/
    SBC.b #$10                  ;$01A320    |\ 
    LSR                         ;$01A322    ||
    LSR                         ;$01A323    ||
    LDY.w $157C,X               ;$01A324    ||
    BEQ CODE_01A32E             ;$01A327    ||
    EOR.b #$FF                  ;$01A329    ||
    INC A                       ;$01A32B    ||
    DEC $01                     ;$01A32C    || Drag the sprite horizontally toward the baby Yoshi.
CODE_01A32E:                    ;           ||
    LDY.w $160E,X               ;$01A32E    || 
    CLC                         ;$01A331    ||
    ADC $E4,X                   ;$01A332    ||
    STA.w $00E4,Y               ;$01A334    ||
    LDA.w $14E0,X               ;$01A337    ||
    ADC $01                     ;$01A33A    ||
    STA.w $14E0,Y               ;$01A33C    |/
    LDA $D8,X                   ;$01A33F    |\ 
    SEC                         ;$01A341    ||
    SBC.b #$02                  ;$01A342    ||
    STA.w $00D8,Y               ;$01A344    || Center the sprite vertically at the baby Yoshi's mouth.
    LDA.w $14D4,X               ;$01A347    ||
    SBC.b #$00                  ;$01A34A    ||
    STA.w $14D4,Y               ;$01A34C    |/
CODE_01A34F:                    ;           |
    JSR CODE_01A169             ;$01A34F    | Face away from Mario when carried.
    JSR SubSprGfx2Entry1        ;$01A352    | Draw a 16x16 sprite.
    JSL CODE_02EA25             ;$01A355    | Prepare it for DMA upload.
    RTS                         ;$01A359    |

DATA_01A35A:                    ;$01A35A    | Animation frames for baby Yoshi's eating animation. Indexed by the timer divided by 8.
    db $00,$03,$02,$02,$01,$01,$01





DATA_01A361:                    ;$01A361    | Y position offsets to the bottom of a sprite, for checking if offscreen.
    db $10,$20

DATA_01A363:                    ;$01A363    | Bits to set in $186C, for each tile of a two-tile sprite.
    db $01,$02

    ; Misc RAM returns:
    ; Y   = OAM index (from $0300)  
    ; $00 = Sprite X position relative to the screen border 
    ; $01 = Sprite Y position relative to the screen border
    ; Also sets $15A0, $15C4, and $186C.

GetDrawInfoBnk1:                ;-----------| GetDrawInfo routine. Gets various GFX-related addresses.
    STZ.w $186C,X               ;$01A365    |\ Initialize offscreen flags.
    STZ.w $15A0,X               ;$01A368    |/
    LDA $E4,X                   ;$01A36B    |\ 
    CMP $1A                     ;$01A36D    ||
    LDA.w $14E0,X               ;$01A36F    || Check if offscreen horizontally, and set the flag if so.
    SBC $1B                     ;$01A372    ||
    BEQ CODE_01A379             ;$01A374    ||
    INC.w $15A0,X               ;$01A376    |/
CODE_01A379:                    ;           |
    LDA.w $14E0,X               ;$01A379    |\ 
    XBA                         ;$01A37C    ||
    LDA $E4,X                   ;$01A37D    ||
    REP #$20                    ;$01A37F    ||
    SEC                         ;$01A381    ||
    SBC $1A                     ;$01A382    ||
    CLC                         ;$01A384    || Handle horizontal offscreen flag for 4 tiles offscreen. (-40 to +40)
    ADC.w #$0040                ;$01A385    ||  If so, return the sprite's graphical routine.
    CMP.w #$0180                ;$01A388    ||
    SEP #$20                    ;$01A38B    ||
    ROL                         ;$01A38D    ||
    AND.b #$01                  ;$01A38E    ||
    STA.w $15C4,X               ;$01A390    ||
    BNE CODE_01A3CB             ;$01A393    |/
    LDY.b #$00                  ;$01A395    |\ 
    LDA.w $14C8,X               ;$01A397    ||
    CMP.b #$09                  ;$01A39A    ||
    BEQ CODE_01A3A6             ;$01A39C    ||
    LDA.w $190F,X               ;$01A39E    ||
    AND.b #$20                  ;$01A3A1    ||
    BEQ CODE_01A3A6             ;$01A3A3    ||
    INY                         ;$01A3A5    ||
CODE_01A3A6:                    ;           ||
    LDA $D8,X                   ;$01A3A6    ||
    CLC                         ;$01A3A8    ||
    ADC.w DATA_01A361,Y         ;$01A3A9    || Check if vertically offscreen, and set the flag if so.
    PHP                         ;$01A3AC    ||  If the sprite has a two-tile death frame, $186C's bits will be set for each tile.
    CMP $1C                     ;$01A3AD    ||  Top tile = bit 0
    ROL $00                     ;$01A3AF    ||  Bottom tile = bit 1
    PLP                         ;$01A3B1    ||
    LDA.w $14D4,X               ;$01A3B2    ||
    ADC.b #$00                  ;$01A3B5    ||
    LSR $00                     ;$01A3B7    ||
    SBC $1D                     ;$01A3B9    ||
    BEQ CODE_01A3C6             ;$01A3BB    ||
    LDA.w $186C,X               ;$01A3BD    ||
    ORA.w DATA_01A363,Y         ;$01A3C0    ||
    STA.w $186C,X               ;$01A3C3    ||
CODE_01A3C6:                    ;           ||
    DEY                         ;$01A3C6    ||
    BPL CODE_01A3A6             ;$01A3C7    |/
    BRA CODE_01A3CD             ;$01A3C9    |

CODE_01A3CB:                    ;```````````| Sprite more than 4 tiles offscreen.
    PLA                         ;$01A3CB    |\ Return the sprite's routine (i.e. don't draw).
    PLA                         ;$01A3CC    |/

CODE_01A3CD:                    ;```````````| Return sprite onscreen.
    LDY.w $15EA,X               ;$01A3CD    |\ 
    LDA $E4,X                   ;$01A3D0    ||
    SEC                         ;$01A3D2    ||
    SBC $1A                     ;$01A3D3    ||
    STA $00                     ;$01A3D5    || Return onscreen position in $00 and $01, and OAM index in Y.
    LDA $D8,X                   ;$01A3D7    ||
    SEC                         ;$01A3D9    ||
    SBC $1C                     ;$01A3DA    ||
    STA $01                     ;$01A3DC    |/
    RTS                         ;$01A3DE    |



CODE_01A3DF:                    ;-----------| Check whether tiles being drawn are actually on the screen, and don't draw if not.
    LDA.w $186C,X               ;$01A3DF    |\ Return if on-screen.
    BEQ Return01A40A            ;$01A3E2    |/
    PHX                         ;$01A3E4    |
    LSR                         ;$01A3E5    |\ 
    BCC CODE_01A3F8             ;$01A3E6    ||
    PHA                         ;$01A3E8    ||
    LDA.b #$01                  ;$01A3E9    ||
    STA.w $0460,Y               ;$01A3EB    ||
    TYA                         ;$01A3EE    || Draw bottom tile if on-screen.
    ASL                         ;$01A3EF    ||
    ASL                         ;$01A3F0    ||
    TAX                         ;$01A3F1    ||
    LDA.b #$80                  ;$01A3F2    ||
    STA.w $0300,X               ;$01A3F4    ||
    PLA                         ;$01A3F7    |/
CODE_01A3F8:                    ;           |
    LSR                         ;$01A3F8    |\ 
    BCC CODE_01A409             ;$01A3F9    ||
    LDA.b #$01                  ;$01A3FB    ||
    STA.w $0461,Y               ;$01A3FD    ||
    TYA                         ;$01A400    || Draw top tile if on-screen.
    ASL                         ;$01A401    ||
    ASL                         ;$01A402    ||
    TAX                         ;$01A403    ||
    LDA.b #$80                  ;$01A404    ||
    STA.w $0304,X               ;$01A406    |/
CODE_01A409:                    ;           |
    PLX                         ;$01A409    |
Return01A40A:                   ;           |
    RTS                         ;$01A40A    |





DATA_01A40B:                    ;$01A40B    | How close sprites need to be vertically to interact with each other.
    db $02,$0A                              ; The first is for clipping values 00, 10, 20, or 30. The second is for all others.

    ; Scratch RAM usage:
    ; $00-$03
    
    ; Misc RAM usage:
    ; $157C - Horizontal direction the sprite is facing, for status 8 (0 = right, 1 = left)
    ; $15AC - Timer for turning the sprite around, for status 8.

    ; JSL located at $018032
SubSprSprInteract:              ;-----------| Sprite-sprite interaction routine.
    TXA                         ;$01A40D    |\ 
    BEQ Return01A40A            ;$01A40E    ||
    TAY                         ;$01A410    || Return if in slot 0; sprites only interact with slots below them.
    EOR $13                     ;$01A411    ||  For other slots, alternate processing with sprites each frame.
    LSR                         ;$01A413    ||
    BCC Return01A40A            ;$01A414    |/
    DEX                         ;$01A416    | Check interaction with the slot below.

CODE_01A417:                    ;```````````| Main loop here.
    LDA.w $14C8,X               ;$01A417    |\ 
    CMP.b #$08                  ;$01A41A    || Don't process interaction with dead sprites; loop and move to next slot.
    BCS CODE_01A421             ;$01A41C    ||
    JMP CODE_01A4B0             ;$01A41E    |/

CODE_01A421:                    ;```````````| Checking an alive sprite.
    LDA.w $1686,X               ;$01A421    |\ 
    ORA.w $1686,Y               ;$01A424    ||
    AND.b #$08                  ;$01A427    || Skip to the next slot if:
    ORA.w $1564,X               ;$01A429    ||  - either sprite doesn't interact with other sprites
    ORA.w $1564,Y               ;$01A42C    ||  - either sprite has contact temporarily disabled
    ORA.w $15D0,X               ;$01A42F    ||  - the sprite initiating the interaction is being eaten
    ORA.w $1632,X               ;$01A432    ||  - the sprites are on two different layers (i.e. behind scenery)
    EOR.w $1632,Y               ;$01A435    ||
    BNE CODE_01A4B0             ;$01A438    |/
    STX.w $1695                 ;$01A43A    |
    LDA $E4,X                   ;$01A43D    |\ 
    STA $00                     ;$01A43F    ||
    LDA.w $14E0,X               ;$01A441    ||
    STA $01                     ;$01A444    ||
    LDA.w $00E4,Y               ;$01A446    ||
    STA $02                     ;$01A449    ||
    LDA.w $14E0,Y               ;$01A44B    ||
    STA $03                     ;$01A44E    ||
    REP #$20                    ;$01A450    || Move to the next slot if the sprites aren't horizontally within a tile of each other.
    LDA $00                     ;$01A452    ||
    SEC                         ;$01A454    ||
    SBC $02                     ;$01A455    ||
    CLC                         ;$01A457    ||
    ADC.w #$0010                ;$01A458    ||
    CMP.w #$0020                ;$01A45B    ||
    SEP #$20                    ;$01A45E    ||
    BCS CODE_01A4B0             ;$01A460    |/
    LDY.b #$00                  ;$01A462    |\ 
    LDA.w $1662,X               ;$01A464    ||
    AND.b #$0F                  ;$01A467    ||
    BEQ CODE_01A46C             ;$01A469    ||
    INY                         ;$01A46B    ||
CODE_01A46C:                    ;           ||
    LDA $D8,X                   ;$01A46C    || 
    CLC                         ;$01A46E    ||
    ADC.w DATA_01A40B,Y         ;$01A46F    ||
    STA $00                     ;$01A472    ||
    LDA.w $14D4,X               ;$01A474    ||
    ADC.b #$00                  ;$01A477    ||
    STA $01                     ;$01A479    ||
    LDY.w $15E9                 ;$01A47B    ||
    LDX.b #$00                  ;$01A47E    ||
    LDA.w $1662,Y               ;$01A480    ||
    AND.b #$0F                  ;$01A483    ||
    BEQ CODE_01A488             ;$01A485    ||
    INX                         ;$01A487    || Move to the next slot if the sprites aren't vertically close to each other.
CODE_01A488:                    ;           ||  Exactly how close they need to be depends on their sprite clipping values.
    LDA.w $00D8,Y               ;$01A488    ||
    CLC                         ;$01A48B    ||
    ADC.w DATA_01A40B,X         ;$01A48C    ||
    STA $02                     ;$01A48F    ||
    LDA.w $14D4,Y               ;$01A491    ||
    ADC.b #$00                  ;$01A494    ||
    STA $03                     ;$01A496    ||
    LDX.w $1695                 ;$01A498    ||
    REP #$20                    ;$01A49B    ||
    LDA $00                     ;$01A49D    ||
    SEC                         ;$01A49F    ||
    SBC $02                     ;$01A4A0    ||
    CLC                         ;$01A4A2    ||
    ADC.w #$000C                ;$01A4A3    ||
    CMP.w #$0018                ;$01A4A6    ||
    SEP #$20                    ;$01A4A9    ||
    BCS CODE_01A4B0             ;$01A4AB    |/
    JSR CODE_01A4BA             ;$01A4AD    | Process interaction.
CODE_01A4B0:                    ;           |
    DEX                         ;$01A4B0    |\ 
    BMI CODE_01A4B6             ;$01A4B1    || Move to next slot and loop. If all slots are done, return.
    JMP CODE_01A417             ;$01A4B3    |/

CODE_01A4B6:                    ;```````````| Return the routine.
    LDX.w $15E9                 ;$01A4B6    |
    RTS                         ;$01A4B9    |



CODE_01A4BA:                    ;```````````| Sprites are touching; the below blocks use a series of branches to determine code to run.
    LDA.w $14C8,Y               ;$01A4BA    |  They're all extremely similar and mainly based on the sprite state (08-0B), so I'll just
    CMP.b #$08                  ;$01A4BD    |  include comments for the blocks and not the individual lines.
    BEQ CODE_01A4CE             ;$01A4BF    |
    CMP.b #$09                  ;$01A4C1    |
    BEQ CODE_01A4E2             ;$01A4C3    |
    CMP.b #$0A                  ;$01A4C5    |
    BEQ CODE_01A506             ;$01A4C7    |
    CMP.b #$0B                  ;$01A4C9    |
    BEQ CODE_01A51A             ;$01A4CB    |
    RTS                         ;$01A4CD    |

CODE_01A4CE:                    ;```````````| Sprite A is in normal status (08).
    LDA.w $14C8,X               ;$01A4CE    |
    CMP.b #$08                  ;$01A4D1    |
    BEQ CODE_01A53D             ;$01A4D3    |
    CMP.b #$09                  ;$01A4D5    |
    BEQ CODE_01A540             ;$01A4D7    |
    CMP.b #$0A                  ;$01A4D9    |
    BEQ CODE_01A537             ;$01A4DB    |
    CMP.b #$0B                  ;$01A4DD    |
    BEQ CODE_01A534             ;$01A4DF    |
    RTS                         ;$01A4E1    |

CODE_01A4E2:                    ;```````````| Sprite A is in carryable status (09).
    LDA.w $1588,Y               ;$01A4E2    |\ 
    AND.b #$04                  ;$01A4E5    || Branch if on the ground.
    BNE CODE_01A4F2             ;$01A4E7    |/
    LDA.w $009E,Y               ;$01A4E9    |\ 
    CMP.b #$0F                  ;$01A4EC    || Branch if A = sprite 0F (Goomba); else, treat the sprite as thrown.
    BEQ CODE_01A534             ;$01A4EE    ||
    BRA CODE_01A506             ;$01A4F0    |/
CODE_01A4F2:                    ;```````````| Sprite A is carryable and on the ground.
    LDA.w $14C8,X               ;$01A4F2    |
    CMP.b #$08                  ;$01A4F5    |
    BEQ CODE_01A540             ;$01A4F7    |
    CMP.b #$09                  ;$01A4F9    |
    BEQ CODE_01A555             ;$01A4FB    |
    CMP.b #$0A                  ;$01A4FD    |
    BEQ ADDR_01A53A             ;$01A4FF    |
    CMP.b #$0B                  ;$01A501    |
    BEQ CODE_01A534             ;$01A503    |
    RTS                         ;$01A505    |

CODE_01A506:                    ;```````````| Sprite A is in thrown status (0A), or carryable and in the air (and not a Goomba).
    LDA.w $14C8,X               ;$01A506    |
    CMP.b #$08                  ;$01A509    |
    BEQ CODE_01A52E             ;$01A50B    |
    CMP.b #$09                  ;$01A50D    |
    BEQ CODE_01A531             ;$01A50F    |
    CMP.b #$0A                  ;$01A511    |
    BEQ CODE_01A534             ;$01A513    |
    CMP.b #$0B                  ;$01A515    |
    BEQ CODE_01A534             ;$01A517    |
    RTS                         ;$01A519    |

CODE_01A51A:                    ;```````````| Sprite A is in carried status (0B).
    LDA.w $14C8,X               ;$01A51A    |
    CMP.b #$08                  ;$01A51D    |
    BEQ CODE_01A534             ;$01A51F    |
    CMP.b #$09                  ;$01A521    |
    BEQ CODE_01A534             ;$01A523    |
    CMP.b #$0A                  ;$01A525    |
    BEQ CODE_01A534             ;$01A527    |
    CMP.b #$0B                  ;$01A529    |
    BEQ CODE_01A534             ;$01A52B    |
    RTS                         ;$01A52D    |

    ; And here are the actual jumps all those branches above are leading to.
    
CODE_01A52E:                    ;```````````| Sprite A is thrown (0A) and sprite B is normal (08).
    JMP CODE_01A625             ;$01A52E    | Generally, kills sprite B.

CODE_01A531:                    ;```````````| Sprite A is thrown (0A) and sprite B is carryable (09).
    JMP CODE_01A642             ;$01A531    | Kills either sprite B or both sprites, depending on whether B is on the ground.

CODE_01A534:                    ;```````````| Either sprite A or B are being carried (0B), both are thrown (0A), or sprite A is a carryable Goomba (09).
    JMP CODE_01A685             ;$01A524    | Generally, kills both sprites.

CODE_01A537:                    ;```````````| Sprite A is normal (08) and sprite B is thrown (0A).
    JMP CODE_01A5C4             ;$01A537    | Generally, kills sprite A.

ADDR_01A53A:                    ;```````````| Unused. Does the same as above.
    JMP CODE_01A5C4             ;$01A53A    |

CODE_01A53D:                    ;```````````| Both sprites are in normal status (08).
    JMP CODE_01A56D             ;$01A53D    | Bumps the two sprites off each other.



CODE_01A540:                    ;-----------| Sprite collision: Either sprite is in normal status (08) and the other sprite is carryable (09).
    JSR CODE_01A6D9             ;$01A540    |\ 
    PHX                         ;$01A543    ||
    PHY                         ;$01A544    ||
    TYA                         ;$01A545    ||
    TXY                         ;$01A546    ||
    TAX                         ;$01A547    || Handle Koopas kicking/hopping into the sprite, if applicable.
    JSR CODE_01A6D9             ;$01A548    ||  Return if they're already in the process of doing so.
    PLY                         ;$01A54B    ||
    PLX                         ;$01A54C    ||
    LDA.w $1558,X               ;$01A54D    ||
    ORA.w $1558,Y               ;$01A550    ||
    BNE Return01A5C3            ;$01A553    |/
CODE_01A555:                    ;           |
    LDA.w $14C8,X               ;$01A555    |\ 
    CMP.b #$09                  ;$01A558    ||
    BNE CODE_01A56D             ;$01A55A    || If sprite A is the carryable sprite or sprite B is on the ground, just have the two bump off each other.
    JSR IsOnGround              ;$01A55C    ||
    BNE CODE_01A56D             ;$01A55F    |/
    LDA $9E,X                   ;$01A561    |\ 
    CMP.b #$0F                  ;$01A563    ||
    BNE CODE_01A56A             ;$01A565    || If sprite 0F (Goomba), kill both sprites.
    JMP CODE_01A685             ;$01A567    || Else, jump to kill just sprite A.
CODE_01A56A:                    ;           ||
    JMP CODE_01A5C4             ;$01A56A    |/



CODE_01A56D:                    ;```````````| Just have the two sprites bump off each other.
    LDA $E4,X                   ;$01A56D    |
    SEC                         ;$01A56F    |
    SBC.w $00E4,Y               ;$01A570    |
    LDA.w $14E0,X               ;$01A573    |
    SBC.w $14E0,Y               ;$01A576    |
    ROL                         ;$01A579    |
    AND.b #$01                  ;$01A57A    |
    STA $00                     ;$01A57C    |
    LDA.w $1686,Y               ;$01A57E    |\ 
    AND.b #$10                  ;$01A581    ||
    BNE CODE_01A5A1             ;$01A583    ||
    LDY.w $15E9                 ;$01A585    ||
    LDA.w $157C,Y               ;$01A588    ||
    PHA                         ;$01A58B    ||
    LDA $00                     ;$01A58C    || Turn sprite A around if:
    STA.w $157C,Y               ;$01A58E    ||  - set to change direction when touched ($1686)
    PLA                         ;$01A591    ||  - it's currently facing toward sprite B
    CMP.w $157C,Y               ;$01A592    ||
    BEQ CODE_01A5A1             ;$01A595    ||
    LDA.w $15AC,Y               ;$01A597    ||
    BNE CODE_01A5A1             ;$01A59A    ||
    LDA.b #$08                  ;$01A59C    ||
    STA.w $15AC,Y               ;$01A59E    |/
CODE_01A5A1:                    ;           |
    LDA.w $1686,X               ;$01A5A1    |\ 
    AND.b #$10                  ;$01A5A4    ||
    BNE Return01A5C3            ;$01A5A6    ||
    LDA.w $157C,X               ;$01A5A8    ||
    PHA                         ;$01A5AB    ||
    LDA $00                     ;$01A5AC    ||
    EOR.b #$01                  ;$01A5AE    || Turn sprite B around if:
    STA.w $157C,X               ;$01A5B0    ||  - set to change direction when touched ($1686)
    PLA                         ;$01A5B3    ||  - it's currently facing toward sprite A
    CMP.w $157C,X               ;$01A5B4    ||
    BEQ Return01A5C3            ;$01A5B7    ||
    LDA.w $15AC,X               ;$01A5B9    ||
    BNE Return01A5C3            ;$01A5BC    ||
    LDA.b #$08                  ;$01A5BE    ||
    STA.w $15AC,X               ;$01A5C0    |/
Return01A5C3:                   ;           |
    RTS                         ;$01A5C3    |



CODE_01A5C4:                    ;-----------| Sprite collision: sprite B thrown into sprite A (kills sprite A in most cases).
    LDA.w $009E,Y               ;$01A5C4    |\ 
    SEC                         ;$01A5C7    ||
    SBC.b #$83                  ;$01A5C8    ||
    CMP.b #$02                  ;$01A5CA    ||
    BCS CODE_01A5DA             ;$01A5CC    ||
    JSR FlipSpriteDir           ;$01A5CE    ||
    STZ $AA,X                   ;$01A5D1    || If sprite A is the flying ? blocks, set misc RAM to mark as hit and clear sprite B's Y speed.
CODE_01A5D3:                    ;           ||
    PHX                         ;$01A5D3    ||
    TYX                         ;$01A5D4    ||
    JSR CODE_01B4E2             ;$01A5D5    ||
    PLX                         ;$01A5D8    ||
    RTS                         ;$01A5D9    |/

CODE_01A5DA:
    LDX.w $15E9                 ;$01A5DA    |\ 
    LDY.w $1695                 ;$01A5DD    || Handle blue Koopas catching shells and throwblocks.
    JSR CODE_01A77C             ;$01A5E0    |/
    LDA.b #$02                  ;$01A5E3    |\ Kill sprite A. 
    STA.w $14C8,Y               ;$01A5E5    |/
    PHX                         ;$01A5E8    |
    TYX                         ;$01A5E9    |
    JSL CODE_01AB72             ;$01A5EA    | Display a contact graphic.
    PLX                         ;$01A5EE    |
    LDA $B6,X                   ;$01A5EF    |\ 
    ASL                         ;$01A5F1    ||
    LDA.b #$10                  ;$01A5F2    ||
    BCC CODE_01A5F8             ;$01A5F4    ||
    LDA.b #$F0                  ;$01A5F6    || Send sprite B flying upwards and in the direction of sprite A.
CODE_01A5F8:                    ;           ||
    STA.w $00B6,Y               ;$01A5F8    ||
    LDA.b #$D0                  ;$01A5FB    ||
    STA.w $00AA,Y               ;$01A5FD    |/
    PHY                         ;$01A600    |
    INC.w $1626,X               ;$01A601    |\ 
    LDY.w $1626,X               ;$01A604    ||
    CPY.b #$08                  ;$01A607    || Get SFX for killing an enemy with a thrown sprite.
    BCS CODE_01A611             ;$01A609    ||
    LDA.w DATA_01A61E-1,Y       ;$01A60B    ||
    STA.w $1DF9                 ;$01A60E    |/
CODE_01A611:                    ;           |
    TYA                         ;$01A611    |
    CMP.b #$08                  ;$01A612    |\ 
    BCC CODE_01A618             ;$01A614    ||
    LDA.b #$08                  ;$01A616    || Give corresponding points/1up.
CODE_01A618:                    ;           ||
    PLY                         ;$01A618    ||
    JSL CODE_02ACE1             ;$01A619    |/
    RTS                         ;$01A61D    |



DATA_01A61E:                    ;$01A61E    | SFX for jumping on enemies in a row. Also for hits by a shell and by star power.
    db $13,$14,$15,$16,$17,$18,$19



CODE_01A625:                    ;-----------| Sprite collision: sprite A thrown into sprite B (kills sprite B in most cases).
    LDA $9E,X                   ;$01A625    |\ 
    SEC                         ;$01A627    ||
    SBC.b #$83                  ;$01A628    ||
    CMP.b #$02                  ;$01A62A    ||
    BCS CODE_01A63D             ;$01A62C    ||
    PHX                         ;$01A62E    ||
    TYX                         ;$01A62F    || If sprite B is the flying ? blocks, set misc RAM to mark as hit and clear sprite A's Y speed.
    JSR FlipSpriteDir           ;$01A630    ||
    PLX                         ;$01A633    ||
    LDA.b #$00                  ;$01A634    ||
    STA.w $00AA,Y               ;$01A636    ||
    JSR CODE_01B4E2             ;$01A639    ||
    RTS                         ;$01A63C    |/

CODE_01A63D:                    ;```````````| Not the flying ? blocks.
    JSR CODE_01A77C             ;$01A63D    | Handle blue Koopas catching shells and throwblocks.
    BRA CODE_01A64A             ;$01A640    |


CODE_01A642:                    ;-----------| Sprite collision: Sprite A is thrown into a carryable sprite B.
    JSR IsOnGround              ;$01A642    |\ 
    BNE CODE_01A64A             ;$01A645    || Kill sprite B if it's on the ground, and both sprites if not.
    JMP CODE_01A685             ;$01A647    |/

CODE_01A64A:
    PHX                         ;$01A64A    |
    LDA.w $1626,Y               ;$01A64B    |\ 
    INC A                       ;$01A64E    ||
    STA.w $1626,Y               ;$01A64F    ||
    LDX.w $1626,Y               ;$01A652    || Get SFX for killing an enemy with a thrown sprite.
    CPX.b #$08                  ;$01A655    ||
    BCS CODE_01A65F             ;$01A657    ||
    LDA.w DATA_01A61E-1,X       ;$01A659    ||
    STA.w $1DF9                 ;$01A65C    |/
CODE_01A65F:                    ;           |
    TXA                         ;$01A65F    |
    CMP.b #$08                  ;$01A660    |\ 
    BCC CODE_01A666             ;$01A662    ||
    LDA.b #$08                  ;$01A664    || Give corresponding points/1up.
CODE_01A666:                    ;           ||
    PLX                         ;$01A666    ||
    JSL GivePoints              ;$01A667    |/
    LDA.b #$02                  ;$01A66B    |\ Kill sprite B.
    STA.w $14C8,X               ;$01A66D    |/
    JSL CODE_01AB72             ;$01A670    | Display a contact graphic.
    LDA.w $00B6,Y               ;$01A674    |\ 
    ASL                         ;$01A677    ||
    LDA.b #$10                  ;$01A678    ||
    BCC CODE_01A67E             ;$01A67A    ||
    LDA.b #$F0                  ;$01A67C    || Send sprite B flying upwards and in the direction of sprite A.
CODE_01A67E:                    ;           ||
    STA $B6,X                   ;$01A67E    ||
    LDA.b #$D0                  ;$01A680    ||
    STA $AA,X                   ;$01A682    |/
    RTS                         ;$01A684    |



CODE_01A685:                    ;```````````| Sprite collision: Either sprite A or B are being carried, both are thrown, or sprite A is a carryable Goomba.
    LDA $9E,X                   ;$01A685    |\ Kills both sprites in most cases.
    CMP.b #$83                  ;$01A687    ||
    BEQ CODE_01A69A             ;$01A689    ||
    CMP.b #$84                  ;$01A68B    ||
    BEQ CODE_01A69A             ;$01A68D    ||
    LDA.b #$02                  ;$01A68F    || If sprite B is the flying ? blocks, set misc RAM to mark as hit.
    STA.w $14C8,X               ;$01A691    ||  Else, kill sprite B.
    LDA.b #$D0                  ;$01A694    ||
    STA $AA,X                   ;$01A696    ||
    BRA CODE_01A69D             ;$01A698    ||
CODE_01A69A:                    ;           ||
    JSR CODE_01B4E2             ;$01A69A    |/
CODE_01A69D:                    ;           |
    LDA.w $009E,Y               ;$01A69D    |\ 
    CMP.b #$80                  ;$01A6A0    ||
    BEQ CODE_01A6BB             ;$01A6A2    ||
    CMP.b #$83                  ;$01A6A4    ||
    BEQ CODE_01A6B8             ;$01A6A6    || If sprite A is:
    CMP.b #$84                  ;$01A6A8    ||  - sprite 80 (key), do nothing.
    BEQ CODE_01A6B8             ;$01A6AA    ||  - sprite 83/84 (flying ? block), set misc RAM to mark as hit.
    LDA.b #$02                  ;$01A6AC    ||  - anything else: kill sprite A.
    STA.w $14C8,Y               ;$01A6AE    ||
    LDA.b #$D0                  ;$01A6B1    ||
    STA.w $00AA,Y               ;$01A6B3    ||
    BRA CODE_01A6BB             ;$01A6B6    |/
CODE_01A6B8:                    ;           |
    JSR CODE_01A5D3             ;$01A6B8    | Set misc RAM for sprite 83/84.
CODE_01A6BB:                    ;           |
    JSL DispContactSpr          ;$01A6BB    |
    LDA.b #$04                  ;$01A6BF    | Points to give for killing a sprite with a carryable one.
    JSL GivePoints              ;$01A6C1    |
    LDA $B6,X                   ;$01A6C5    |\ 
    ASL                         ;$01A6C7    ||
    LDA.b #$10                  ;$01A6C8    ||
    BCS CODE_01A6CE             ;$01A6CA    ||
    LDA.b #$F0                  ;$01A6CC    || Send the two sprites flying away from each other.
CODE_01A6CE:                    ;           ||
    STA $B6,X                   ;$01A6CE    ||
    EOR.b #$FF                  ;$01A6D0    ||
    INC A                       ;$01A6D2    ||
    STA.w $00B6,Y               ;$01A6D3    |/
    RTS                         ;$01A6D6    |



DATA_01A6D7:                    ;$01A6D7    | X speeds for shells/Goombas/Bob-ombs/etc. after a blue Koopa kicks it. Right, left.
    db $30,$D0





CODE_01A6D9:                    ;-----------| Subroutine to handle one sprite hopping into or kicking the other (Koopas).
    STY $00                     ;$01A6D9    |
    JSR IsOnGround              ;$01A6DB    |\ 
    BEQ Return01A72D            ;$01A6DE    ||
    LDA.w $1588,Y               ;$01A6E0    ||
    AND.b #$04                  ;$01A6E3    || Return if:
    BEQ Return01A72D            ;$01A6E5    ||  - either sprite is not on the ground
    LDA.w $1656,X               ;$01A6E7    ||  - the sprite is not set to hop in/kick shells
    AND.b #$40                  ;$01A6EA    ||  - either sprite is already hopping into/kicking a shell
    BEQ Return01A72D            ;$01A6EC    ||
    LDA.w $1558,Y               ;$01A6EE    ||
    ORA.w $1558,X               ;$01A6F1    ||
    BNE Return01A72D            ;$01A6F4    |/
    STZ $02                     ;$01A6F6    |\ 
    LDA $E4,X                   ;$01A6F8    ||
    SEC                         ;$01A6FA    ||
    SBC.w $00E4,Y               ;$01A6FB    ||
    BMI CODE_01A702             ;$01A6FE    ||
    INC $02                     ;$01A700    ||
CODE_01A702:                    ;           || Return if the sprites aren't within half a tile of each other,
    CLC                         ;$01A702    ||  or if the Koopa is walking away from the shell.
    ADC.b #$08                  ;$01A703    ||
    CMP.b #$10                  ;$01A705    ||
    BCC Return01A72D            ;$01A707    ||
    LDA.w $157C,X               ;$01A709    ||
    CMP $02                     ;$01A70C    ||
    BNE Return01A72D            ;$01A70E    |/
    LDA $9E,X                   ;$01A710    |\ 
    CMP.b #$02                  ;$01A712    || If not sprite 02 (blue Koopa), hop into the shell. Else, kick the shell.
    BNE HopIntoShell            ;$01A714    |/
    LDA.b #$20                  ;$01A716    |\ 
    STA.w $163E,X               ;$01A718    ||
    STA.w $1558,X               ;$01A71B    ||
    LDA.b #$23                  ;$01A71E    || Prepare to kick the sprite; set timers and lock sprite slot for interaction.
    STA.w $1564,X               ;$01A720    ||
    TYA                         ;$01A723    ||
    STA.w $160E,X               ;$01A724    |/
    RTS                         ;$01A727    |


PlayKickSfx:                    ;-----------| Play kick sound. Exactly what it says on the tin. Also used for sliding into enemies.
    LDA.b #$03                  ;$01A728    |\ Kick SFX (for shells, footballs, etc.)
    STA.w $1DF9                 ;$01A72A    |/
Return01A72D:                   ;           |
    RTS                         ;$01A72D    |


HopIntoShell:                   ;-----------| Subroutine for a sprite to jump inside a shell (Koopas).
    LDA.w $1540,Y               ;$01A72E    |\ 
    BNE Return01A777            ;$01A731    ||
    LDA.w $009E,Y               ;$01A733    || Return if:
    CMP.b #$0F                  ;$01A736    ||  - The sprite is not a shell.
    BCS Return01A777            ;$01A738    ||  - The shell was killed.
    LDA.w $1588,Y               ;$01A73A    ||  - The shell is no longer on the ground.
    AND.b #$04                  ;$01A73D    ||
    BEQ Return01A777            ;$01A73F    |/
    LDA.w $15F6,Y               ;$01A741    |\ Branch if the shell is rightside-up.
    BPL CODE_01A75D             ;$01A744    |/
    AND.b #$7F                  ;$01A746    |\ Turn the shell rightside-up.
    STA.w $15F6,Y               ;$01A748    |/
    LDA.b #$E0                  ;$01A74B    |\\ Y speed to give a shell when flipped rightside-up.
    STA.w $00AA,Y               ;$01A74D    |/
    LDA.b #$20                  ;$01A750    |\ Disable contact for the shell.
    STA.w $1564,Y               ;$01A752    |/
CODE_01A755:                    ;```````````| Temporarily freeze a Koopa.
    LDA.b #$20                  ;$01A755    | How many frames Koopas freeze for after kicking a shell or flipping one over.
    STA $C2,X                   ;$01A757    |
    STA.w $1558,X               ;$01A759    |
    RTS                         ;$01A75C    |

CODE_01A75D:                    ;```````````| Shell is rightside-up; hop inside.
    LDA.b #$E0                  ;$01A75D    | Y speed to give the Koopa when it jumps.
    STA $AA,X                   ;$01A75F    |
    LDA.w $164A,X               ;$01A761    |\ 
    CMP.b #$01                  ;$01A764    ||
    LDA.b #$18                  ;$01A766    ||
    BCC CODE_01A76C             ;$01A768    || Set how long to wait before erasing the Koopa. Account for water physics.
    LDA.b #$2C                  ;$01A76A    ||
CODE_01A76C:                    ;           ||
    STA.w $1558,X               ;$01A76C    |/
    TXA                         ;$01A76F    |\ 
    STA.w $1594,Y               ;$01A770    || Track sprite slots.
    TYA                         ;$01A773    ||
    STA.w $1594,X               ;$01A774    |/
Return01A777:                   ;           |
    RTS                         ;$01A777    |





DATA_01A778:                    ;$01A778    | Low X position distances to shift a shell from a blue Koopa when it's catching one.
    db $10,$F0

DATA_01A77A:                    ;$01A77A    | High X position distances to shift a shell from a blue Koopa when it's catching one.
    db $00,$FF

CODE_01A77C:                    ;-----------| Subroutine to handle blue Koopas catching shells and throwblocks (and some other sprites, though glitchily).
    LDA $9E,X                   ;$01A77C    |\ 
    CMP.b #$02                  ;$01A77E    ||
    BNE CODE_01A7C2             ;$01A780    || Return if...
    LDA.w $187B,Y               ;$01A782    ||  - Sprite A is not a blue Koopa.
    BNE CODE_01A7C2             ;$01A785    ||  - Sprite B is a disco shell.
    LDA.w $157C,X               ;$01A787    ||  - The sprites are not moving in opposite directions (or at the very least, facing opposite directions).
    CMP.w $157C,Y               ;$01A78A    ||
    BEQ CODE_01A7C2             ;$01A78D    |/
    STY $01                     ;$01A78F    |
    LDY.w $1534,X               ;$01A791    |\ Return the sprite interaction routine if the blue Koopa is already being pushed by the shell.
    BNE CODE_01A7C0             ;$01A794    |/
    STZ.w $1528,X               ;$01A796    |
    STZ.w $163E,X               ;$01A799    |
    TAY                         ;$01A79C    |
    STY $00                     ;$01A79D    |
    LDA $E4,X                   ;$01A79F    |\ 
    CLC                         ;$01A7A1    ||
    ADC.w DATA_01A778,Y         ;$01A7A2    ||
    LDY $01                     ;$01A7A5    ||
    STA.w $00E4,Y               ;$01A7A7    || Move the shell in front of the Koopa.
    LDA.w $14E0,X               ;$01A7AA    ||
    LDY $00                     ;$01A7AD    ||
    ADC.w DATA_01A77A,Y         ;$01A7AF    ||
    LDY $01                     ;$01A7B2    ||
    STA.w $14E0,Y               ;$01A7B4    |/
    TYA                         ;$01A7B7    |
    STA.w $160E,X               ;$01A7B8    |
    LDA.b #$01                  ;$01A7BB    |
    STA.w $1534,X               ;$01A7BD    |
CODE_01A7C0:                    ;           |
    PLA                         ;$01A7C0    |\ Return sprite interaction.
    PLA                         ;$01A7C1    |/
CODE_01A7C2:                    ;           |
    LDX.w $1695                 ;$01A7C2    |
    LDY.w $15E9                 ;$01A7C5    |
    RTS                         ;$01A7C8    |





SpriteToSpawn:                  ;$01A7C9    | What sprites to turn a sprite into when bounced off of by Mario, hit by a block, or eaten by Yoshi.
    db $00,$01,$02,$03                      ; Unused
    db $04,$05,$06,$07                      ; 04, 05, 06, 07 (only when swallowed by Yoshi)
    db $04,$04,$05,$05,$07                  ; 08, 09, 0A, 0B, 0C
    db $00,$00,$0F                          ; Unused
    db $0F,$0F,$0D                          ; 10, 3F, 40

    ; Scratch RAM usage:
    ; $00, $01, $0B, $0E, $0F
    
    ; Misc RAM input:
    ; $154C - Disable interaction.
    ; $187B - If non-zero, gives Mario an X speed when bouncing off the sprite and doesn't kill it (like a Disco Shell).
    
    ; Misc RAM output (when using default interaction):
    ; $1540 - If $1656 bit 6 is set (die when jumped on), timer for a squish animation. Set to #$20 when squished.
    ; $154C - Set to #$08 if it wasn't already set.
    ; $157C - If $1686 bit 4 is set (change direction when touched), horizontal direction of the sprite.
    
MarioSprInteract:               ;-----------| Subroutine to handle interaction between Mario and the sprite in X.
    PHB                         ;$01A7DC    |  With default interaction disabled, returns carry set if in contact and clear if not.
    PHK                         ;$01A7DD    |  With default interaction, all routines are handled internally.
    PLB                         ;$01A7DE    |   (star power, slide-killing, Mario damage, bouncing, carrying, etc.)
    JSR MarioSprInteractRt      ;$01A7DF    |
    PLB                         ;$01A7E2    |
    RTL                         ;$01A7E3    |  Also sets $0F/$0E with values from SubHorzPos/SubVertPos.

MarioSprInteractRt:
    LDA.w $167A,X               ;$01A7E4    |\ 
    AND.b #$20                  ;$01A7E7    ||
    BNE ProcessInteract         ;$01A7E9    ||
    TXA                         ;$01A7EB    ||
    EOR $13                     ;$01A7EC    ||
    AND.b #$01                  ;$01A7EE    || Return if not a frame in which interaction is processed for the sprite, or the sprite is horizontally offscreen.
    ORA.w $15A0,X               ;$01A7F0    ||
    BEQ ProcessInteract         ;$01A7F3    ||
ReturnNoContact:                ;           ||
    CLC                         ;$01A7F5    ||
    RTS                         ;$01A7F6    |/


ProcessInteract:                ;-----------| The actual Mario-sprite interaction routine.
    JSR SubHorzPosBnk1          ;$01A7F7    |
    LDA $0F                     ;$01A7FA    |\ 
    CLC                         ;$01A7FC    ||
    ADC.b #$50                  ;$01A7FD    ||
    CMP.b #$A0                  ;$01A7FF    || Return if Mario is not within a 10x12 tile space around the sprite.
    BCS ReturnNoContact         ;$01A801    ||  (i.e. not within any hitbox whatsoever)
    JSR SubVertPosBnk1          ;$01A803    ||
    LDA $0E                     ;$01A806    || That said, this is a single-byte compare, so this space loops each screen anyway.
    CLC                         ;$01A808    ||  Thankfully, the CheckForContact routine later on does catch that.
    ADC.b #$60                  ;$01A809    ||
    CMP.b #$C0                  ;$01A80B    ||
    BCS ReturnNoContact         ;$01A80D    |/
CODE_01A80F:                    ;           |
    LDA $71                     ;$01A80F    |\ 
    CMP.b #$01                  ;$01A811    || Return if Mario is performing a special animation.
    BCS ReturnNoContact         ;$01A813    |/
    LDA.b #$00                  ;$01A815    |\ 
    BIT.w $0D9B                 ;$01A817    ||
    BVS CODE_01A822             ;$01A81A    ||
    LDA.w $13F9                 ;$01A81C    || Return if Mario and the sprite are on different layers.
    EOR.w $1632,X               ;$01A81F    ||
CODE_01A822:                    ;           ||
    BNE ReturnNoContact2        ;$01A822    |/
    JSL GetMarioClipping        ;$01A824    |\ 
    JSL GetSpriteClippingA      ;$01A828    || Return if Mario is not in contact with the sprite.
    JSL CheckForContact         ;$01A82C    ||
    BCC ReturnNoContact2        ;$01A830    |/
    LDA.w $167A,X               ;$01A832    |\ 
    BPL DefaultInteractR        ;$01A835    || Handle default interaction. Else, return carry set.
    SEC                         ;$01A837    |/
    RTS                         ;$01A838    |



DATA_01A839:                    ;$01A839    | X speeds to gives sprites when killed by a star.
    db $F0,$10

DefaultInteractR:               ;-----------| Subroutine to handle default interaction when Mario is actually touching a sprite.
    LDA.w $1490                 ;$01A83B    |\ 
    BEQ CODE_01A87E             ;$01A83E    ||
    LDA.w $167A,X               ;$01A840    || Branch if Mario doesn't have star power or the sprite can't be killed by a star.
    AND.b #$02                  ;$01A843    ||
    BNE CODE_01A87E             ;$01A845    |/


CODE_01A847:                    ;```````````| Mario is touching a sprite with either star power or sliding into it.
    JSL DispContactSpr          ;$01A847    |
    INC.w $18D2                 ;$01A84B    |\ 
    LDA.w $18D2                 ;$01A84E    ||
    CMP.b #$08                  ;$01A851    ||
    BCC CODE_01A85A             ;$01A853    || Increase kill count and give corresponding points.
    LDA.b #$08                  ;$01A855    ||
    STA.w $18D2                 ;$01A857    ||
CODE_01A85A:                    ;           ||
    JSL GivePoints              ;$01A85A    |/
    LDY.w $18D2                 ;$01A85E    |\ 
    CPY.b #$08                  ;$01A861    ||
    BCS CODE_01A86B             ;$01A863    || Get SFX for being hit with star power.
    LDA.w DATA_01A61E-1,Y       ;$01A865    ||
    STA.w $1DF9                 ;$01A868    |/
CODE_01A86B:                    ;           |
    LDA.b #$02                  ;$01A86B    |\ Kill the sprite.
    STA.w $14C8,X               ;$01A86D    |/
    LDA.b #$D0                  ;$01A870    |\ 
    STA $AA,X                   ;$01A872    ||
    JSR SubHorzPosBnk1          ;$01A874    || Send flying away from Mario.
    LDA.w DATA_01A839,Y         ;$01A877    ||
    STA $B6,X                   ;$01A87A    |/
ReturnNoContact2:               ;           |
    CLC                         ;$01A87C    |
    RTS                         ;$01A87D    |


CODE_01A87E:                    ;```````````| Mario doesn't have star power.
    STZ.w $18D2                 ;$01A87E    |
    LDA.w $154C,X               ;$01A881    |\ 
    BNE CODE_01A895             ;$01A884    || Return if the sprite has player contact disabled.
    LDA.b #$08                  ;$01A886    ||  Otherwise, prevent extra contact from occuring.
    STA.w $154C,X               ;$01A888    |/
    LDA.w $14C8,X               ;$01A88B    |\ 
    CMP.b #$09                  ;$01A88E    || Branch if not a carryable sprite.
    BNE CODE_01A897             ;$01A890    |/
    JSR CODE_01AA42             ;$01A892    |] Handle touching a carryable sprite.
CODE_01A895:                    ;           |
    CLC                         ;$01A895    |
    RTS                         ;$01A896    |

CODE_01A897:                    ;```````````| Non-carryable sprite.
    LDA.b #$14                  ;$01A897    |\\ Distance above the sprite that Mario's position must be to be considered on "top" of it.
    STA $01                     ;$01A899    ||   (increasing this value = smaller safe space)
    LDA $05                     ;$01A89B    ||
    SEC                         ;$01A89D    ||
    SBC $01                     ;$01A89E    ||
    ROL $00                     ;$01A8A0    ||
    CMP $D3                     ;$01A8A2    ||
    PHP                         ;$01A8A4    ||
    LSR $00                     ;$01A8A5    ||
    LDA $0B                     ;$01A8A7    ||
    SBC.b #$00                  ;$01A8A9    || Branch to CODE_01A8E6 if:
    PLP                         ;$01A8AB    ||  - Too low to bounce off the sprite (Y position greater than the sprite's).
    SBC $D4                     ;$01A8AC    ||  - Moving upward, the sprite can't be hit while moving upwards,
    BMI CODE_01A8E6             ;$01A8AE    ||     and Mario hasn't hit any other enemies.
    LDA $7D                     ;$01A8B0    ||  - Both Mario and the sprite are on the ground. 
    BPL CODE_01A8C0             ;$01A8B2    ||
    LDA.w $190F,X               ;$01A8B4    ||
    AND.b #$10                  ;$01A8B7    ||
    BNE CODE_01A8C0             ;$01A8B9    ||
    LDA.w $1697                 ;$01A8BB    ||
    BEQ CODE_01A8E6             ;$01A8BE    ||
CODE_01A8C0:                    ;           ||
    JSR IsOnGround              ;$01A8C0    ||
    BEQ CODE_01A8C9             ;$01A8C3    ||
    LDA $72                     ;$01A8C5    ||
    BEQ CODE_01A8E6             ;$01A8C7    |/
CODE_01A8C9:                    ;           |
    LDA.w $1656,X               ;$01A8C9    |\ 
    AND.b #$10                  ;$01A8CC    || If the sprite can be bounced on, branch.
    BNE CODE_01A91C             ;$01A8CE    |/
    LDA.w $140D                 ;$01A8D0    |\ 
    ORA.w $187A                 ;$01A8D3    || If not spinjumping and not riding Yoshi, branch.
    BEQ CODE_01A8E6             ;$01A8D6    |/
CODE_01A8D8:                    ;           |
    LDA.b #$02                  ;$01A8D8    |\ SFX for spinjumping off an enemy that can't be bounced on.
    STA.w $1DF9                 ;$01A8DA    |/  Also used for bouncing off of disco shells.
    JSL BoostMarioSpeed         ;$01A8DD    |] Make Mario bounce upwards.
    JSL DispContactMario        ;$01A8E1    |] Spawn a contact sprite.
    RTS                         ;$01A8E5    |

    
CODE_01A8E6:                    ;```````````| Hitting an enemy without bouncing off of it.
    LDA.w $13ED                 ;$01A8E6    |\ 
    BEQ CODE_01A8F9             ;$01A8E9    ||
    LDA.w $190F,X               ;$01A8EB    ||
    AND.b #$04                  ;$01A8EE    || If sliding and the sprite can be killed by sliding, then kill it and return.
    BNE CODE_01A8F9             ;$01A8F0    ||
    JSR PlayKickSfx             ;$01A8F2    ||
    JSR CODE_01A847             ;$01A8F5    ||
    RTS                         ;$01A8F8    |/
CODE_01A8F9:                    ;           |
    LDA.w $1497                 ;$01A8F9    |\ 
    BNE Return01A91B            ;$01A8FC    || If Mario is invulnerable or riding Yoshi, return.
    LDA.w $187A                 ;$01A8FE    ||  (interaction while riding Yoshi is handled in his interaction routine)
    BNE Return01A91B            ;$01A901    |/
    LDA.w $1686,X               ;$01A903    |\ 
    AND.b #$10                  ;$01A906    ||
    BNE CODE_01A911             ;$01A908    || If it changes direction when touched, turn it around.
    JSR SubHorzPosBnk1          ;$01A90A    ||
    TYA                         ;$01A90D    ||
    STA.w $157C,X               ;$01A90E    |/
CODE_01A911:                    ;           |
    LDA $9E,X                   ;$01A911    |\ 
    CMP.b #$53                  ;$01A913    || If sprite 53 (throwblock), return.
    BEQ Return01A91B            ;$01A915    |/
    JSL HurtMario               ;$01A917    | For everything else, hurt Mario.
Return01A91B:                   ;           |
    RTS                         ;$01A91B    |


CODE_01A91C:                    ;```````````| Hitting an enemy on top, handle bouncing off.
    LDA.w $140D                 ;$01A91C    |\ 
    ORA.w $187A                 ;$01A91F    || If not spinjumping or riding Yoshi, branch.
    BEQ CODE_01A947             ;$01A922    |/
CODE_01A924:                    ;           |
    JSL DispContactMario        ;$01A924    |
    LDA.b #$F8                  ;$01A928    |\\ Y speed of Mario when stomping an enemy while spinjumping.
    STA $7D                     ;$01A92A    ||
    LDA.w $187A                 ;$01A92C    || Get bounce speed based on whether Mario is spinjumping or riding Yoshi.
    BEQ CODE_01A935             ;$01A92F    ||
    JSL BoostMarioSpeed         ;$01A931    |/
CODE_01A935:                    ;           |
    JSR CODE_019ACB             ;$01A935    | Turn the sprite into a smoke cloud.
    JSL CODE_07FC3B             ;$01A938    | Generate the stars from the spinjump.
    JSR CODE_01AB46             ;$01A93C    | Increase bounce counter/give points.
    LDA.b #$08                  ;$01A93F    |\ SFX for spinjumping or Yoshi-stomping an enemy.
    STA.w $1DF9                 ;$01A941    |/
    JMP CODE_01A9F2             ;$01A944    | Return, handling Lakitu's cloud if applicable.


CODE_01A947:                    ;```````````| Bouncing off an enemy without spinjumping/riding Yoshi.
    JSR CODE_01A8D8             ;$01A947    | Set Y speed, display a contact graphic, and set default sound effect (for disco shell).
    LDA.w $187B,X               ;$01A94A    |\ 
    BEQ CODE_01A95D             ;$01A94D    || If bouncing on a disco shell (or chuck/etc.), just give Mario some X speed and return.
    JSR SubHorzPosBnk1          ;$01A94F    ||
    LDA.b #$18                  ;$01A952    ||| X speed to give Mario to the right of a disco shell/Chuck.
    CPY.b #$00                  ;$01A954    ||
    BEQ CODE_01A95A             ;$01A956    ||
    LDA.b #$E8                  ;$01A958    ||| X speed to give Mario to the left of a disco shell/Chuck.
CODE_01A95A:                    ;           ||
    STA $7B                     ;$01A95A    ||
    RTS                         ;$01A95C    |/

CODE_01A95D:
    JSR CODE_01AB46             ;$01A95D    | Increase bounce counter/play SFX/give points.
    LDY $9E,X                   ;$01A960    |\ 
    LDA.w $1686,X               ;$01A962    || Branch if the sprite doesn't spawn a new sprite when bounced on.
    AND.b #$40                  ;$01A965    ||
    BEQ CODE_01A9BE             ;$01A967    |/
    CPY.b #$72                  ;$01A969    |\ 
    BCC CODE_01A979             ;$01A96B    ||
    PHX                         ;$01A96D    ||
    PHY                         ;$01A96E    || Sprite 73 (cape super Koopa): spawn a feather, turn into a normal Koopa.
    JSL CODE_02EAF2             ;$01A96F    ||  (also sprites 72+)
    PLY                         ;$01A973    ||
    PLX                         ;$01A974    ||
    LDA.b #$02                  ;$01A975    ||| Sprite that the cape super Koopa becomes when bounced on.
    BRA CODE_01A99B             ;$01A977    |/

CODE_01A979:
    CPY.b #$6E                  ;$01A979    |\ 
    BNE CODE_01A98A             ;$01A97B    ||
    LDA.b #$02                  ;$01A97D    ||
    STA $C2,X                   ;$01A97F    || Sprite 6E (Dino Rhino): turn into Dino Torch, prepare flame.
    LDA.b #$FF                  ;$01A981    ||
    STA.w $1540,X               ;$01A983    ||
    LDA.b #$6F                  ;$01A986    ||| Sprite that Dino Rhino becomes when bounced on.
    BRA CODE_01A99B             ;$01A988    |/

CODE_01A98A:
    CPY.b #$3F                  ;$01A98A    |\ 
    BCC CODE_01A998             ;$01A98C    ||
    LDA.b #$80                  ;$01A98E    || Sprite 3F (para-Goomba) and sprite 40 (para-Bomb): turn into a Goomba/Bob-omb and set stun timer.
    STA.w $1540,X               ;$01A990    ||
    LDA.w SpriteToSpawn-$2E,Y   ;$01A993    ||
    BRA CODE_01A99B             ;$01A996    |/

CODE_01A998:
    LDA.w SpriteToSpawn,Y       ;$01A998    | Sprites 08-0C (Koopas) and sprite 10 (winged Goomba): turn into respective sprites.
CODE_01A99B:                    ;           |
    STA $9E,X                   ;$01A99B    |
    LDA.w $15F6,X               ;$01A99D    |\ 
    AND.b #$0E                  ;$01A9A0    ||
    STA $0F                     ;$01A9A2    ||
    JSL LoadSpriteTables        ;$01A9A4    || Respawn the sprite.
    LDA.w $15F6,X               ;$01A9A8    ||
    AND.b #$F1                  ;$01A9AB    ||
    ORA $0F                     ;$01A9AD    ||
    STA.w $15F6,X               ;$01A9AF    |/
    STZ $AA,X                   ;$01A9B2    |
    LDA $9E,X                   ;$01A9B4    |\ 
    CMP.b #$02                  ;$01A9B6    || Unused?
    BNE Return01A9BD            ;$01A9B8    ||  Sets the "walked off ledge" flag for the Blue Koopa.
    INC.w $151C,X               ;$01A9BA    |/
Return01A9BD:                   ;           |
    RTS                         ;$01A9BD    |



CODE_01A9BE:                    ;```````````| Does not spawn a new sprite when bounced on.
    LDA $9E,X                   ;$01A9BE    |\ 
    SEC                         ;$01A9C0    ||
    SBC.b #$04                  ;$01A9C1    ||
    CMP.b #$0D                  ;$01A9C3    ||
    BCS CODE_01A9CC             ;$01A9C5    ||
    LDA.w $1407                 ;$01A9C7    ||
    BNE CODE_01A9D3             ;$01A9CA    ||
CODE_01A9CC:                    ;           || If the sprite is set to die when jumped on,
    LDA.w $1656,X               ;$01A9CC    ||  or if sprite 04-10 and Mario flies into it,
    AND.b #$20                  ;$01A9CF    ||  then squish the sprite.
    BEQ CODE_01A9E2             ;$01A9D1    ||  Else, branch.
CODE_01A9D3:                    ;           ||
    LDA.b #$03                  ;$01A9D3    ||
    STA.w $14C8,X               ;$01A9D5    ||
    LDA.b #$20                  ;$01A9D8    ||
    STA.w $1540,X               ;$01A9DA    ||
    STZ $B6,X                   ;$01A9DD    ||
    STZ $AA,X                   ;$01A9DF    |/
    RTS                         ;$01A9E1    |

CODE_01A9E2:                    ;```````````| Sprite is not set to squish when killed.
    LDA.w $1662,X               ;$01A9E2    |\ 
    AND.b #$80                  ;$01A9E5    ||
    BEQ CODE_01AA01             ;$01A9E7    || If set to fall down when killed, set the sprite status. Else, branch.
    LDA.b #$02                  ;$01A9E9    ||
    STA.w $14C8,X               ;$01A9EB    ||
    STZ $B6,X                   ;$01A9EE    ||
    STZ $AA,X                   ;$01A9F0    |/
CODE_01A9F2:                    ;           |
    LDA $9E,X                   ;$01A9F2    |\ 
    CMP.b #$1E                  ;$01A9F4    ||
    BNE Return01AA00            ;$01A9F6    || If killing sprite 1E (Lakitu), erase its cloud too.
    LDY.w $18E1                 ;$01A9F8    ||
    LDA.b #$1F                  ;$01A9FB    ||
    STA.w $1540,Y               ;$01A9FD    |/
Return01AA00:                   ;           |
    RTS                         ;$01AA00    |

CODE_01AA01:                    ;```````````| Sprite is not set to fall straight down when killed.
    LDY.w $14C8,X               ;$01AA01    |\ 
    STZ.w $1626,X               ;$01AA04    ||
    CPY.b #$08                  ;$01AA07    ||
    BEQ SetStunnedTimer         ;$01AA09    || Set the sprite as stationary/carryable.
CODE_01AA0B:                    ;           ||  If $C2 is non-zero or the sprite is coming from status 08, then also set the stun timer.
    LDA $C2,X                   ;$01AA0B    ||
    BNE SetStunnedTimer         ;$01AA0D    ||
    STZ.w $1540,X               ;$01AA0F    ||
    BRA SetAsStunned            ;$01AA12    |/

SetStunnedTimer:
    LDA.b #$02                  ;$01AA14    |\ 
    LDY $9E,X                   ;$01AA16    ||
    CPY.b #$0F                  ;$01AA18    || Set the stun timer to #$FF if...
    BEQ CODE_01AA28             ;$01AA1A    ||  - sprite 0D (Bob-omb)
    CPY.b #$11                  ;$01AA1C    ||  - sprite 0F (Goomba)
    BEQ CODE_01AA28             ;$01AA1E    ||  - sprite 11 (Buzzy Beetle)
    CPY.b #$A2                  ;$01AA20    ||  - sprite A2 (MechaKoopa) 
    BEQ CODE_01AA28             ;$01AA22    || For any other sprites, set it to #$02.
    CPY.b #$0D                  ;$01AA24    ||
    BNE CODE_01AA2A             ;$01AA26    |/
CODE_01AA28:                    ;           |
    LDA.b #$FF                  ;$01AA28    | How long to stun the four above sprites for when kicked/hit.
CODE_01AA2A:                    ;           |
    STA.w $1540,X               ;$01AA2A    |
SetAsStunned:                   ;           |
    LDA.b #$09                  ;$01AA2D    |\ Change to stationary/carryable status.
    STA.w $14C8,X               ;$01AA2F    |/
    RTS                         ;$01AA32    |



BoostMarioSpeed:                ;-----------| Routine to handle Mario's speed from bouncing off of an enemy.
    LDA $74                     ;$01AA33    |\ If climbing, don't bounce.
    BNE Return01AA41            ;$01AA35    |/
    LDA.b #$D0                  ;$01AA37    |\\ Speed Mario bounces off of an enemy without A being pressed.
    BIT $15                     ;$01AA39    ||
    BPL CODE_01AA3F             ;$01AA3B    ||
    LDA.b #$A8                  ;$01AA3D    ||| Speed Mario bounces off of an enemy with A pressed.
CODE_01AA3F:                    ;           ||
    STA $7D                     ;$01AA3F    |/
Return01AA41:                   ;           |
    RTL                         ;$01AA41    |



CODE_01AA42:                    ;-----------| Subroutine to handle Mario touching a carryable sprite.
    LDA.w $140D                 ;$01AA42    |\ 
    ORA.w $187A                 ;$01AA45    ||
    BEQ CODE_01AA58             ;$01AA48    || If...
    LDA $7D                     ;$01AA4A    ||  - Mario is spinjumping or on Yoshi
    BMI CODE_01AA58             ;$01AA4C    ||  - Mario is moving downwards
    LDA.w $1656,X               ;$01AA4E    ||  - the sprite can be jumped on
    AND.b #$10                  ;$01AA51    || Then kill the sprite in a cloud of smoke and return. (i.e, shells, goombas, etc.)
    BEQ CODE_01AA58             ;$01AA53    ||
    JMP CODE_01A924             ;$01AA55    |/

CODE_01AA58:
    LDA $15                     ;$01AA58    |\ 
    AND.b #$40                  ;$01AA5A    ||
    BEQ CODE_01AA74             ;$01AA5C    ||
    LDA.w $1470                 ;$01AA5E    || If...
    ORA.w $187A                 ;$01AA61    ||  - X and Y are held
    BNE CODE_01AA74             ;$01AA64    ||  - Mario is not carrying something or riding Yoshi
    LDA.b #$0B                  ;$01AA66    || Then have Mario pick up the sprite and return.
    STA.w $14C8,X               ;$01AA68    ||
    INC.w $1470                 ;$01AA6B    ||
    LDA.b #$08                  ;$01AA6E    ||
    STA.w $1498                 ;$01AA70    ||
    RTS                         ;$01AA73    |/


CODE_01AA74:
    LDA $9E,X                   ;$01AA74    |\ 
    CMP.b #$80                  ;$01AA76    || What do do when carryable sprites are touched by Mario.
    BEQ CODE_01AAB7             ;$01AA78    ||
    CMP.b #$3E                  ;$01AA7A    || If:
    BEQ CODE_01AAB2             ;$01AA7C    ||  - sprite 0D (Bob-Omb): kick it
    CMP.b #$0D                  ;$01AA7E    ||  - sprite 0F (Goomba): kick it, upwards slightly.
    BEQ CODE_01AA97             ;$01AA80    ||  - sprite 2D (baby Yoshi): kick it
    CMP.b #$2D                  ;$01AA82    ||  - sprite 3E (P-switch): make solid, handle pressing
    BEQ CODE_01AA97             ;$01AA84    ||  - sprite 80 (key): make solid
    CMP.b #$A2                  ;$01AA86    ||  - sprite A2 (MechaKoopa): kick it
    BEQ CODE_01AA97             ;$01AA88    ||  - others (shells): kick it and give points
    CMP.b #$0F                  ;$01AA8A    ||
    BNE CODE_01AA94             ;$01AA8C    |/
    LDA.b #$F0                  ;$01AA8E    |
    STA $AA,X                   ;$01AA90    |
    BRA CODE_01AA97             ;$01AA92    |



CODE_01AA94:                    ;```````````| Touching any other sprites (i.e. shells).
    JSR CODE_01AB46             ;$01AA94    | Give points.

CODE_01AA97:                    ;```````````| Touching a Bob-Omb, Baby Yoshi, Goomba, or MechaKoopa.
    JSR PlayKickSfx             ;$01AA97    |
    LDA.w $1540,X               ;$01AA9A    |
    STA $C2,X                   ;$01AA9D    |
    LDA.b #$0A                  ;$01AA9F    |\ Set kicked status.
    STA.w $14C8,X               ;$01AAA1    |/
    LDA.b #$10                  ;$01AAA4    |\ Disable contact with Mario for 16 frames.
    STA.w $154C,X               ;$01AAA6    |/
    JSR SubHorzPosBnk1          ;$01AAA9    |
    LDA.w KickSpeedX,Y          ;$01AAAC    |\ Set the sprite's X speed.
    STA $B6,X                   ;$01AAAF    |/
    RTS                         ;$01AAB1    |



CODE_01AAB2:                    ;```````````| Touching a P-switch.
    LDA.w $163E,X               ;$01AAB2    |\ Return no contact if pressed.
    BNE Return01AB2C            ;$01AAB5    |/

CODE_01AAB7:                    ;```````````| Touching a key.
    STZ.w $154C,X               ;$01AAB7    | (useless)
    LDA $D8,X                   ;$01AABA    |\ 
    SEC                         ;$01AABC    ||
    SBC $D3                     ;$01AABD    || If Mario's touching the bottom 8 pixels of the key, then he's hitting the side and should be pushed out (branch).
    CLC                         ;$01AABF    || If he's any higher, then he's hitting the top and should be pushed up (branch).
    ADC.b #$08                  ;$01AAC0    || Otherwise, just his head is inside and he should be pushed down.
    CMP.b #$20                  ;$01AAC2    ||
    BCC CODE_01AB31             ;$01AAC4    ||
    BPL CODE_01AACD             ;$01AAC6    |/
    LDA.b #$10                  ;$01AAC8    |\\ Y speed to give Mario if his head is inside.
    STA $7D                     ;$01AACA    |/
    RTS                         ;$01AACC    |

CODE_01AACD:                    ;```````````| Hitting the top of the key/P-switch.
    LDA $7D                     ;$01AACD    |\ Return if moving upwards.
    BMI Return01AB2C            ;$01AACF    |/
    STZ $7D                     ;$01AAD1    |\ 
    STZ $72                     ;$01AAD3    || Set Mario to be standing on top of a solid sprite.
    INC.w $1471                 ;$01AAD5    |/
    LDA.b #$1F                  ;$01AAD8    |\ 
    LDY.w $187A                 ;$01AADA    ||
    BEQ CODE_01AAE1             ;$01AADD    ||
    LDA.b #$2F                  ;$01AADF    ||
CODE_01AAE1:                    ;           ||
    STA $00                     ;$01AAE1    || Push Mario on top of the sprite.
    LDA $D8,X                   ;$01AAE3    ||
    SEC                         ;$01AAE5    ||
    SBC $00                     ;$01AAE6    ||
    STA $96                     ;$01AAE8    ||
    LDA.w $14D4,X               ;$01AAEA    ||
    SBC.b #$00                  ;$01AAED    ||
    STA $97                     ;$01AAEF    |/
    LDA $9E,X                   ;$01AAF1    |\ 
    CMP.b #$3E                  ;$01AAF3    || Return the key. Below code is for pressing P-switches only.
    BNE Return01AB2C            ;$01AAF5    |/
    ASL.w $167A,X               ;$01AAF7    |\ Disable default Mario interaction for the switch.
    LSR.w $167A,X               ;$01AAFA    |/
    LDA.b #$0B                  ;$01AAFD    |\ SFX for pressing a P-switch.
    STA.w $1DF9                 ;$01AAFF    |/
    LDA.w $0DDA                 ;$01AB02    |\ Don't change the music if it's already changed.
    BMI CODE_01AB0C             ;$01AB05    ||
    LDA.b #$0E                  ;$01AB07    ||\ SFX for the P-switch music.
    STA.w $1DFB                 ;$01AB09    |//
CODE_01AB0C:                    ;           |
    LDA.b #$20                  ;$01AB0C    |\ Set the P-switch to erase itself.
    STA.w $163E,X               ;$01AB0E    |/
    LSR.w $15F6,X               ;$01AB11    |\ Useless, unless you move the switch to GFX page 1.
    ASL.w $15F6,X               ;$01AB14    |/
    LDY.w $151C,X               ;$01AB17    | 
    LDA.b #$B0                  ;$01AB1A    |\\ How long the blue/silver P-switches last.
    STA.w $14AD,Y               ;$01AB1C    |/
    LDA.b #$20                  ;$01AB1F    |\\ How long Layer 1 shakes after hitting the switch.
    STA.w $1887                 ;$01AB21    |/
    CPY.b #$01                  ;$01AB24    |\ 
    BNE Return01AB2C            ;$01AB26    || If hitting a silver P-switch, turn all sprites into coins too.
    JSL CODE_02B9BD             ;$01AB28    |/
Return01AB2C:                   ;           |
    RTS                         ;$01AB2C    |


DATA_01AB2D:                    ;$01AB2D    | How quickly to push Mario to either side of the key/P-switch.
    db $01,$00,$FF,$FF

CODE_01AB31:                    ;```````````| Hitting the side of the key/P-switch.
    STZ $7B                     ;$01AB31    | Clear Mario's X speed.
    JSR SubHorzPosBnk1          ;$01AB33    |\ 
    TYA                         ;$01AB36    ||
    ASL                         ;$01AB37    ||
    TAY                         ;$01AB38    ||
    REP #$20                    ;$01AB39    || Push Mario to the side of the sprite.
    LDA $94                     ;$01AB3B    ||
    CLC                         ;$01AB3D    ||
    ADC.w DATA_01AB2D,Y         ;$01AB3E    ||
    STA $94                     ;$01AB41    ||
    SEP #$20                    ;$01AB43    |/
    RTS                         ;$01AB45    |



CODE_01AB46:                    ;-----------| Subroutine to handle points/sfx for bouncing off most enemies. Also used when bump-kicking shells.
    PHY                         ;$01AB46    |
    LDA.w $1697                 ;$01AB47    |\ 
    CLC                         ;$01AB4A    ||
    ADC.w $1626,X               ;$01AB4B    ||
    INC.w $1697                 ;$01AB4E    ||
    TAY                         ;$01AB51    || Increase Mario's bounce counter and play bounce SFX.
    INY                         ;$01AB52    ||
    CPY.b #$08                  ;$01AB53    ||
    BCS CODE_01AB5D             ;$01AB55    ||
    LDA.w DATA_01A61E-1,Y       ;$01AB57    ||
    STA.w $1DF9                 ;$01AB5A    |/
CODE_01AB5D:                    ;           |
    TYA                         ;$01AB5D    |\ 
    CMP.b #$08                  ;$01AB5E    ||
    BCC CODE_01AB64             ;$01AB60    || Give an appropriate number of points.
    LDA.b #$08                  ;$01AB62    ||
CODE_01AB64:                    ;           ||
    JSL GivePoints              ;$01AB64    |/
    PLY                         ;$01AB68    |
    RTS                         ;$01AB69    |



DATA_01AB6A:                    ;$01AB6A    | Unused?
    db $0C,$FC,$EC,$DC,$CC





DispContactSpr:                 ;-----------| Subroutine to display the "hit" graphic at a sprite's position.
    JSR PlayKickSfx             ;$01AB6F    |
CODE_01AB72:                    ;           |
    JSR IsSprOffScreen          ;$01AB72    |\ Return if offscreen.
    BNE Return01AB98            ;$01AB75    |/
    PHY                         ;$01AB77    |
    LDY.b #$03                  ;$01AB78    |\ 
CODE_01AB7A:                    ;           ||
    LDA.w $17C0,Y               ;$01AB7A    ||
    BEQ CODE_01AB83             ;$01AB7D    || Find an empty smoke sprite slot.
    DEY                         ;$01AB7F    ||
    BPL CODE_01AB7A             ;$01AB80    ||
    INY                         ;$01AB82    |/
CODE_01AB83:                    ;           |
    LDA.b #$02                  ;$01AB83    | Smoke sprite to display (contact graphic).
    STA.w $17C0,Y               ;$01AB85    |
    LDA $E4,X                   ;$01AB88    |\ 
    STA.w $17C8,Y               ;$01AB8A    || Spawn the smoke at the sprite's position.
    LDA $D8,X                   ;$01AB8D    ||
    STA.w $17C4,Y               ;$01AB8F    |/
    LDA.b #$08                  ;$01AB92    | How many frames the graphics lasts.
    STA.w $17CC,Y               ;$01AB94    |
    PLY                         ;$01AB97    |
Return01AB98:                   ;           |
    RTL                         ;$01AB98    |



DispContactMario:               ;-----------| Subroutine to display the "hit" graphic at Mario's position.
    JSR IsSprOffScreen          ;$01AB99    |
    BNE Return01ABCB            ;$01AB9C    |
    PHY                         ;$01AB9E    |
    LDY.b #$03                  ;$01AB9F    |\ 
CODE_01ABA1:                    ;           ||
    LDA.w $17C0,Y               ;$01ABA1    ||
    BEQ CODE_01ABAA             ;$01ABA4    || Find an empty smoke sprite slot.
    DEY                         ;$01ABA6    ||
    BPL CODE_01ABA1             ;$01ABA7    ||
    INY                         ;$01ABA9    |/
CODE_01ABAA:                    ;           |
    LDA.b #$02                  ;$01ABAA    | Smoke sprite to display (contact graphic).
    STA.w $17C0,Y               ;$01ABAC    |
    LDA $94                     ;$01ABAF    |\ Store player x position to the smoke sprite's.
    STA.w $17C8,Y               ;$01ABB1    |/
    LDA.w $187A                 ;$01ABB4    |
    CMP.b #$01                  ;$01ABB7    |
    LDA.b #$14                  ;$01ABB9    | Distance to offset the contact graphic from Mario when riding Yoshi.
    BCC CODE_01ABBF             ;$01ABBB    |
    LDA.b #$1E                  ;$01ABBD    | Distance to offset the contact graphic from Mario normally.
CODE_01ABBF:                    ;           |
    CLC                         ;$01ABBF    |
    ADC $96                     ;$01ABC0    |
    STA.w $17C4,Y               ;$01ABC2    |
    LDA.b #$08                  ;$01ABC5    | How many frames the graphic lasts.
    STA.w $17CC,Y               ;$01ABC7    |
    PLY                         ;$01ABCA    |
Return01ABCB:                   ;           |
    RTL                         ;$01ABCB    |





SubSprXPosNoGrvty:              ;-----------| Routine to update a sprite's X position using its current speed. JSL at $018022.
    TXA                         ;$01ABCC    |\ 
    CLC                         ;$01ABCD    ||
    ADC.b #$0C                  ;$01ABCE    || All this really does is run the routine below with a modified index.
    TAX                         ;$01ABD0    ||
    JSR SubSprYPosNoGrvty       ;$01ABD1    ||
    LDX.w $15E9                 ;$01ABD4    |/
    RTS                         ;$01ABD7    |

SubSprYPosNoGrvty:              ;-----------| Routine to update a sprite's Y position using its current speed (also used for X). JSL at $01801A.
    LDA $AA,X                   ;$01ABD8    |\ Return if speed is 0.
    BEQ CODE_01AC09             ;$01ABDA    |/
    ASL                         ;$01ABDC    |\ 
    ASL                         ;$01ABDD    ||
    ASL                         ;$01ABDE    ||
    ASL                         ;$01ABDF    || Update fraction bits.
    CLC                         ;$01ABE0    ||
    ADC.w $14EC,X               ;$01ABE1    ||
    STA.w $14EC,X               ;$01ABE4    |/
    PHP                         ;$01ABE7    |
    PHP                         ;$01ABE8    |
    LDY.b #$00                  ;$01ABE9    |\ 
    LDA $AA,X                   ;$01ABEB    ||
    LSR                         ;$01ABED    ||
    LSR                         ;$01ABEE    ||
    LSR                         ;$01ABEF    ||
    LSR                         ;$01ABF0    ||
    CMP.b #$08                  ;$01ABF1    ||
    BCC CODE_01ABF8             ;$01ABF3    ||
    ORA.b #$F0                  ;$01ABF5    || Update the actual position.
    DEY                         ;$01ABF7    ||
CODE_01ABF8:                    ;           ||
    PLP                         ;$01ABF8    ||
    PHA                         ;$01ABF9    ||
    ADC $D8,X                   ;$01ABFA    ||
    STA $D8,X                   ;$01ABFC    ||
    TYA                         ;$01ABFE    ||
    ADC.w $14D4,X               ;$01ABFF    ||
    STA.w $14D4,X               ;$01AC02    |/
    PLA                         ;$01AC05    |
    PLP                         ;$01AC06    |
    ADC.b #$00                  ;$01AC07    |\ 
CODE_01AC09:                    ;           || Keep track of how far the sprite has moved.
    STA.w $1491                 ;$01AC09    |/
    RTS                         ;$01AC0C    |





SpriteOffScreen1:               ;$01AC0D    | Low bytes of the vertical offscreen processing distances.
    db $40,$B0

SpriteOffScreen2:               ;$01AC0F    | High bytes of the vertical offscreen processing distances.
    db $01,$FF

SpriteOffScreen3:               ;$01AC11    | Low bytes of the horizontal offscreen processing distances.
    db $30,$C0,$A0,$C0,$A0,$F0,$60,$90

SpriteOffScreen4:               ;$01AC19    | High bytes of the horizontal offscreen processing distances.
    db $01,$FF,$01,$FF,$01,$FF,$01,$FF

SubOffscreen3Bnk1:              ;-----------| SubOffscreenX3 routine. Processes sprites offscreen from -$70 to +$60 ($0160,$FF90).
    LDA.b #$06                  ;$01AC21    |
    STA $03                     ;$01AC23    |
    BRA CODE_01AC2D             ;$01AC25    |

SubOffscreen2Bnk1:              ;-----------| SubOffscreenX2 routine. Processes sprites offscreen from -$10 to +$A0 ($01A0,$FFF0).
    LDA.b #$04                  ;$01AC27    |
    BRA CODE_01AC2D             ;$01AC29    |

SubOffscreen1Bnk1:              ;-----------| SubOffscreenX1 routine. Processes sprites offscreen from -$40 to +$A0 ($01A0,$FFC0).
    LDA.b #$02                  ;$01AC2B    |
CODE_01AC2D:                    ;           |
    STA $03                     ;$01AC2D    |
    BRA CODE_01AC33             ;$01AC2F    |

SubOffscreen0Bnk1:              ;-----------| SubOffscreenX0 routine. Processes sprites offscreen from -$40 to +$30 ($0130,$FFC0).
    STZ $03                     ;$01AC30    |
CODE_01AC33:                    ;           |
    JSR IsSprOffScreen          ;$01AC33    |\ Return if not offscreen.
    BEQ Return01ACA4            ;$01AC36    |/
    LDA $5B                     ;$01AC38    |\ 
    AND.b #$01                  ;$01AC3A    || Branch if in a vertical level.
    BNE OffscreenVertBnk1       ;$01AC3C    |/
    LDA $D8,X                   ;$01AC3E    |\ 
    CLC                         ;$01AC40    ||
    ADC.b #$50                  ;$01AC41    || Erase the sprite if below the level.
    LDA.w $14D4,X               ;$01AC43    ||
    ADC.b #$00                  ;$01AC46    ||
    CMP.b #$02                  ;$01AC48    ||
    BPL OffScrEraseSprite       ;$01AC4A    |/
    LDA.w $167A,X               ;$01AC4C    |\ 
    AND.b #$04                  ;$01AC4F    || Return if set to process offscreen.
    BNE Return01ACA4            ;$01AC51    |/
    LDA $13                     ;$01AC53    |\ 
    AND.b #$01                  ;$01AC55    ||
    ORA $03                     ;$01AC57    ||
    STA $01                     ;$01AC59    ||
    TAY                         ;$01AC5B    ||
    LDA $1A                     ;$01AC5C    ||
    CLC                         ;$01AC5E    ||
    ADC.w SpriteOffScreen3,Y    ;$01AC5F    ||
    ROL $00                     ;$01AC62    ||
    CMP $E4,X                   ;$01AC64    || Check if within the horizontal bounds specified by the routine call. Alternates sides each frame.
    PHP                         ;$01AC66    ||  If it is within the bounds (i.e. onscreen), return.
    LDA $1B                     ;$01AC67    ||
    LSR $00                     ;$01AC69    ||
    ADC.w SpriteOffScreen4,Y    ;$01AC6B    ||
    PLP                         ;$01AC6E    ||
    SBC.w $14E0,X               ;$01AC6F    ||
    STA $00                     ;$01AC72    ||
    LSR $01                     ;$01AC74    ||
    BCC CODE_01AC7C             ;$01AC76    ||
    EOR.b #$80                  ;$01AC78    ||
    STA $00                     ;$01AC7A    ||
CODE_01AC7C:                    ;           ||
    LDA $00                     ;$01AC7C    ||
    BPL Return01ACA4            ;$01AC7E    |/
OffScrEraseSprite:              ;```````````| Subroutine to erase a sprite when offscreen.
    LDA $9E,X                   ;$01AC80    |\ 
    CMP.b #$1F                  ;$01AC82    ||
    BNE CODE_01AC8E             ;$01AC84    || If sprite 1F (MagiKoopa), just make
    STA.w $18C1                 ;$01AC86    || it look for a new position again.
    LDA.b #$FF                  ;$01AC89    ||
    STA.w $18C0                 ;$01AC8B    |/
CODE_01AC8E:                    ;           |
    LDA.w $14C8,X               ;$01AC8E    |\ 
    CMP.b #$08                  ;$01AC91    ||
    BCC OffScrKillSprite        ;$01AC93    ||
    LDY.w $161A,X               ;$01AC95    ||
    CPY.b #$FF                  ;$01AC98    || Erase the sprite.
    BEQ OffScrKillSprite        ;$01AC9A    ||  If it wasn't killed, set it to respawn.
    LDA.b #$00                  ;$01AC9C    ||
    STA.w $1938,Y               ;$01AC9E    ||
OffScrKillSprite:               ;           ||
    STZ.w $14C8,X               ;$01ACA1    |/
Return01ACA4:                   ;           |
    RTS                         ;$01ACA4    |

OffscreenVertBnk1:              ;```````````| Offscreen routine for a vertical level.
    LDA.w $167A,X               ;$01ACA5    |\ 
    AND.b #$04                  ;$01ACA8    || Return if set to process offscreen.
    BNE Return01ACA4            ;$01ACAA    |/
    LDA $13                     ;$01ACAC    |\ 
    LSR                         ;$01ACAE    || Process every other frame.
    BCS Return01ACA4            ;$01ACAF    |/
    LDA $E4,X                   ;$01ACB1    |\ 
    CMP.b #$00                  ;$01ACB3    ||
    LDA.w $14E0,X               ;$01ACB5    || Erase the sprite if off either side of the level.
    SBC.b #$00                  ;$01ACB8    ||
    CMP.b #$02                  ;$01ACBA    ||
    BCS OffScrEraseSprite       ;$01ACBC    |/
    LDA $13                     ;$01ACBE    |\ 
    LSR                         ;$01ACC0    ||
    AND.b #$01                  ;$01ACC1    ||
    STA $01                     ;$01ACC3    ||
    TAY                         ;$01ACC5    ||
    BEQ CODE_01ACD2             ;$01ACC6    ||
    LDA $9E,X                   ;$01ACC8    ||
    CMP.b #$22                  ;$01ACCA    ||
    BEQ Return01ACA4            ;$01ACCC    ||
    CMP.b #$24                  ;$01ACCE    ||
    BEQ Return01ACA4            ;$01ACD0    ||
CODE_01ACD2:                    ;           ||
    LDA $1C                     ;$01ACD2    || Check if within the vertical bounds of the screen. Alternates sides each frame.
    CLC                         ;$01ACD4    ||  If it is within the bounds (i.e. onscreen), return.
    ADC.w SpriteOffScreen1,Y    ;$01ACD5    ||
    ROL $00                     ;$01ACD8    || Sprite 22 and sprite 24 (green net Koopas) will not despawn off the top of the screen.
    CMP $D8,X                   ;$01ACDA    ||  (was probably intended to sprite 23 instead of 24)
    PHP                         ;$01ACDC    ||
    LDA.w $1D                   ;$01ACDD    ||
    LSR $00                     ;$01ACE0    ||
    ADC.w SpriteOffScreen2,Y    ;$01ACE2    ||
    PLP                         ;$01ACE5    ||
    SBC.w $14D4,X               ;$01ACE6    ||
    STA $00                     ;$01ACE9    ||
    LDY $01                     ;$01ACEB    ||
    BEQ CODE_01ACF3             ;$01ACED    ||
    EOR.b #$80                  ;$01ACEF    ||
    STA $00                     ;$01ACF1    ||
CODE_01ACF3:                    ;           ||
    LDA $00                     ;$01ACF3    ||
    BPL Return01ACA4            ;$01ACF5    ||
    BMI OffScrEraseSprite       ;$01ACF7    |/





GetRand:                        ;-----------| Random number generation routine. Outputs in $148C/$148D (returns $148C)
    PHY                         ;$01ACF9    |
    LDY.b #$01                  ;$01ACFA    |
    JSL CODE_01AD07             ;$01ACFC    | Run RNG for high byte.
    DEY                         ;$01AD00    |
    JSL CODE_01AD07             ;$01AD01    | Run RNG for low byte.
    PLY                         ;$01AD05    |
    RTL                         ;$01AD06    |

CODE_01AD07:
    LDA.w $148B                 ;$01AD07    |\ 
    ASL                         ;$01AD0A    ||
    ASL                         ;$01AD0B    || With a = $148B:
    SEC                         ;$01AD0C    ||  a = 5a + 1;
    ADC.w $148B                 ;$01AD0D    ||
    STA.w $148B                 ;$01AD10    |/
    ASL.w $148C                 ;$01AD13    |\ 
    LDA.b #$20                  ;$01AD16    ||
    BIT.w $148C                 ;$01AD18    || With b = $148C:
    BCC CODE_01AD21             ;$01AD1B    ||  if (b.4 == b.7) {
    BEQ CODE_01AD26             ;$01AD1D    ||    b = 2b + 1;
    BNE CODE_01AD23             ;$01AD1F    ||  } else {
CODE_01AD21:                    ;           ||    b = 2b;
    BNE CODE_01AD26             ;$01AD21    ||  }
CODE_01AD23:                    ;           ||
    INC.w $148C                 ;$01AD23    |/
CODE_01AD26:                    ;           |
    LDA.w $148C                 ;$01AD26    |\ 
    EOR.w $148B                 ;$01AD29    || Invert byte b with byte a and output the result.
    STA.w $148D,Y               ;$01AD2C    |/
    RTL                         ;$01AD2F    |





    ; Equivalent routine in bank 2 at $02848D, bank 3 at $03B817.
    ;  Curiously, this one uses $D1, while the others use $94.
SubHorzPosBnk1:                 ;-----------| Subroutine to check horizontal proximity of Mario to a sprite.
    LDY.b #$00                  ;$01AD30    |  Returns the side in Y (0 = right) and distance in $0F.
    LDA $D1                     ;$01AD32    |
    SEC                         ;$01AD34    |
    SBC $E4,X                   ;$01AD35    |
    STA $0F                     ;$01AD37    |
    LDA $D2                     ;$01AD39    |
    SBC.w $14E0,X               ;$01AD3B    |
    BPL Return01AD41            ;$01AD3E    |
    INY                         ;$01AD40    |
Return01AD41:                   ;           |
    RTS                         ;$01AD41    |





    ; Equivalent routine in bank 2 at $02D50C, and bank 3 at $03B829.
SubVertPosBnk1:                 ;-----------| Subroutine to check vertical proximity of Mario to a sprite.
    LDY.b #$00                  ;$01AD42    |  Returns the side in Y (0 = below) and distance in $0E.
    LDA $D3                     ;$01AD44    |
    SEC                         ;$01AD46    |
    SBC $D8,X                   ;$01AD47    |
    STA $0E                     ;$01AD49    |
    LDA $D4                     ;$01AD4B    |
    SBC.w $14D4,X               ;$01AD4D    |
    BPL Return01AD53            ;$01AD50    |
    INY                         ;$01AD52    |
Return01AD53:                   ;           |
    RTS                         ;$01AD53    |



Empty01AD54:
    db $FF,$FF,$FF,$FF,$FF





InitFlyingQBlock:               ;-----------| Flying question block INIT
    LDA $E4,X                   ;$01AD5C    |\ 
    LSR                         ;$01AD5B    ||
    LSR                         ;$01AD5C    ||
    LSR                         ;$01AD5D    || Preserve spawn X position %4 for deciding what sprite to contain.
    LSR                         ;$01AD5E    ||
    AND.b #$03                  ;$01AD5F    ||
    STA.w $151C,X               ;$01AD61    |/
    INC.w $157C,X               ;$01AD64    | Set the sprite to face left.
    RTS                         ;$01AD67    |



DATA_01AD68:                    ;$01AD68    | X/Y speed accelerations for the flying ? block.
    db $FF,$01

DATA_01AD6A:                    ;$01AD6A    | Maximum Y speeds for the flying ? block.
    db $F4,$0C

DATA_01AD6C:                    ;$01AD6C    | Maximum X speeds for the flying ? block.
    db $F0,$10

    ; Flying Question Block misc RAM:
    ; $C2   - Indicator that the block has been hit. When 1, it bounces up, and when 2, it comes back down.
    ; $151C - Which item to spawn when hit (coin, fireflower, feather, 1up). When small, an additional 4 gets added to this.
    ; $1528 - How many pixels the sprite has moved horizontally in the frame.
    ; $1534 - Direction of horizontal acceleration. Even = left, odd = right
    ; $1558 - Set to #$10 when hit for the first time. (bounce animation timer)
    ; $1564 - Set to #$10 when hit.
    ; $1570 - Frame counter for animation.
    ; $157C - Horizontal direction the sprite is facing. Always set to 1.
    ; $1594 - Direction of acceleration. Even = up, odd = down.
    ; $163E - Timer for a sprite rising out of the block. Set to #$50 when the sprite is spawned.

FlyingQBlock:                   ;-----------| Flying question block MAIN
    LDA.w $163E,X               ;$01AD6E    |\ 
    BEQ CODE_01AD80             ;$01AD71    || Change OAM index if necessary.
    STZ.w $15EA,X               ;$01AD73    || While spawning something, it becomes either #$04 (no Yoshi) or #$00 (with Yoshi).
    LDA.w $187A                 ;$01AD76    ||  (because Yoshi uses #$04 while turning)
    BNE CODE_01AD80             ;$01AD79    || However, this causes glitches with multiple blocks, or turning with an item.
    LDA.b #$04                  ;$01AD7B    ||
    STA.w $15EA,X               ;$01AD7D    |/
CODE_01AD80:                    ;           |
    JSR SubSprGfx2Entry1        ;$01AD80    | Draw a 16x16 sprite.
    LDY.w $15EA,X               ;$01AD83    |
    LDA.w $0301,Y               ;$01AD86    |\ 
    DEC A                       ;$01AD89    || Shift the sprite one tile up.
    STA.w $0301,Y               ;$01AD8A    |/
    STZ.w $1528,X               ;$01AD8D    |
    LDA $C2,X                   ;$01AD90    |\ Don't move or draw wings if the block has been hit.
    BNE CODE_01ADF8             ;$01AD92    |/
    JSR CODE_019E95             ;$01AD94    | Draw wings.
    LDA $9D                     ;$01AD97    |\ Don't move if the game is frozen.
    BNE CODE_01ADF8             ;$01AD99    |/
    LDA $13                     ;$01AD9B    |\\ 
    AND.b #$01                  ;$01AD9D    ||| Only change Y speed every other frame.
    BNE CODE_01ADB7             ;$01AD9F    ||/
    LDA.w $1594,X               ;$01ADA1    ||\ 
    AND.b #$01                  ;$01ADA4    |||
    TAY                         ;$01ADA6    |||
    LDA $AA,X                   ;$01ADA7    |||
    CLC                         ;$01ADA9    ||| Handle Y speed acceleration.
    ADC.w DATA_01AD68,Y         ;$01ADAA    |||
    STA $AA,X                   ;$01ADAD    |||
    CMP.w DATA_01AD6A,Y         ;$01ADAF    |||
    BNE CODE_01ADB7             ;$01ADB2    |||
    INC.w $1594,X               ;$01ADB4    |//
CODE_01ADB7:                    ;           |
    JSR SubSprYPosNoGrvty       ;$01ADB7    | Update Y position.
    LDA $9E,X                   ;$01ADBA    |\ 
    CMP.b #$83                  ;$01ADBC    || Branch if not sprite 84.
    BEQ CODE_01ADE8             ;$01ADBE    |/
    LDA.w $1540,X               ;$01ADC0    |\\ 
    BNE CODE_01ADE6             ;$01ADC3    |||
    LDA $13                     ;$01ADC5    ||| Only change X speed every frame frame, and don't update for a brief time at max speed.
    AND.b #$03                  ;$01ADC7    |||
    BNE CODE_01ADE6             ;$01ADC9    ||/
    LDA.w $1534,X               ;$01ADCB    ||\ 
    AND.b #$01                  ;$01ADCE    |||
    TAY                         ;$01ADD0    |||
    LDA $B6,X                   ;$01ADD1    |||
    CLC                         ;$01ADD3    ||| Handle X speed acceleration.
    ADC.w DATA_01AD68,Y         ;$01ADD4    |||
    STA $B6,X                   ;$01ADD7    |||
    CMP.w DATA_01AD6C,Y         ;$01ADD9    |||
    BNE CODE_01ADE6             ;$01ADDC    |||
    INC.w $1534,X               ;$01ADDE    ||/
    LDA.b #$20                  ;$01ADE1    || How long to fly at max speed for.
    STA.w $1540,X               ;$01ADE3    |/
CODE_01ADE6:                    ;           |
    BRA CODE_01ADEC             ;$01ADE6    |

CODE_01ADE8:
    LDA.b #$F4                  ;$01ADE8    |\ Sprite 83: move left at a constant rate.
    STA $B6,X                   ;$01ADEA    |/
CODE_01ADEC:                    ;           |
    JSR SubSprXPosNoGrvty       ;$01ADEC    | Update X position.
    LDA.w $1491                 ;$01ADEF    |\ Preserve how many pixels the block has moved.
    STA.w $1528,X               ;$01ADF2    |/
    INC.w $1570,X               ;$01ADF5    | Handle animation timer.
CODE_01ADF8:                    ;           |
    JSR SubSprSprInteract       ;$01ADF8    | Process interaction with other sprites.
    JSR CODE_01B457             ;$01ADFB    | Make the block solid.
    JSR SubOffscreen0Bnk1       ;$01ADFE    | Process offscreen from -$40 to +$30.
    LDA.w $1558,X               ;$01AE01    |\ 
    CMP.b #$08                  ;$01AE04    ||
    BNE CODE_01AE5E             ;$01AE06    || Branch if the block is not exactly halfway through the hit animation.
    LDY $C2,X                   ;$01AE08    ||
    CPY.b #$02                  ;$01AE0A    ||
    BEQ CODE_01AE5E             ;$01AE0C    |/
    PHA                         ;$01AE0E    |
    INC $C2,X                   ;$01AE0F    |
    LDA.b #$50                  ;$01AE11    |\ Set the sprite spawn timer.
    STA.w $163E,X               ;$01AE13    |/
    LDA $E4,X                   ;$01AE16    |\ 
    STA $9A                     ;$01AE18    ||
    LDA.w $14E0,X               ;$01AE1A    ||
    STA $9B                     ;$01AE1D    || Set the sprite to spawn at the ? block's position.
    LDA $D8,X                   ;$01AE1F    ||
    STA $98                     ;$01AE21    ||
    LDA.w $14D4,X               ;$01AE23    ||
    STA $99                     ;$01AE26    |/
    LDA.b #$FF                  ;$01AE28    |\ Prevent the ? block from respawning.
    STA.w $161A,X               ;$01AE2A    |/
    LDY.w $151C,X               ;$01AE2D    |\ 
    LDA $19                     ;$01AE30    ||
    BNE CODE_01AE38             ;$01AE32    ||
    INY                         ;$01AE34    || If Mario doesn't have a powerup, increase index by 4.
    INY                         ;$01AE35    ||
    INY                         ;$01AE36    ||
    INY                         ;$01AE37    |/
CODE_01AE38:                    ;           |
    LDA.w DATA_01AE88,Y         ;$01AE38    |\ Get index for the sprite to spawn from the block.
    STA $05                     ;$01AE3B    |/
    PHB                         ;$01AE3D    |
    LDA.b #$02                  ;$01AE3E    |\ 
    PHA                         ;$01AE40    ||
    PLB                         ;$01AE41    || Spawn the sprite.
    PHX                         ;$01AE42    ||
    JSL CODE_02887D             ;$01AE43    ||
    PLX                         ;$01AE47    |/
    LDY.w $185E                 ;$01AE48    |\ Prevent the powerup from appearing behind FG objects while rising.
    LDA.b #$01                  ;$01AE4B    || Note: if the block is spawning a coin, this causes glitches because $185E is uninitialized!
    STA.w $1528,Y               ;$01AE4D    |/
    LDA.w $009E,Y               ;$01AE50    |\ 
    CMP.b #$75                  ;$01AE53    ||
    BNE CODE_01AE5C             ;$01AE55    || If spawning the fireflower, set it to stay still on top of the sprite.
    LDA.b #$FF                  ;$01AE57    ||
    STA.w $C2,Y                 ;$01AE59    |/
CODE_01AE5C:                    ;           |
    PLB                         ;$01AE5C    |
    PLA                         ;$01AE5D    |
CODE_01AE5E:                    ;           |
    LSR                         ;$01AE5E    |\ 
    TAY                         ;$01AE5F    ||
    LDA.w DATA_01AE7F,Y         ;$01AE60    ||
    STA $00                     ;$01AE63    ||
    LDY.w $15EA,X               ;$01AE65    || Handle the bounce animation for the block when hit.
    LDA.w $0301,Y               ;$01AE68    ||
    SEC                         ;$01AE6B    ||
    SBC $00                     ;$01AE6C    ||
    STA.w $0301,Y               ;$01AE6E    |/
    LDA $C2,X                   ;$01AE71    |
    CMP.b #$01                  ;$01AE73    |
    LDA.b #$2A                  ;$01AE75    || Tile to use for the block normally (? block).
    BCC CODE_01AE7B             ;$01AE77    |
    LDA.b #$2E                  ;$01AE79    || Tile to use when the block is hit (brown block).
CODE_01AE7B:                    ;           |
    STA.w $0302,Y               ;$01AE7B    |
    RTS                         ;$01AE7E    |


DATA_01AE7F:                    ;$01AE7F    | How much to shift the flying ? block each frame of its bounce animation.
    db $00,$03,$05,$07,$08,$08,$07,$05
    db $03

DATA_01AE88:                    ;$01AE88    | Sprites for the flying ? block to spawn, corresponding to $0288A3.
    db $06,$02,$04,$05          ; If Mario is big
    db $06,$01,$01,$05          ; If Mario is small





Return01AE90:                   ;-----------| Flat switch palace switch INIT
    RTS                         ;$01AE90    |

PalaceSwitch:                   ;-----------| Flat switch palace switch redirect
    JSL CODE_02CD2D             ;$01AE91    |
    RTS                         ;$01AE95    |





InitThwomp:                     ;-----------| Thwomp INIT
    LDA $D8,X                   ;$01AE96    |\ Preserve spawn Y position.
    STA.w $151C,X               ;$01AE98    |/
    LDA $E4,X                   ;$01AE9B    |\ 
    CLC                         ;$01AE9D    || Offset X position.
    ADC.b #$08                  ;$01AE9E    ||
    STA $E4,X                   ;$01AEA0    |/
Return01AEA2:                   ;           |
    RTS                         ;$01AEA2    |

    ; Thwomp misc RAM:
    ; $C2   - Current phase. 00 = waiting, 01 = falling, 02 = on ground/rising
    ; $151C - Height to rise up until. No high byte exists.
    ; $1528 - Animation frame for the Thwomp's face.
    ;          0 = normal, 1 = glaring, 2 = angry
    ; $1540 - Timer after smashing the ground to wait before rising up again.
    ; $154C - Timer for disabling contact with Mario. Set to #$08 when touched.
    ; $157C - Which side of the Thwomp that Mario is on. Only set while waiting for Mario to come close.


Thwomp:                         ;-----------| Thwomp MAIN
    JSR ThwompGfx               ;$01AEA3    | Draw graphics.
    LDA.w $14C8,X               ;$01AEA6    |\ 
    CMP.b #$08                  ;$01AEA9    ||
    BNE Return01AEA2            ;$01AEAB    || Return if dying or the game is frozen.
    LDA $9D                     ;$01AEAD    ||
    BNE Return01AEA2            ;$01AEAF    |/
    JSR SubOffscreen0Bnk1       ;$01AEB1    | Process offscreen from -$40 to +$30.
    JSR MarioSprInteractRt      ;$01AEB4    |
    LDA $C2,X                   ;$01AEB7    |
    JSL ExecutePtr              ;$01AEB9    |

ThwompStatePtrs:                ;$01AEBD    | Pointers to the different phases of the Thwomp.
    dw CODE_01AEC3              ; 00 - Waiting for Mario
    dw CODE_01AEFA              ; 01 - Falling
    dw CODE_01AF24              ; 02 - On ground/rising



CODE_01AEC3:                    ;-----------| Thwomp phase 0 - waiting for Mario
    LDA.w $186C,X               ;$01AEC3    |\ Make the Thwomp always fall if vertically offscreen.
    BNE CODE_01AEEE             ;$01AEC6    |/
    LDA.w $15A0,X               ;$01AEC8    |\ Never fall if offscreen horizontally.
    BNE Return01AEF9            ;$01AECB    |/
    JSR SubHorzPosBnk1          ;$01AECD    |\  
    TYA                         ;$01AED0    || Keep track of which side Mario is on.
    STA.w $157C,X               ;$01AED1    |/
    STZ.w $1528,X               ;$01AED4    |\ 
    LDA $0F                     ;$01AED7    || Handle the animation frame.
    CLC                         ;$01AED9    ||
    ADC.b #$40                  ;$01AEDA    ||\ Range around the sprite that Mario has to be for the Thwomp to glare at him.
    CMP.b #$80                  ;$01AEDC    ||/
    BCS CODE_01AEE5             ;$01AEDE    ||
    LDA.b #$01                  ;$01AEE0    ||| Animation frame to use when Mario is close to the Thwomp.
    STA.w $1528,X               ;$01AEE2    |/
CODE_01AEE5:                    ;           |
    LDA $0F                     ;$01AEE5    |\ Check if Mario is close enough to drop.
    CLC                         ;$01AEE7    ||
    ADC.b #$24                  ;$01AEE8    ||\ Range around the Thwomp that Mario has to be for it to fall.
    CMP.b #$50                  ;$01AEEA    ||/
    BCS Return01AEF9            ;$01AEEC    |/
CODE_01AEEE:                    ;           |
    LDA.b #$02                  ;$01AEEE    |\\ Animation frame to use when the Thwomp is falling.
    STA.w $1528,X               ;$01AEF0    ||
    INC $C2,X                   ;$01AEF3    || Set the sprite to start falling.
    LDA.b #$00                  ;$01AEF5    ||
    STA $AA,X                   ;$01AEF7    |/
Return01AEF9:                   ;           |
    RTS                         ;$01AEF9    |



CODE_01AEFA:                    ;-----------| Thwomp phase 1 - falling
    JSR SubSprYPosNoGrvty       ;$01AEFA    |
    LDA $AA,X                   ;$01AEFD    | 
    CMP.b #$3E                  ;$01AEFF    || Max falling speed for the Thwomp.
    BCS CODE_01AF07             ;$01AF01    |
    ADC.b #$04                  ;$01AF03    || Acceleration of the Thwomp.
    STA $AA,X                   ;$01AF05    |
CODE_01AF07:                    ;           |
    JSR CODE_019140             ;$01AF07    |\ 
    JSR IsOnGround              ;$01AF0A    || If the thwomp hasn't hit a block, return.
    BEQ Return01AF23            ;$01AF0D    |/
    JSR SetSomeYSpeed           ;$01AF0F    | Set ground Y speed.
    LDA.b #$18                  ;$01AF12    || Time to shake the screen.
    STA.w $1887                 ;$01AF14    |
    LDA.b #$09                  ;$01AF17    |\ SFX for the Thwomp hitting the ground.
    STA.w $1DFC                 ;$01AF19    |/
    LDA.b #$40                  ;$01AF1C    || How long to wait on the ground.
    STA.w $1540,X               ;$01AF1E    |
    INC $C2,X                   ;$01AF21    |
Return01AF23:                   ;           |
    RTS                         ;$01AF23    |



CODE_01AF24:                    ;-----------| Thwomp phase 2 - on ground/rising
    LDA.w $1540,X               ;$01AF24    |\ Return if waiting on the ground.
    BNE Return01AF3F            ;$01AF27    |/
    STZ.w $1528,X               ;$01AF29    |
    LDA $D8,X                   ;$01AF2C    |\ 
    CMP.w $151C,X               ;$01AF2E    ||
    BNE CODE_01AF38             ;$01AF31    || If the Thwomp reaches its spawn height, return to phase 0.
    LDA.b #$00                  ;$01AF33    ||
    STA $C2,X                   ;$01AF35    |/
    RTS                         ;$01AF37    |

CODE_01AF38:
    LDA.b #$F0                  ;$01AF38    || Speed to rise up at.
    STA $AA,X                   ;$01AF3A    |
    JSR SubSprYPosNoGrvty       ;$01AF3C    |
Return01AF3F:                   ;           |
    RTS                         ;$01AF3F    |



ThwompDispX:                    ;$01AF40    | X position offsets for each of the Thwomp's tiles.
    db $FC,$04,$FC,$04,$00                  ; Fifth byte is used only when the Thwomp isn't using its normal expression. Same for the below.

ThwompDispY:                    ;$01AF45    | Y position offsets for each of the Thwomp's tiles.
    db $00,$00,$10,$10,$08

ThwompTiles:                    ;$01AF4A    | Tile numbers for the Thwomp.
    db $8E,$8E,$AE,$AE,$C8

ThwompGfxProp:                  ;$01AF4F    | YXPPCCCT for each of the Thwomp's tiles.
    db $03,$43,$03,$43,$03

ThwompGfx:                      ;-----------| GFX subroutine for the Thwomp.
    JSR GetDrawInfoBnk1         ;$01AF54    |
    LDA.w $1528,X               ;$01AF57    |
    STA $02                     ;$01AF5A    |
    PHX                         ;$01AF5C    |
    LDX.b #$03                  ;$01AF5D    |\\ 
    CMP.b #$00                  ;$01AF5F    ||| Upload 4 tiles. If not using the default facial expression, upload a fifth one.
    BEQ CODE_01AF64             ;$01AF61    |||
    INX                         ;$01AF63    ||/
CODE_01AF64:                    ;           ||
    LDA $00                     ;$01AF64    ||\ 
    CLC                         ;$01AF66    |||
    ADC.w ThwompDispX,X         ;$01AF67    |||
    STA.w $0300,Y               ;$01AF6A    ||| Upload X and Y position.
    LDA $01                     ;$01AF6D    |||
    CLC                         ;$01AF6F    |||
    ADC.w ThwompDispY,X         ;$01AF70    |||
    STA.w $0301,Y               ;$01AF73    ||/
    LDA.w ThwompGfxProp,X       ;$01AF76    ||\ 
    ORA $64                     ;$01AF79    ||| Upload YXPPCCCT.
    STA.w $0303,Y               ;$01AF7B    ||/
    LDA.w ThwompTiles,X         ;$01AF7E    ||\ 
    CPX.b #$04                  ;$01AF81    |||
    BNE CODE_01AF8F             ;$01AF83    |||
    PHX                         ;$01AF85    |||
    LDX $02                     ;$01AF86    ||| Upload the tile number.
    CPX.b #$02                  ;$01AF88    |||
    BNE CODE_01AF8E             ;$01AF8A    |||
    LDA.b #$CA                  ;$01AF8C    |||| Tile number to use for the angry Thwomp's face.
CODE_01AF8E:                    ;           |||
    PLX                         ;$01AF8E    |||
CODE_01AF8F:                    ;           |||
    STA.w $0302,Y               ;$01AF8F    ||/
    INY                         ;$01AF92    ||
    INY                         ;$01AF93    ||
    INY                         ;$01AF94    ||
    INY                         ;$01AF95    ||
    DEX                         ;$01AF96    ||
    BPL CODE_01AF64             ;$01AF97    |/
    PLX                         ;$01AF99    |
    LDA.b #$04                  ;$01AF9A    |\ Draw 5 16x16 tiles.
    JMP CODE_01B37E             ;$01AF9C    |/





    ; Thwimp misc RAM:
    ; $C2   - Which way to jump. Even = right, odd = left.
    ; $1540 - Timer for waitiing to jump.
    ; $154C - Timer for disabling contact with Mario. Set to #$08 when touched.
    ; $157C - Horizontal direction the sprite is facing. Not actually updated by the sprite; instead, only when Mario takes damage from it.

Thwimp:                         ;-----------| Thwimp MAIN
    LDA.w $14C8,X               ;$01AF9F    |\ 
    CMP.b #$08                  ;$01AFA2    ||
    BNE CODE_01B006             ;$01AFA4    || If dying or the game is frozen, just draw graphics.
    LDA $9D                     ;$01AFA6    ||
    BNE CODE_01B006             ;$01AFA8    |/
    JSR SubOffscreen0Bnk1       ;$01AFAA    | Process offscreen from -$40 to +$30.
    JSR MarioSprInteractRt      ;$01AFAD    |
    JSR SubSprXPosNoGrvty       ;$01AFB0    |
    JSR SubSprYPosNoGrvty       ;$01AFB3    |
    JSR CODE_019140             ;$01AFB6    | Interact with blocks.
    LDA $AA,X                   ;$01AFB9    |\ Apply gravity.
    BMI CODE_01AFC3             ;$01AFBB    ||
    CMP.b #$40                  ;$01AFBD    ||| Max falling Y speed.
    BCS CODE_01AFC8             ;$01AFBF    ||
    ADC.b #$05                  ;$01AFC1    ||| Additional acceleration while falling.
CODE_01AFC3:                    ;           ||
    CLC                         ;$01AFC3    ||
    ADC.b #$03                  ;$01AFC4    ||| Base acceleration. Used throughout the jump.
    BRA CODE_01AFCA             ;$01AFC6    ||
CODE_01AFC8:                    ;           ||
    LDA.b #$40                  ;$01AFC8    ||| Y speed to give when at max falling speed.
CODE_01AFCA:                    ;           ||
    STA $AA,X                   ;$01AFCA    |/
    JSR IsTouchingCeiling       ;$01AFCC    |\ 
    BEQ CODE_01AFD5             ;$01AFCF    || If it hits a ceiling, knock it back down.
    LDA.b #$10                  ;$01AFD1    ||
    STA $AA,X                   ;$01AFD3    |/
CODE_01AFD5:                    ;           |
    JSR IsOnGround              ;$01AFD5    |\ If the Thwimp is on the ground, return to draw graphics.
    BEQ CODE_01B006             ;$01AFD8    |/
    JSR SetSomeYSpeed           ;$01AFDA    |
    STZ $B6,X                   ;$01AFDD    |\ Clear X and Y speed.
    STZ $AA,X                   ;$01AFDF    |/
    LDA.w $1540,X               ;$01AFE1    |\ 
    BEQ CODE_01AFFC             ;$01AFE4    || Branch if the wait timer is zero, as it has just hit the ground.
    DEC A                       ;$01AFE6    || If the wait timer is one, then it's time to jump. Else, branch to just draw graphics.
    BNE CODE_01B006             ;$01AFE7    |/
    LDA.b #$A0                  ;$01AFE9    || Y speed to give at the start of the Thwimp's jump.
    STA $AA,X                   ;$01AFEB    |
    INC $C2,X                   ;$01AFED    |
    LDA $C2,X                   ;$01AFEF    |\ 
    LSR                         ;$01AFF1    || Set X speed.
    LDA.b #$10                  ;$01AFF2    ||| X speed when jumping right.
    BCC CODE_01AFF8             ;$01AFF4    ||
    LDA.b #$F0                  ;$01AFF6    ||| X speed when jumping left.
CODE_01AFF8:                    ;           ||
    STA $B6,X                   ;$01AFF8    |/
    BRA CODE_01B006             ;$01AFFA    |

CODE_01AFFC:
    LDA.b #$01                  ;$01AFFC    |\ SFX for hitting the ground.
    STA.w $1DF9                 ;$01AFFE    |/
    LDA.b #$40                  ;$01B001    || How long to wait before jumping.
    STA.w $1540,X               ;$01B003    |
CODE_01B006:                    ;           |
    LDA.b #$01                  ;$01B006    |\ Draw 4 16x16 tiles.
    JMP SubSprGfx0Entry0        ;$01B008    |/





InitVerticalFish:               ;-----------| Vertical fish INIT
    JSR FaceMario               ;$01B00B    |\ Face Mario and tell it to move vertically.
    INC.w $151C,X               ;$01B00E    |/
Return01B011:                   ;           |
    RTS                         ;$01B011    |



DATA_01B012:                    ;$01B012    | Initial X speeds for the horizontal fish.
    db $10,$F0

InitFish:                       ;-----------| Fish INIT (also generated and jumping fish)
    JSR SubHorzPosBnk1          ;$01B014    |\ 
    LDA.w DATA_01B012,Y         ;$01B017    || Set initial X speed based on which side Mario is on.
    STA $B6,X                   ;$01B01A    |/
    RTS                         ;$01B01C    |



DATA_01B01D:                    ;$01B01D    | X speeds for the horizontal fish.
    db $08,$F8

DATA_01B01F:                    ;$01B01F    | X/Y speeds for both fish not in the direction of their movement.
    db $00,$00
    
DATA_01B021:                    ;$01B021    | Y speeds for the vertical fish.
    db $08,$F8

DATA_01B023:                    ;$01B023    | X speeds for how fast sprites fly away when kick-killed.
    db $F0,$10

DATA_01B025:                    ;$01B025    | Y speeds to randomly pick from for a flopping fish.
    db $E0,$E8,$D0,$D8

DATA_01B029:                    ;$01B029    | X speeds to randomly pick from for a flopping fish.
    db $08,$F8,$10,$F0,$04,$FC,$14,$EC

DATA_01B031:                    ;$01B031    | Directions to check for the fish's block status. Horizontal, vertical.
    db $03,$0C
    
    ; Fish misc RAM:
    ; $C2   - Direction of movement, incremented at each turn. Even = +, odd = -.
    ; $151C - Which way the fish swims. 0 = horizontal, 1 = vertical.
    ; $1540 - Timer for making the fish automatically turn around. Sets to #$80 at each turn.
    ; $1570 - Frame counter for animation.
    ; $157C - Horizontal direction the sprite is facing.
    ; $1602 - Animation frame to use.
    ;          0/1 = swimming, 2/3 = flopping

FishMain:                       ;-----------| Fish MAIN
    LDA.w $14C8,X               ;$01B033    |\ 
    CMP.b #$08                  ;$01B036    ||
    BNE CODE_01B03E             ;$01B038    ||
    LDA $9D                     ;$01B03A    || If the fish is dying or the game is frozen, just draw graphics.
    BEQ CODE_01B041             ;$01B03C    ||
CODE_01B03E:                    ;           ||
    JMP CODE_01B10A             ;$01B03E    |/

CODE_01B041:
    JSR SetAnimationFrame       ;$01B041    |
    LDA.w $164A,X               ;$01B044    |\ Branch if in water.
    BNE CODE_01B0A7             ;$01B047    |/
CODE_01B049:                    ;```````````| Fish is not in water.
    JSR SubUpdateSprPos         ;$01B049    | Update X/Y position, apply gravity, and process interaction with blocks.
    JSR IsTouchingObjSide       ;$01B04C    |\ 
    BEQ CODE_01B054             ;$01B04F    || If touching a block, flip to the other direction.
    JSR FlipSpriteDir           ;$01B051    |/
CODE_01B054:                    ;           |
    JSR IsOnGround              ;$01B054    |\ Make the fish flop on the ground.
    BEQ CODE_01B09C             ;$01B057    ||
    LDA.w $190E                 ;$01B059    ||\  
    BEQ CODE_01B062             ;$01B05C    ||| If sprite buoyancy is enabled in the level, spawn water splashes as it bounces.
    JSL CODE_0284BC             ;$01B05E    ||/
CODE_01B062:                    ;           ||
    JSL GetRand                 ;$01B062    ||\ 
    ADC $13                     ;$01B066    |||
    AND.b #$07                  ;$01B068    ||| Give a random X speed.
    TAY                         ;$01B06A    |||
    LDA.w DATA_01B029,Y         ;$01B06B    |||
    STA $B6,X                   ;$01B06E    ||/
    JSL GetRand                 ;$01B070    ||\ 
    LDA.w $148E                 ;$01B074    |||
    AND.b #$03                  ;$01B077    ||| Give a random Y speed.
    TAY                         ;$01B079    |||
    LDA.w DATA_01B025,Y         ;$01B07A    |||
    STA $AA,X                   ;$01B07D    ||/
    LDA.w $148D                 ;$01B07F    ||\ 
    AND.b #$40                  ;$01B082    |||
    BNE CODE_01B08E             ;$01B084    ||| Occasionally Y flip its graphics.
    LDA.w $15F6,X               ;$01B086    |||
    EOR.b #$80                  ;$01B089    |||
    STA.w $15F6,X               ;$01B08B    ||/
CODE_01B08E:                    ;           ||
    JSL GetRand                 ;$01B08E    ||\ 
    LDA.w $148D                 ;$01B092    |||
    AND.b #$80                  ;$01B095    ||| Occasionally update the direction it's facing.
    BNE CODE_01B09C             ;$01B097    |||
    JSR UpdateDirection         ;$01B099    |//
CODE_01B09C:                    ;           |
    LDA.w $1602,X               ;$01B09C    |\ 
    CLC                         ;$01B09F    ||
    ADC.b #$02                  ;$01B0A0    || Set animation frame to be flopping.
    STA.w $1602,X               ;$01B0A2    ||
    BRA CODE_01B0EA             ;$01B0A5    |/


CODE_01B0A7:                    ;```````````| Fish is in water.
    JSR CODE_019140             ;$01B0A7    |\ If the fish hits a block, change direction.
    JSR UpdateDirection         ;$01B0AA    |/
    ASL.w $15F6,X               ;$01B0AD    |\ Clear Y flip (from flopping).
    LSR.w $15F6,X               ;$01B0B0    |/
    LDA.w $1588,X               ;$01B0B3    |\ 
    LDY.w $151C,X               ;$01B0B6    ||
    AND.w DATA_01B031,Y         ;$01B0B9    ||
    BNE CODE_01B0C3             ;$01B0BC    ||
    LDA.w $1540,X               ;$01B0BE    || If the fish hits a wall or its timer runs around, turn the other way.
    BNE CODE_01B0CA             ;$01B0C1    ||
CODE_01B0C3:                    ;           ||
    LDA.b #$80                  ;$01B0C3    ||| How many frames to wait before turning the fish around automatically.
    STA.w $1540,X               ;$01B0C5    ||
    INC $C2,X                   ;$01B0C8    |/
CODE_01B0CA:                    ;           |
    LDA $C2,X                   ;$01B0CA    |\ 
    AND.b #$01                  ;$01B0CC    ||
    TAY                         ;$01B0CE    ||
    LDA.w $151C,X               ;$01B0CF    ||
    BEQ CODE_01B0D6             ;$01B0D2    ||
    INY                         ;$01B0D4    || Set X and Y speed based on the direction of movement and type of fish.
    INY                         ;$01B0D5    ||
CODE_01B0D6:                    ;           ||
    LDA.w DATA_01B01D,Y         ;$01B0D6    ||
    STA $B6,X                   ;$01B0D9    ||
    LDA.w DATA_01B01F,Y         ;$01B0DB    ||
    STA $AA,X                   ;$01B0DE    |/
    JSR SubSprXPosNoGrvty       ;$01B0E0    |\ 
    AND.b #$0C                  ;$01B0E3    || Update the sprite's position.
    BNE CODE_01B0EA             ;$01B0E5    ||  Oddly, don't update its Y position for the horizontal fish going left.
    JSR SubSprYPosNoGrvty       ;$01B0E7    |/

CODE_01B0EA:                    ;```````````| Fish code convenes here.
    JSR SubSprSprInteract       ;$01B0EA    |\ Process interaction with Mario and other sprites.
    JSR MarioSprInteractRt      ;$01B0ED    |/
    BCC CODE_01B10A             ;$01B0F0    |\ 
    LDA.w $164A,X               ;$01B0F2    ||
    BEQ CODE_01B107             ;$01B0F5    || Kick-kill the fish if:
    LDA.w $1490                 ;$01B0F7    || - It's not in water
    BNE CODE_01B107             ;$01B0FA    || - Mario has star power
    LDA.w $187A                 ;$01B0FC    ||
    BNE CODE_01B10A             ;$01B0FF    || Else, hurt Mario, unless he's on Yoshi.
    JSL HurtMario               ;$01B101    ||
    BRA CODE_01B10A             ;$01B105    ||
CODE_01B107:                    ;           ||
    JSR CODE_01B12A             ;$01B107    |/
CODE_01B10A:                    ;```````````| GFX routine for fish sprites.
    LDA.w $1602,X               ;$01B10A    |\ 
    LSR                         ;$01B10D    ||
    EOR.b #$01                  ;$01B10E    || Set GFX page based on whether it's flopping or not.
    STA $00                     ;$01B110    || Flopping = page x0
    LDA.w $15F6,X               ;$01B112    || Swimming = page x1
    AND.b #$FE                  ;$01B115    ||
    ORA $00                     ;$01B117    ||
    STA.w $15F6,X               ;$01B119    |/
    JSR SubSprGfx2Entry1        ;$01B11C    | Draw a 16x16 sprite.
    JSR SubOffscreen0Bnk1       ;$01B11F    | Process offscreen from -$40 to +$30.
    LSR.w $15F6,X               ;$01B122    |\ 
    SEC                         ;$01B125    || Reset GFX page for next run.
    ROL.w $15F6,X               ;$01B126    |/
    RTS                         ;$01B129    |



CODE_01B12A:                    ;-----------| Subroutine to handle kicking stunned Koopas/out-of-water fish.
    LDA.b #$10                  ;$01B12A    | How long to show Mario's "kicked sprite" pose.
    STA.w $149A                 ;$01B12C    |
    LDA.b #$03                  ;$01B12F    |\ SFX for kicking the sprite.
    STA.w $1DF9                 ;$01B131    |/
    JSR SubHorzPosBnk1          ;$01B134    |\ 
    LDA.w DATA_01B023,Y         ;$01B137    || Send the sprite flying away from Mario (does not apply to Koopas, which just drop straight down)
    STA $B6,X                   ;$01B13A    |/
    LDA.b #$E0                  ;$01B13C    | Speed to send the fish flying
    STA $AA,X                   ;$01B13E    |
    LDA.b #$02                  ;$01B140    |\ Kill the sprite.
    STA.w $14C8,X               ;$01B142    |/
    STY $76                     ;$01B145    | Make Mario face the sprite he kicked.
    LDA.b #$01                  ;$01B147    | Number of points to give Mario for kicking a Koopa/Fish (200).
    JSL GivePoints              ;$01B149    |
    RTS                         ;$01B14D    |





CODE_01B14E:                    ;-----------| Sprite glitter subroutine.
    LDA $13                     ;$01B14E    |\ Spawn once every 4 frames.
    AND.b #$03                  ;$01B150    |/
CODE_01B152:                    ;```````````|
    ORA.w $186C,X               ;$01B152    |\ 
    ORA $9D                     ;$01B155    || Return if game frozen or sprite offscreen.
    BNE Return01B191            ;$01B157    |/
    JSL GetRand                 ;$01B159    |\ 
    AND.b #$0F                  ;$01B15D    ||
    CLC                         ;$01B15F    ||
    LDY.b #$00                  ;$01B160    ||
    ADC.b #$FC                  ;$01B162    ||
    BPL CODE_01B167             ;$01B164    ||
    DEY                         ;$01B166    ||
CODE_01B167:                    ;           ||
    CLC                         ;$01B167    || Give a random X offset in the range #$FFFC-#$000B.
    ADC $E4,X                   ;$01B168    || Return if that would stick the sparkle offscreen.
    STA $02                     ;$01B16A    ||
    TYA                         ;$01B16C    ||
    ADC.w $14E0,X               ;$01B16D    ||
    PHA                         ;$01B170    ||
    LDA $02                     ;$01B171    ||
    CMP $1A                     ;$01B173    ||
    PLA                         ;$01B175    ||
    SBC $1B                     ;$01B176    ||
    BNE Return01B191            ;$01B178    |/
    LDA.w $148E                 ;$01B17A    |\ 
    AND.b #$0F                  ;$01B17D    ||
    CLC                         ;$01B17F    ||
    ADC.b #$FE                  ;$01B180    ||
    ADC $D8,X                   ;$01B182    || Give a random Y offset in the range #$00FE-#$010D.
    STA $00                     ;$01B184    ||
    LDA.w $14D4,X               ;$01B186    ||
    ADC.b #$00                  ;$01B189    ||
    STA $01                     ;$01B18B    |/
    JSL CODE_0285BA             ;$01B18D    | Spawn the sparkle.
Return01B191:                   ;           |
    RTS                         ;$01B191    |





    ; Generated Fish misc RAM:
    ; $154C - Timer for disabling contact with Mario. Set to #$08 when touched.
    ; $1570 - Frame counter for animation.
    ; $157C - Horizontal direction the sprite is facing.
    ; $1602 - Animation frame to use.
    ;          0/1 = swimming

GeneratedFish:                  ;-----------| Generated fish MAIN.
    JSR CODE_01B209             ;$01B192    | Process interaction with Mario/sprites and draw GFX.
    LDA $9D                     ;$01B195    |\ Return if game is frozen.
    BNE Return01B1B0            ;$01B197    |/
    JSR SetAnimationFrame       ;$01B199    | Set animation frame.
    JSR SubSprXPosNoGrvty       ;$01B19C    | Update X position.
    JSR SubSprYPosNoGrvty       ;$01B19F    | Update Y position.
    JSR CODE_019140             ;$01B1A2    | Process interaction with blocks?...
    LDA $AA,X                   ;$01B1A5    |\ 
    CMP.b #$20                  ;$01B1A7    ||| Max fall speed for the generated fish.
    BPL CODE_01B1AE             ;$01B1A9    ||
    CLC                         ;$01B1AB    ||
    ADC.b #$01                  ;$01B1AC    ||| Gravity for the generated fish.
CODE_01B1AE:                    ;           ||
    STA $AA,X                   ;$01B1AE    |/
Return01B1B0:                   ;           |
    RTS                         ;$01B1B0    |





DATA_01B1B1:                    ;$01B1B1    | Y speeds for each of the jumping fish's jumps.
    db $D0,$D0,$B0

    ; Surface-jumping Fish misc RAM:
    ; $C2   - Bounce counter. On the third bounce, it does a big leap and briefly sinks into the water.
    ; $151C - Mirror of in-water flag for after the third bounce.
    ; $1540 - Timer set to #$10 when entering water. Not used otherwise.
    ; $154C - Timer for disabling contact with Mario. Set to #$08 when touched.
    ; $1570 - Frame counter for animation. Increases thrice as fast while in air.
    ; $157C - Horizontal direction the sprite is facing. (always 1)
    ; $1602 - Animation frame to use.
    ;          0/1 = swimming

JumpingFish:                    ;-----------| Surface-jumping fish MAIN.
    LDA $9D                     ;$01B1B4    |\ Just draw graphics if the game is frozen.
    BNE CODE_01B209             ;$01B1B6    |/
    LDA.w $164A,X               ;$01B1B8    |
    STA.w $151C,X               ;$01B1BB    |
    JSR SubUpdateSprPos         ;$01B1BE    | Update X/Y position, apply gravity, and process interaction with blocks.
    LDA.w $164A,X               ;$01B1C1    |\ Branch if not touching water.
    BEQ CODE_01B1EA             ;$01B1C4    |/
    LDA $C2,X                   ;$01B1C6    |\ Branch in the phase to sink in water.
    CMP.b #$03                  ;$01B1C8    ||| Number of leaps to make before the big leap and sink.
    BEQ CODE_01B1DE             ;$01B1CA    |/
    INC $C2,X                   ;$01B1CC    |\ 
    TAY                         ;$01B1CE    ||
    LDA.w DATA_01B1B1,Y         ;$01B1CF    || Set Y speed and jump out of the water.
    STA $AA,X                   ;$01B1D2    || Also set the stun timer for no reason.
    LDA.b #$10                  ;$01B1D4    ||
    STA.w $1540,X               ;$01B1D6    ||
    STZ.w $164A,X               ;$01B1D9    |/
    BRA CODE_01B206             ;$01B1DC    |

CODE_01B1DE:                    ;```````````| Fish is sinking.
    DEC $AA,X                   ;$01B1DE    |\ 
    LDA $13                     ;$01B1E0    ||
    AND.b #$03                  ;$01B1E2    || Slowly accelerate upwards.
    BNE CODE_01B1E8             ;$01B1E4    ||
    DEC $AA,X                   ;$01B1E6    |/
CODE_01B1E8:                    ;           |
    BRA CODE_01B206             ;$01B1E8    |

CODE_01B1EA:                    ;```````````| Fish is in midair.
    INC.w $1570,X               ;$01B1EA    |\ Animate thrice as fast in mid-air.
    INC.w $1570,X               ;$01B1ED    |/
    CMP.w $151C,X               ;$01B1F0    |
    BEQ CODE_01B206             ;$01B1F3    |
    LDA.b #$10                  ;$01B1F5    |
    STA.w $1540,X               ;$01B1F7    |
    LDA $C2,X                   ;$01B1FA    |\ 
    CMP.b #$03                  ;$01B1FC    ||
    BNE CODE_01B206             ;$01B1FE    || If it just finished sinking, reset jump counter and send into the air.
    STZ $C2,X                   ;$01B200    ||
    LDA.b #$D0                  ;$01B202    ||| Y speed for the fish's first jump.
    STA $AA,X                   ;$01B204    |/

CODE_01B206:                    ;```````````| All code re-convenes here for GFX.
    JSR SetAnimationFrame       ;$01B206    | Set animation frame.
CODE_01B209:                    ;           |
    JSR SubSprSprPMarioSpr      ;$01B209    | Process interaction with Mario/sprites.
    JSR UpdateDirection         ;$01B20C    | Update direction based on X speed (although its X speed never changes...).
    JMP CODE_01B10A             ;$01B20F    | Draw GFX.





DATA_01B212:                    ;$01B212    | X speeds for the floating spike ball. First two are "slow", second two are "fast".
    db $08,$F8,$10,$F0

InitFloatSpkBall:               ;-----------| Floating spike ball INIT
    JSR FaceMario               ;$01B216    |\ 
    LDY.w $157C,X               ;$01B219    ||
    LDA $E4,X                   ;$01B21C    || 
    AND.b #$10                  ;$01B21E    ||
    BEQ CODE_01B224             ;$01B220    || Get X speed based on odd or even X position.
    INY                         ;$01B222    ||
    INY                         ;$01B223    ||
CODE_01B224:                    ;           ||
    LDA.w DATA_01B212,Y         ;$01B224    ||
    STA $B6,X                   ;$01B227    |/
    BRA InitFloatingPlat        ;$01B229    | Find water below and spawn in it.



InitFloatChckPlat:              ;-----------| Floating checkerboard platform INIT
    INC.w $1602,X               ;$01B22B    | Make 
InitOrangePlat:                 ;-----------| Flying orange platform INIT 
    LDA.w $190E                 ;$01B22E    |\ If sprite buoyancy is enabled, find water to float in.
    BNE InitFloatingPlat        ;$01B231    || If buoyancy is not enabled, just stay in midair instead.
    INC $C2,X                   ;$01B233    |/  (in the case of the chekerboard platform, it will fall straight down).
    RTS                         ;$01B235    |



InitFloatingPlat:               ;-----------| Floating platform INIT (also used by spike ball)
    LDA.b #$03                  ;$01B236    |\ 
    STA.w $151C,X               ;$01B238    ||
CODE_01B23B:                    ;           ||
    JSR CODE_019140             ;$01B23B    ||] Process water interaction.
    LDA.w $164A,X               ;$01B23E    ||
    BNE Return01B25D            ;$01B241    ||
    DEC.w $151C,X               ;$01B243    || Look for water below the sprite and spawn it there.
    BMI CODE_01B262             ;$01B246    ||  $151C is used as the number of tiles to look;
    LDA $D8,X                   ;$01B248    ||   if no water could be found in that range,
    CLC                         ;$01B24A    ||   re-initialize the sprite and continue again next frame.
    ADC.b #$08                  ;$01B24B    ||  Scans at most until it reaches a Y position of $0200,
    STA $D8,X                   ;$01B24D    ||   at which point it gives up.
    LDA.w $14D4,X               ;$01B24F    ||
    ADC.b #$00                  ;$01B252    ||
    STA.w $14D4,X               ;$01B254    ||
    CMP.b #$02                  ;$01B257    ||
    BCS Return01B25D            ;$01B259    ||
    BRA CODE_01B23B             ;$01B25B    |/

Return01B25D:
    RTS                         ;$01B25D    |


InitChckbrdPlat:                ;-----------| Checkerboard platform INIT.
    INC.w $1602,X               ;$01B25E    |
    RTS                         ;$01B261    |


CODE_01B262:                    ;```````````| Set the sprite to re-initialize on the next frame.
    LDA.b #$01                  ;$01B262    |
    STA.w $14C8,X               ;$01B264    |
Return01B267:                   ;           |
    RTS                         ;$01B267    |





DATA_01B268:                    ;$01B268    | X/Y accerations for the platforms.
    db $FF,$01

DATA_01B26A:                    ;$01B26A    | Max X/Y speeds for the platforms.
    db $F0,$10

    ; Flying platform misc RAM:
    ; $C2   - Frame counter for acceleration. Increments while accelerating; the platform's speed gets updated every 4th value.
    ; $151C - Next direction of acceleration. Even = -, odd = +.
    ; $1528 - Number of pixels moved per frame, for moving Mario. Only used for the horizontal platforms.
    ; $1540 - Timer for how long to wait before applying acceleration again.
    ;          Set to #$30 each time $151C increments.
    ; $1602 - Set to #$01 for the checkerboard platforms. Makes them 5 tiles instead of 3.

FlyingPlatforms:                ;-----------| Flying platforms MAIN (this refers to both the checkerboard and flying rock platforms)
    JSR CODE_01B2D1             ;$01B26C    | Draw graphics.
    LDA $9D                     ;$01B26F    |\ Return if the game is frozen. 
    BNE Return01B2C2            ;$01B271    |/
    LDA.w $1540,X               ;$01B273    |\ Branch if not accelerating.
    BNE CODE_01B2A5             ;$01B276    |/
    INC $C2,X                   ;$01B278    |\ 
    LDA $C2,X                   ;$01B27A    || 
    AND.b #$03                  ;$01B27C    ||| How often to update the platform's speed.
    BNE CODE_01B2A5             ;$01B27E    ||
    LDA.w $151C,X               ;$01B280    || 
    AND.b #$01                  ;$01B283    ||
    TAY                         ;$01B285    ||
    LDA $AA,X                   ;$01B286    || Accerate X/Y speed.
    CLC                         ;$01B288    || If at the max, change acceration direction
    ADC.w DATA_01B268,Y         ;$01B289    ||  and stall an appropriate amount of time.
    STA $AA,X                   ;$01B28C    ||
    STA $B6,X                   ;$01B28E    ||
    CMP.w DATA_01B26A,Y         ;$01B290    ||
    BNE CODE_01B2A5             ;$01B293    ||
    INC.w $151C,X               ;$01B295    ||
    LDA.b #$18                  ;$01B298    ||| How long the platforms stall at max speed.
    LDY $9E,X                   ;$01B29A    ||
    CPY.b #$55                  ;$01B29C    ||
    BNE CODE_01B2A2             ;$01B29E    ||
    LDA.b #$08                  ;$01B2A0    ||| How long the horizontal checkerboard platform stalls at max speed.
CODE_01B2A2:                    ;           ||
    STA.w $1540,X               ;$01B2A2    |/
CODE_01B2A5:                    ;           |
    LDA $9E,X                   ;$01B2A5    |\ 
    CMP.b #$57                  ;$01B2A7    ||
    BCS CODE_01B2B0             ;$01B2A9    ||
    JSR SubSprXPosNoGrvty       ;$01B2AB    || If a horizontal platform, only update X position.
    BRA CODE_01B2B6             ;$01B2AE    || If a vertical platform, only update Y position.
CODE_01B2B0:                    ;           ||
    JSR SubSprYPosNoGrvty       ;$01B2B0    ||
    STZ.w $1491                 ;$01B2B3    |/
CODE_01B2B6:                    ;           |
    LDA.w $1491                 ;$01B2B6    |\ 
    STA.w $1528,X               ;$01B2B9    || Make solid and move Mario with the platform.
    JSR CODE_01B457             ;$01B2BC    |/
    JSR SubOffscreen1Bnk1       ;$01B2BF    | Process offscreen from -$40 to +$A0.
Return01B2C2:                   ;           |
    RTS                         ;$01B2C2    |



DATA_01B2C3:                    ;$01B2C3    | What kind of platform each sprite is. Indexed by sprite number from #$55.
    db $00,$01,$00,$01,$00,$00,$00,$00      ; 00 = brown/checker, 01 = rock/orange
    db $01,$01,$00,$00,$00,$00              ; The revolving platform is not handled by this.

CODE_01B2D1:                    ;-----------| Graphics subroutine for almost all platform sprites.
    LDA $9E,X                   ;$01B2D1    |\ 
    SEC                         ;$01B2D3    ||
    SBC.b #$55                  ;$01B2D4    || If a rock/orange platform, jump down.
    TAY                         ;$01B2D6    || If a brown/checker platform, continue code.
    LDA.w DATA_01B2C3,Y         ;$01B2D7    ||
    BEQ CODE_01B2DF             ;$01B2DA    ||
    JMP CODE_01B395             ;$01B2DC    |/


CODE_01B2DF:                    ;-----------| Brown/checker platform GFX routine.
    JSR GetDrawInfoBnk1         ;$01B2DF    |
    LDA.w $1602,X               ;$01B2E2    |
    STA $01                     ;$01B2E5    |
    LDA $D8,X                   ;$01B2E7    |\ 
    SEC                         ;$01B2E9    ||
    SBC $1C                     ;$01B2EA    ||
    STA.w $0301,Y               ;$01B2EC    ||
    STA.w $0305,Y               ;$01B2EF    || Set Y position for three tiles.
    STA.w $0309,Y               ;$01B2F2    || If a checkerboard platform, set two more.
    LDX $01                     ;$01B2F5    ||
    BEQ CODE_01B2FF             ;$01B2F7    ||
    STA.w $030D,Y               ;$01B2F9    ||
    STA.w $0311,Y               ;$01B2FC    |/
CODE_01B2FF:                    ;           |
    LDX.w $15E9                 ;$01B2FF    |
    LDA $E4,X                   ;$01B302    |\ 
    SEC                         ;$01B304    ||
    SBC $1A                     ;$01B305    ||
    STA.w $0300,Y               ;$01B307    ||
    CLC                         ;$01B30A    ||
    ADC.b #$10                  ;$01B30B    ||
    STA.w $0304,Y               ;$01B30D    ||
    CLC                         ;$01B310    ||
    ADC.b #$10                  ;$01B311    || Set X position for three tiles.
    STA.w $0308,Y               ;$01B313    || If a checkerboard platform, set two more again.
    LDX $01                     ;$01B316    ||
    BEQ CODE_01B326             ;$01B318    ||
    CLC                         ;$01B31A    ||
    ADC.b #$10                  ;$01B31B    ||
    STA.w $030C,Y               ;$01B31D    ||
    CLC                         ;$01B320    ||
    ADC.b #$10                  ;$01B321    ||
    STA.w $0310,Y               ;$01B323    |/
CODE_01B326:                    ;           |
    LDX.w $15E9                 ;$01B326    |
    LDA $01                     ;$01B329    |\ Set tile numbers for checkerboard platforms.
    BEQ CODE_01B344             ;$01B32B    ||
    LDA.b #$EA                  ;$01B32D    ||| Leftmost tile.
    STA.w $0302,Y               ;$01B32F    ||
    LDA.b #$EB                  ;$01B332    ||| Middle tiles.
    STA.w $0306,Y               ;$01B334    ||
    STA.w $030A,Y               ;$01B337    ||
    STA.w $030E,Y               ;$01B33A    ||
    LDA.b #$EC                  ;$01B33D    ||| Rightmost tile.
    STA.w $0312,Y               ;$01B33F    ||
    BRA CODE_01B359             ;$01B342    |/

CODE_01B344:
    LDA.b #$60                  ;$01B344    |\\ Leftmost tile. 
    STA.w $0302,Y               ;$01B346    ||
    LDA.b #$61                  ;$01B349    ||| Middle tiles.
    STA.w $0306,Y               ;$01B34B    ||
    STA.w $030A,Y               ;$01B34E    || Set tile numbers for brown platforms.
    STA.w $030E,Y               ;$01B351    ||
    LDA.b #$62                  ;$01B354    ||| Rightmost tile.
    STA.w $0312,Y               ;$01B356    |/
CODE_01B359:                    ;           |
    LDA $64                     ;$01B359    |\ 
    ORA.w $15F6,X               ;$01B35B    ||
    STA.w $0303,Y               ;$01B35E    ||
    STA.w $0307,Y               ;$01B361    ||
    STA.w $030B,Y               ;$01B364    || Set YXPPCCCT for each tile.
    STA.w $030F,Y               ;$01B367    || If a brown platform, send the middle tile in front as the end of the platform?
    STA.w $0313,Y               ;$01B36A    ||
    LDA $01                     ;$01B36D    ||
    BNE CODE_01B376             ;$01B36F    ||
    LDA.b #$62                  ;$01B371    ||
    STA.w $030A,Y               ;$01B373    |/
CODE_01B376:                    ;           |
    LDA.b #$04                  ;$01B376    |\ 
    LDY $01                     ;$01B378    ||
    BNE CODE_01B37E             ;$01B37A    ||
    LDA.b #$02                  ;$01B37C    || Upload 3/5 16x16 tiles to OAM.
CODE_01B37E:                    ;           ||
    LDY.b #$02                  ;$01B37E    ||
    JMP FinishOAMWriteRt        ;$01B380    |/





DiagPlatTiles:                  ;$01B383    | Tile numbers for the orange platforms.
    db $CB,$E4,$CC,$E5,$CC,$E5,$CC,$E4
    db $CB

FlyRockPlatTiles:               ;$01B38C    |
    db $85,$88,$86,$89,$86,$89,$86,$88
    db $85

CODE_01B395:                    ;-----------| Rock/orange platform GFX routine.
    JSR GetDrawInfoBnk1         ;$01B395    |
    PHY                         ;$01B398    |
    LDY.b #$00                  ;$01B399    |\ 
    LDA $9E,X                   ;$01B39B    ||
    CMP.b #$5E                  ;$01B39D    ||
    BNE CODE_01B3A2             ;$01B39F    || Set sprite 5E (the flying orange platform) to be bigger than normal.
    INY                         ;$01B3A1    ||
CODE_01B3A2:                    ;           ||
    STY $00                     ;$01B3A2    |/
    PLY                         ;$01B3A4    |
    LDA $D8,X                   ;$01B3A5    |\ 
    SEC                         ;$01B3A7    ||
    SBC $1C                     ;$01B3A8    ||
    STA.w $0301,Y               ;$01B3AA    ||
    STA.w $0309,Y               ;$01B3AD    ||
    STA.w $0311,Y               ;$01B3B0    ||
    LDX $00                     ;$01B3B3    ||
    BEQ CODE_01B3BD             ;$01B3B5    ||
    STA.w $0319,Y               ;$01B3B7    || Set Y position for three tiles, plus two for the lower tiles.
    STA.w $0321,Y               ;$01B3BA    || If the flying orange platform, set two (four) more.
CODE_01B3BD:                    ;           ||
    CLC                         ;$01B3BD    ||
    ADC.b #$10                  ;$01B3BE    ||
    STA.w $0305,Y               ;$01B3C0    ||
    STA.w $030D,Y               ;$01B3C3    ||
    LDX $00                     ;$01B3C6    ||
    BEQ CODE_01B3D0             ;$01B3C8    ||
    STA.w $0315,Y               ;$01B3CA    ||
    STA.w $031D,Y               ;$01B3CD    |/
CODE_01B3D0:                    ;           |
    LDA.b #$08                  ;$01B3D0    |\ 
    LDX $00                     ;$01B3D2    ||
    BNE CODE_01B3D8             ;$01B3D4    || Drawing nine tiles for the flying orange platform,
    LDA.b #$04                  ;$01B3D6    || Five for the others.
CODE_01B3D8:                    ;           ||
    STA $01                     ;$01B3D8    |/
    DEC A                       ;$01B3DA    |
    STA $02                     ;$01B3DB    |
    LDX.w $15E9                 ;$01B3DD    |
    LDA.w $15F6,X               ;$01B3E0    |\ 
    STA $03                     ;$01B3E3    ||
    LDA $9E,X                   ;$01B3E5    || 
    CMP.b #$5B                  ;$01B3E7    ||
    LDA.b #$00                  ;$01B3E9    ||
    BCS CODE_01B3EF             ;$01B3EB    ||
    LDA.b #$09                  ;$01B3ED    ||
CODE_01B3EF:                    ;           ||
    PHA                         ;$01B3EF    ||
    LDA $E4,X                   ;$01B3F0    ||
    SEC                         ;$01B3F2    ||
    SBC $1A                     ;$01B3F3    ||
    PLX                         ;$01B3F5    ||
CODE_01B3F6:                    ;           ||
    STA.w $0300,Y               ;$01B3F6    ||
    CLC                         ;$01B3F9    ||
    ADC.b #$08                  ;$01B3FA    ||
    PHA                         ;$01B3FC    ||
    LDA.w DiagPlatTiles,X       ;$01B3FD    || Set X position, tile numbers, and YXPPCCCT for all of the tiles.
    STA.w $0302,Y               ;$01B400    ||
    LDA $64                     ;$01B403    ||
    ORA $03                     ;$01B405    ||
    PHX                         ;$01B407    ||
    LDX $01                     ;$01B408    ||
    CPX $02                     ;$01B40A    ||
    PLX                         ;$01B40C    ||
    BCS CODE_01B411             ;$01B40D    ||
    ORA.b #$40                  ;$01B40F    ||
CODE_01B411:                    ;           ||
    STA.w $0303,Y               ;$01B411    ||
    PLA                         ;$01B414    ||
    INY                         ;$01B415    ||
    INY                         ;$01B416    ||
    INY                         ;$01B417    ||
    INY                         ;$01B418    ||
    INX                         ;$01B419    ||
    DEC $01                     ;$01B41A    ||
    BPL CODE_01B3F6             ;$01B41C    |/
    LDX.w $15E9                 ;$01B41E    |
    LDY.w $15EA,X               ;$01B421    |
    LDA $00                     ;$01B424    |\ 
    BNE CODE_01B444             ;$01B426    ||
    LDA $9E,X                   ;$01B428    || Set right edge of the flying rock platforms.
    CMP.b #$5B                  ;$01B42A    ||
    BCS CODE_01B43A             ;$01B42C    ||
    LDA.b #$85                  ;$01B42E    ||| Top tile.
    STA.w $0312,Y               ;$01B430    ||
    LDA.b #$88                  ;$01B433    ||| Bottom tile.
    STA.w $030E,Y               ;$01B435    ||
    BRA CODE_01B444             ;$01B438    |/

CODE_01B43A:
    LDA.b #$CB                  ;$01B43A    |\\ Top tile.
    STA.w $0312,Y               ;$01B43C    || Set right edge for the flying orange platforms.
    LDA.b #$E4                  ;$01B43F    ||| Bottom tile.
    STA.w $030E,Y               ;$01B441    |/
CODE_01B444:                    ;           |
    LDA.b #$08                  ;$01B444    |\ 
    LDY $00                     ;$01B446    ||
    BNE CODE_01B44C             ;$01B448    || Upload 5/9 16x16 tiles to OAM.
    LDA.b #$04                  ;$01B44A    ||
CODE_01B44C:                    ;           ||
    JMP CODE_01B37E             ;$01B44C    |/





    ; Misc RAM input:
    ; $1528 - Number of pixels the sprite has moved horizontally that frame, for moving Mario. Note: not cleared post-routine.
    ;
    ; Misc RAM output:
    ; $C2   - If the sprite is solid from all sides: set to 1 if initially 0. Can be used as a flag for whether the sprite has been hit from below.
    ; $1558 - If the sprite is solid from all sides: set to #$10 if $C2 was initially 0 when hit from below. Can be used as a timer for a bouncing animation.
    ; $1564 - If the sprite is solid from all sides (with sprite number >= 83): set to #$0F when hit from below.
    
InvisBlkMainRt:                 ;-----------| Invisible solid block MAIN; JSL here to make a sprite solid.
    PHB                         ;$01B44F    |  Returns carry set if Mario is on top of the sprite, and clear if not.
    PHK                         ;$01B450    |  If bit 0 of $190F is clear, the block is completely solid.
    PLB                         ;$01B451    |   If set, it's like passable like a ledge.
    JSR CODE_01B457             ;$01B452    |
    PLB                         ;$01B455    |
    RTL                         ;$01B456    |

CODE_01B457:
    JSR ProcessInteract         ;$01B457    |\ Return carry clear if Mario is not touching the sprite.
    BCC CODE_01B4B2             ;$01B45A    |/
    LDA $D8,X                   ;$01B45C    |\ 
    SEC                         ;$01B45E    ||
    SBC $1C                     ;$01B45F    || Branch if the sprite isn't at least 1.8 blocks below Mario (i.e. he's not on top).
    STA $00                     ;$01B461    || Oddly, this uses on-screen position,
    LDA $80                     ;$01B463    ||  hence the glitchiness if you touch a solid sprite offscreen.
    CLC                         ;$01B465    ||  It's probably meant to save bytes on cross-screen interaction.
    ADC.b #$18                  ;$01B466    ||
    CMP $00                     ;$01B468    ||
    BPL CODE_01B4B4             ;$01B46A    |/
    LDA $7D                     ;$01B46C    |\ 
    BMI CODE_01B4B2             ;$01B46E    || Return carry clear if Mario is moving up or is being pushed down by an object.
    LDA $77                     ;$01B470    || Else, he is standing on the top of the block.
    AND.b #$08                  ;$01B472    ||
    BNE CODE_01B4B2             ;$01B474    |/
    LDA.b #$10                  ;$01B476    |\\ Y speed to give Mario when sitting on top of the block.
    STA $7D                     ;$01B478    |/
    LDA.b #$01                  ;$01B47A    |\ Set Mario as standing on a solid sprite.
    STA.w $1471                 ;$01B47C    |/
    LDA.b #$1F                  ;$01B47F    |\ 
    LDY.w $187A                 ;$01B481    ||
    BEQ CODE_01B488             ;$01B484    ||
    LDA.b #$2F                  ;$01B486    ||
CODE_01B488:                    ;           ||
    STA $01                     ;$01B488    || Set Y position on top, accounting for Yoshi.
    LDA $D8,X                   ;$01B48A    ||
    SEC                         ;$01B48C    ||
    SBC $01                     ;$01B48D    ||
    STA $96                     ;$01B48F    ||
    LDA.w $14D4,X               ;$01B491    ||
    SBC.b #$00                  ;$01B494    ||
    STA $97                     ;$01B496    |/
    LDA $77                     ;$01B498    |\ 
    AND.b #$03                  ;$01B49A    ||
    BNE CODE_01B4B0             ;$01B49C    ||
    LDY.b #$00                  ;$01B49E    ||
    LDA.w $1528,X               ;$01B4A0    ||
    BPL CODE_01B4A6             ;$01B4A3    ||
    DEY                         ;$01B4A5    || If not blocked on the left/right,
CODE_01B4A6:                    ;           ||  slide Mario with the sprite.
    CLC                         ;$01B4A6    ||
    ADC $94                     ;$01B4A7    ||
    STA $94                     ;$01B4A9    ||
    TYA                         ;$01B4AB    ||
    ADC $95                     ;$01B4AC    ||
    STA $95                     ;$01B4AE    |/
CODE_01B4B0:                    ;           |
    SEC                         ;$01B4B0    |
    RTS                         ;$01B4B1    |

CODE_01B4B2:
    CLC                         ;$01B4B2    |
    RTS                         ;$01B4B3    |


CODE_01B4B4:                    ;```````````| Not on top of the sprite; check inside it.
    LDA.w $190F,X               ;$01B4B4    |\ 
    LSR                         ;$01B4B7    || Return carry clear if passable from below.
    BCS CODE_01B4B2             ;$01B4B8    |/
    LDA.b #$00                  ;$01B4BA    |\ 
    LDY $73                     ;$01B4BC    ||
    BNE CODE_01B4C4             ;$01B4BE    ||
    LDY $19                     ;$01B4C0    ||
    BNE CODE_01B4C6             ;$01B4C2    ||
CODE_01B4C4:                    ;           || Branch if Mario is vertically inside the sprite,
    LDA.b #$08                  ;$01B4C4    ||  accounting for powerup, ducking, and Yoshi.
CODE_01B4C6:                    ;           ||
    LDY.w $187A                 ;$01B4C6    || Pushes Mario out of the sprite if so, and
    BEQ CODE_01B4CD             ;$01B4C9    ||  returns carry clear.
    ADC.b #$08                  ;$01B4CB    ||
CODE_01B4CD:                    ;           ||
    CLC                         ;$01B4CD    ||
    ADC $80                     ;$01B4CE    ||
    CMP $00                     ;$01B4D0    ||
    BCC CODE_01B505             ;$01B4D2    |/
    LDA $7D                     ;$01B4D4    |\ Return carry clear if Mario is moving downwards (not jumping up and hitting the bottom of it).
    BPL CODE_01B4F7             ;$01B4D6    |/
    LDA.b #$10                  ;$01B4D8    |\\ Y speed to give Mario after hitting the sprite's bottom.
    STA $7D                     ;$01B4DA    |/
    LDA $9E,X                   ;$01B4DC    |\ 
    CMP.b #$83                  ;$01B4DE    || Handle "hittable" sprite blocks (83, 84, 9C, B9, C8).
    BCC CODE_01B4F2             ;$01B4E0    || This accidentally also applies to AF, B1, BB, and BC.
CODE_01B4E2:                    ;           ||
    LDA.b #$0F                  ;$01B4E2    ||\ Disable contact with other sprites.
    STA.w $1564,X               ;$01B4E4    ||/
    LDA $C2,X                   ;$01B4E7    ||\ 
    BNE CODE_01B4F2             ;$01B4E9    |||
    INC $C2,X                   ;$01B4EB    ||| Set the bounce timer for the sprite if it hasn't already been hit.
    LDA.b #$10                  ;$01B4ED    |||
    STA.w $1558,X               ;$01B4EF    |//
CODE_01B4F2:                    ;           |
    LDA.b #$01                  ;$01B4F2    |\ SFX for hitting a sprite block.
    STA.w $1DF9                 ;$01B4F4    |/
CODE_01B4F7:                    ;           |
    CLC                         ;$01B4F7    |
    RTS                         ;$01B4F8    |





DATA_01B4F9:                    ;$01B4F9    | Low X offset from a sprite to push Mario if he ends up inside.
    db $0E,$F1                  ; 0/1 = one-tile sprites
    db $10,$E0                  ; 2/3 = Reznor
    db $1F,$F1                  ; 4/5 = two-tile sprites

DATA_01B4FF:                    ;$01B4FF    | High X offset from a sprite to push Mario if he ends up inside.
    db $00,$FF
    db $00,$FF
    db $00,$FF

CODE_01B505:                    ;-----------| Push Mario to the side of the sprite and returns carry clear.
    JSR SubHorzPosBnk1          ;$01B505    |\ 
    LDA $9E,X                   ;$01B508    ||
    CMP.b #$A9                  ;$01B50A    ||
    BEQ CODE_01B520             ;$01B50C    ||
    CMP.b #$9C                  ;$01B50E    ||
    BEQ CODE_01B51E             ;$01B510    || If...
    CMP.b #$BB                  ;$01B512    ||  Sprite 49 (growing pipe):    Y = 4/5
    BEQ CODE_01B51E             ;$01B514    ||  Sprite 60 (switch palace):   Y = 4/5
    CMP.b #$60                  ;$01B516    ||  Sprite 9C (Hammer Bro plat): Y = 4/5
    BEQ CODE_01B51E             ;$01B518    ||  Sprite A9 (Reznor Platform): Y = 2/3
    CMP.b #$49                  ;$01B51A    ||  Sprite BB (Castle block):    Y = 4/5
    BNE CODE_01B522             ;$01B51C    ||  Other (one-tile sprites):    Y = 0/1
CODE_01B51E:                    ;           ||
    INY                         ;$01B51E    ||
    INY                         ;$01B51F    ||
CODE_01B520:                    ;           ||
    INY                         ;$01B520    ||
    INY                         ;$01B521    |/
CODE_01B522:                    ;           |
    LDA.w DATA_01B4F9,Y         ;$01B522    |\ 
    CLC                         ;$01B525    ||
    ADC $E4,X                   ;$01B526    ||
    STA $94                     ;$01B528    || Push Mario out of the sprite and clear his speed.
    LDA.w DATA_01B4FF,Y         ;$01B52A    ||
    ADC.w $14E0,X               ;$01B52D    ||
    STA $95                     ;$01B530    ||
    STZ $7B                     ;$01B532    |/
    CLC                         ;$01B534    |
    RTS                         ;$01B535    |





    ; Orange platform misc RAM:
    ; $C2   - Flag for which platform it should be. 00 = floating, 01 = flying.
    ; $1528 - Number of pixels moved per frame, for moving Mario.
    ;  See FloatingPlatMain for additional misc RAM when floating in water rather than flying.

OrangePlatform:                 ;-----------| Flying orange platform MAIN
    LDA $C2,X                   ;$01B536    |\ Change to a floating platform if sprite buoyancy is enabled.
    BEQ FloatingPlatMain        ;$01B538    |/
    JSR CODE_01B2D1             ;$01B53A    | Draw graphics.
    LDA $9D                     ;$01B53D    |\ Return if sprites are frozen.
    BNE Return01B558            ;$01B53F    |/
    JSR SubSprXPosNoGrvty       ;$01B541    | Update X position.
    LDA.w $1491                 ;$01B544    |
    STA.w $1528,X               ;$01B547    |
    JSR CODE_01B457             ;$01B54A    | Make the platform solid.
    BCC Return01B558            ;$01B54D    |\ 
    LDA.b #$01                  ;$01B54F    || Start moving if Mario is on top of the platform.
    STA.w $1B9A                 ;$01B551    ||  Also triggers the fast BG scroll sprite and flying turnblocks.
    LDA.b #$08                  ;$01B554    ||
    STA $B6,X                   ;$01B556    |/
Return01B558:                   ;           |
    RTS                         ;$01B558    |





    ; Floating platform/spike ball misc RAM:
    ; $151C - Flag for whether Mario is on the platform. #$01 if so.
    ;          Also used during initialization to divide finding water tiles over multiple frames.
    ; $154C - Timer for disabling contact with Mario. Set to #$08 for the spike ball when touched.
    ; $1602 - Set to #$01 for the checkerboard platforms. Makes it 5 tiles instead of 3.
    
FloatingSpikeBall:              ;-----------| Floating spike ball MAIN
    LDA.w $14C8,X               ;$01B559    |\ 
    CMP.b #$08                  ;$01B55C    || If dying, just draw graphics.
    BEQ FloatingPlatMain        ;$01B55E    ||
    JMP CODE_01B666             ;$01B560    |/


FloatingPlatMain:               ;-----------| Floating platform MAIN. Also used by the floating spike ball.
    LDA $9D                     ;$01B563    |\ 
    BEQ CODE_01B56A             ;$01B565    || Skip to just draw graphics if the game is frozen.
    JMP CODE_01B64E             ;$01B567    |/

CODE_01B56A:
    LDA.w $1588,X               ;$01B56A    |\ 
    AND.b #$0C                  ;$01B56D    || Update Y position, unless blocked by something.
    BNE CODE_01B574             ;$01B56F    ||  ...though, none of the sprites interact with solid blocks.
    JSR SubSprYPosNoGrvty       ;$01B571    |/
CODE_01B574:                    ;           |
    STZ.w $1491                 ;$01B574    |
    LDA $9E,X                   ;$01B577    |\ 
    CMP.b #$A4                  ;$01B579    || Update X position (only for the spike ball).
    BNE CODE_01B580             ;$01B57B    ||
    JSR SubSprXPosNoGrvty       ;$01B57D    |/
CODE_01B580:                    ;           |
    LDA $AA,X                   ;$01B580    |\ 
    CMP.b #$40                  ;$01B582    || Limit maximum falling Y speed when not in water.
    BPL CODE_01B588             ;$01B584    ||
    INC $AA,X                   ;$01B586    |/

CODE_01B588:                    ;```````````| Handle movement in water.
    LDA.w $164A,X               ;$01B588    |\ Branch if not in water.
    BEQ CODE_01B5A6             ;$01B58B    |/
    LDY.b #$F8                  ;$01B58D    |\ 
    LDA $9E,X                   ;$01B58F    ||
    CMP.b #$5D                  ;$01B591    ||
    BCC CODE_01B597             ;$01B593    ||
    LDY.b #$FC                  ;$01B595    ||
CODE_01B597:                    ;           ||
    STY $00                     ;$01B597    || Make the platform float upwards in water.
    LDA $AA,X                   ;$01B599    ||
    BPL CODE_01B5A1             ;$01B59B    ||
    CMP $00                     ;$01B59D    ||
    BCC CODE_01B5A6             ;$01B59F    ||
CODE_01B5A1:                    ;           ||
    SEC                         ;$01B5A1    ||
    SBC.b #$02                  ;$01B5A2    ||
    STA $AA,X                   ;$01B5A4    |/

CODE_01B5A6:                    ;```````````| Handle interaction with Mario.
    LDA $7D                     ;$01B5A6    |
    PHA                         ;$01B5A8    |
    LDA $9E,X                   ;$01B5A9    |\ 
    CMP.b #$A4                  ;$01B5AB    ||
    BNE CODE_01B5B5             ;$01B5AD    ||
    JSR MarioSprInteractRt      ;$01B5AF    ||
    CLC                         ;$01B5B2    || Handle basic interaction.
    BRA CODE_01B5B8             ;$01B5B3    ||  For the spike ball, hurt mario and make spinjumpable.
CODE_01B5B5:                    ;           ||  For all others, make it a solid platform.
    JSR CODE_01B457             ;$01B5B5    ||
CODE_01B5B8:                    ;           || If they aren't in contact, branch down.
    PLA                         ;$01B5B8    ||
    STA $00                     ;$01B5B9    ||
    STZ.w $185E                 ;$01B5BB    ||
    BCC CODE_01B5E7             ;$01B5BE    |/
    LDA $9E,X                   ;$01B5C0    |\ 
    CMP.b #$5D                  ;$01B5C2    ||
    BCC CODE_01B5DA             ;$01B5C4    ||
    LDY.b #$03                  ;$01B5C6    ||
    LDA $19                     ;$01B5C8    ||
    BNE CODE_01B5CD             ;$01B5CA    ||
    DEY                         ;$01B5CC    || Make the orange platforms sink slowly while Mario is on them.
CODE_01B5CD:                    ;           || Sinks slightly faster if Mario is big.
    STY $00                     ;$01B5CD    ||
    LDA $AA,X                   ;$01B5CF    ||
    CMP $00                     ;$01B5D1    ||
    BPL CODE_01B5DA             ;$01B5D3    ||
    CLC                         ;$01B5D5    ||
    ADC.b #$02                  ;$01B5D6    ||
    STA $AA,X                   ;$01B5D8    |/
CODE_01B5DA:                    ;           |
    INC.w $185E                 ;$01B5DA    |
    LDA $00                     ;$01B5DD    |\ 
    CMP.b #$20                  ;$01B5DF    ||
    BCC CODE_01B5E7             ;$01B5E1    || If Mario lands on a platform with his Y speed greater than #$20,
    LSR                         ;$01B5E3    || divide that speed by 4 and transfer it to the platform.
    LSR                         ;$01B5E4    ||
    STA $AA,X                   ;$01B5E5    |/
CODE_01B5E7:                    ;           |
    LDA.w $185E                 ;$01B5E7    |\ 
    CMP.w $151C,X               ;$01B5EA    ||
    STA.w $151C,X               ;$01B5ED    ||
    BEQ CODE_01B610             ;$01B5F0    || If Mario has just jumped off the platform
    LDA.w $185E                 ;$01B5F2    ||  and it's moving upwards, give it a small push downwards.
    BNE CODE_01B610             ;$01B5F5    ||
    LDA $7D                     ;$01B5F7    ||
    BPL CODE_01B610             ;$01B5F9    ||
    LDY.b #$08                  ;$01B5FB    ||| Y speed to push with when Mario is big.
    LDA $19                     ;$01B5FD    ||
    BNE CODE_01B603             ;$01B5FF    ||
    LDY.b #$06                  ;$01B601    ||| Y speed to push with when Mario is small.
CODE_01B603:                    ;           ||
    STY $00                     ;$01B603    ||
    LDA $AA,X                   ;$01B605    ||
    CMP.b #$20                  ;$01B607    ||
    BPL CODE_01B610             ;$01B609    ||
    CLC                         ;$01B60B    ||
    ADC $00                     ;$01B60C    ||
    STA $AA,X                   ;$01B60E    |/
CODE_01B610:                    ;           |
    LDA.b #$01                  ;$01B610    |\ 
    AND $13                     ;$01B612    || Skip down to graphics every other frame.
    BNE CODE_01B64E             ;$01B614    |/
    LDA $AA,X                   ;$01B616    |\ 
    BEQ CODE_01B624             ;$01B618    ||
    BPL CODE_01B61F             ;$01B61A    || Idle movements.
    CLC                         ;$01B61C    || If Y speed is:
    ADC.b #$02                  ;$01B61D    || - Zero: do nothing
CODE_01B61F:                    ;           || - Upwards (-): accelerate downwards.
    SEC                         ;$01B61F    || - Downwards (+): accelerate upwards.
    SBC.b #$01                  ;$01B620    ||
    STA $AA,X                   ;$01B622    |/
CODE_01B624:                    ;           |
    LDY.w $185E                 ;$01B624    |\ 
    BEQ CODE_01B631             ;$01B627    ||
    LDY.b #$05                  ;$01B629    ||| Distance to push when Mario is big.
    LDA $19                     ;$01B62B    ||
    BNE CODE_01B631             ;$01B62D    ||
    LDY.b #$02                  ;$01B62F    ||| Distance to push when Mario is small.
CODE_01B631:                    ;           ||
    STY $00                     ;$01B631    ||
    LDA $D8,X                   ;$01B633    || If Mario is sitting on the platform, push it down slightly.
    PHA                         ;$01B635    ||
    SEC                         ;$01B636    ||
    SBC $00                     ;$01B637    ||
    STA $D8,X                   ;$01B639    ||
    LDA.w $14D4,X               ;$01B63B    ||
    PHA                         ;$01B63E    ||
    SBC.b #$00                  ;$01B63F    ||
    STA.w $14D4,X               ;$01B641    |/
    JSR CODE_019140             ;$01B644    |] Process interaction with water.
    PLA                         ;$01B647    |
    STA.w $14D4,X               ;$01B648    |
    PLA                         ;$01B64B    |
    STA $D8,X                   ;$01B64C    |

CODE_01B64E:                    ;```````````| Handle graphics.
    JSR SubOffscreen0Bnk1       ;$01B64E    |] Process offscreen from -$40 to +$30.
    LDA $9E,X                   ;$01B651    |\ 
    CMP.b #$A4                  ;$01B653    || Draw graphics. Spike ball routine is below,
    BEQ CODE_01B666             ;$01B655    ||  platform routine is back before this.
    JMP CODE_01B2D1             ;$01B657    |/



DATA_01B65A:                    ;$01B65A    | X offsets for the floating spike ball's tiles.
    db $F8,$08,$F8,$08

DATA_01B65E:                    ;$01B65E    | Y offsets for the floating spike ball's tiles.
    db $F8,$F8,$08,$08

FloatMineGfxProp:               ;$01B662    | YXPPCCCT for the floating spike ball's tiles.
    db $31,$71,$A1,$F1

CODE_01B666:                    ;-----------| GFX routine for the floating spike ball.
    JSR GetDrawInfoBnk1         ;$01B666    |
    PHX                         ;$01B669    |
    LDX.b #$03                  ;$01B66A    |\ 
CODE_01B66C:                    ;           ||
    LDA $00                     ;$01B66C    ||
    CLC                         ;$01B66E    ||
    ADC.w DATA_01B65A,X         ;$01B66F    ||
    STA.w $0300,Y               ;$01B672    ||
    LDA $01                     ;$01B675    ||
    CLC                         ;$01B677    ||
    ADC.w DATA_01B65E,X         ;$01B678    ||
    STA.w $0301,Y               ;$01B67B    ||
    LDA $14                     ;$01B67E    ||
    LSR                         ;$01B680    || Loop for all four tiles of the spike ball.
    LSR                         ;$01B681    ||
    AND.b #$04                  ;$01B682    ||
    LSR                         ;$01B684    ||
    ADC.b #$AA                  ;$01B685    ||| Baese tile. Second tile is to its right.
    STA.w $0302,Y               ;$01B687    ||
    LDA.w FloatMineGfxProp,X    ;$01B68A    ||
    STA.w $0303,Y               ;$01B68D    ||
    INY                         ;$01B690    ||
    INY                         ;$01B691    ||
    INY                         ;$01B692    ||
    INY                         ;$01B693    ||
    DEX                         ;$01B694    ||
    BPL CODE_01B66C             ;$01B695    |/
    PLX                         ;$01B697    |
    LDY.b #$02                  ;$01B698    |\ 
    LDA.b #$03                  ;$01B69A    || Upload 4 16x16 tiles to OAM.
    JMP FinishOAMWriteRt        ;$01B69C    |/





BlkBridgeLength:                ;$01B69F    | Maximum bridge lengths.
    db $20,$00

TurnBlkBridgeSpeed:             ;$01B6A1    | Bridge expansion/retraction speeds.
    db $01,$FF

BlkBridgeTiming:                ;$01B6A3    | How long to wait at max/min lengths before moving again.
    db $40,$40

    ; Turnblock bridge misc RAM:
    ; $C2   - Direction of movement. H/V bridge uses this mod 4; H bridge just alternates 0 and 1.
    ;          0 = extend horz, 1 = retract horz, 2 = extend vert, 3 = retract vert
    ; $151C - Distance currently extended. Max is #$20.
    ; $1540 - Timer to wait before extending/retracting.
    
TurnBlockBridge:                ;-----------| Horizontal/vertical turnblock bridge MAIN.
    JSR SubOffscreen0Bnk1       ;$01B6A5    |] Process offscreen from -$40 to +$30.
    JSR CODE_01B710             ;$01B6A8    |] Draw GFX.
    JSR CODE_01B852             ;$01B6AB    |] Handle contact.
    JSR CODE_01B6B2             ;$01B6AE    |] Run main routine (the routine literally right after this)
    RTS                         ;$01B6B1    |

CODE_01B6B2:                    ;```````````| H/V bridge primary routine.
    LDA $C2,X                   ;$01B6B2    |\ 
    AND.b #$01                  ;$01B6B4    ||
    TAY                         ;$01B6B6    || If at max/min length, branch to move to next phase.
    LDA.w $151C,X               ;$01B6B7    ||
    CMP.w BlkBridgeLength,Y     ;$01B6BA    ||
    BEQ CODE_01B6D1             ;$01B6BD    |/
    LDA.w $1540,X               ;$01B6BF    |\ 
    ORA $9D                     ;$01B6C2    || Return if either the game of bridge is frozen.
    BNE Return01B6D0            ;$01B6C4    |/
    LDA.w $151C,X               ;$01B6C6    |\ 
    CLC                         ;$01B6C9    || Expand/retract the bridge.
    ADC.w TurnBlkBridgeSpeed,Y  ;$01B6CA    ||
    STA.w $151C,X               ;$01B6CD    |/
Return01B6D0:                   ;           |
    RTS                         ;$01B6D0    |

CODE_01B6D1:
    LDA.w BlkBridgeTiming,Y     ;$01B6D1    |\ 
    STA.w $1540,X               ;$01B6D4    || Move to next phase and temporarily freeze the bridge.
    INC $C2,X                   ;$01B6D7    |/
    RTS                         ;$01B6D9    |



HorzTurnBlkBridge:              ;-----------| Horizontal turnblock bridge MAIN (see above for misc RAM).
    JSR SubOffscreen0Bnk1       ;$01B6DA    |] Process offscreen from -$40 to +$30.
    JSR CODE_01B710             ;$01B6DD    |] Draw GFX.
    JSR CODE_01B852             ;$01B6E0    |] Handle contact.
    JSR CODE_01B6E7             ;$01B6E3    |] Run main routine (the routine literally right after this)
    RTS                         ;$01B6E6    |

CODE_01B6E7:                    ;```````````| H bridge primary routine.
    LDY $C2,X                   ;$01B6E7    |\ 
    LDA.w $151C,X               ;$01B6E9    || If at max/min length, branch to move to next phase.
    CMP.w BlkBridgeLength,Y     ;$01B6EC    ||
    BEQ CODE_01B703             ;$01B6EF    |/
    LDA.w $1540,X               ;$01B6F1    |\ 
    ORA $9D                     ;$01B6F4    || Return if either the game of bridge is frozen.
    BNE Return01B702            ;$01B6F6    |/
    LDA.w $151C,X               ;$01B6F8    |\ 
    CLC                         ;$01B6FB    || Expand/retract the bridge.
    ADC.w TurnBlkBridgeSpeed,Y  ;$01B6FC    ||
    STA.w $151C,X               ;$01B6FF    |/
Return01B702:                   ;           |
    RTS                         ;$01B702    |

CODE_01B703:
    LDA.w BlkBridgeTiming,Y     ;$01B703    |\ 
    STA.w $1540,X               ;$01B706    ||
    LDA $C2,X                   ;$01B709    || Move to next phase.
    EOR.b #$01                  ;$01B70B    ||
    STA $C2,X                   ;$01B70D    |/
    RTS                         ;$01B70F    |


    ; Scratch RAM usage and returns:
    ; $00 - Outer tile X offset from center.
    ; $01 - Inner tile X offset from center.
    ; $02 - Outer tile Y offset from center.
    ; $03 - Inner tile Y offset from center.

CODE_01B710:                    ;-----------| Turnblock bridge GFX routine.
    JSR GetDrawInfoBnk1         ;$01B710    |
    STZ $00                     ;$01B713    |\ 
    STZ $01                     ;$01B715    ||
    STZ $02                     ;$01B717    ||
    STZ $03                     ;$01B719    ||
    LDA $C2,X                   ;$01B71B    || Set up the addresses for offsets from
    AND.b #$02                  ;$01B71D    ||  the center base tile.
    TAY                         ;$01B71F    ||
    LDA.w $151C,X               ;$01B720    ||
    STA.w $0000,Y               ;$01B723    ||
    LSR                         ;$01B726    ||
    STA.w $0001,Y               ;$01B727    |/
    LDY.w $15EA,X               ;$01B72A    |
    LDA $D8,X                   ;$01B72D    |\ 
    SEC                         ;$01B72F    ||
    SBC $1C                     ;$01B730    ||
    STA.w $0311,Y               ;$01B732    ||
    PHA                         ;$01B735    ||
    PHA                         ;$01B736    ||
    PHA                         ;$01B737    ||
    SEC                         ;$01B738    ||
    SBC $02                     ;$01B739    ||
    STA.w $0309,Y               ;$01B73B    ||
    PLA                         ;$01B73E    || Set Y position for each tile.
    SEC                         ;$01B73F    ||
    SBC $03                     ;$01B740    ||
    STA.w $030D,Y               ;$01B742    ||
    PLA                         ;$01B745    ||
    CLC                         ;$01B746    ||
    ADC $02                     ;$01B747    ||
    STA.w $0301,Y               ;$01B749    ||
    PLA                         ;$01B74C    ||
    CLC                         ;$01B74D    ||
    ADC $03                     ;$01B74E    ||
    STA.w $0305,Y               ;$01B750    |/
    LDA $E4,X                   ;$01B753    |\ 
    SEC                         ;$01B755    ||
    SBC $1A                     ;$01B756    ||
    STA.w $0310,Y               ;$01B758    ||
    PHA                         ;$01B75B    ||
    PHA                         ;$01B75C    ||
    PHA                         ;$01B75D    ||
    SEC                         ;$01B75E    ||
    SBC $00                     ;$01B75F    ||
    STA.w $0308,Y               ;$01B761    ||
    PLA                         ;$01B764    || Set X position for each tile.
    SEC                         ;$01B765    ||
    SBC $01                     ;$01B766    ||
    STA.w $030C,Y               ;$01B768    ||
    PLA                         ;$01B76B    ||
    CLC                         ;$01B76C    ||
    ADC $00                     ;$01B76D    ||
    STA.w $0300,Y               ;$01B76F    ||
    PLA                         ;$01B772    ||
    CLC                         ;$01B773    ||
    ADC $01                     ;$01B774    ||
    STA.w $0304,Y               ;$01B776    |/
    LDA $C2,X                   ;$01B779    |\ 
    LSR                         ;$01B77B    || Useless?
    LSR                         ;$01B77C    |/
    LDA.b #$40                  ;$01B77D    |\\ Tile number.
    STA.w $0306,Y               ;$01B77F    ||
    STA.w $030E,Y               ;$01B782    || Set tiles.
    STA.w $0312,Y               ;$01B785    ||
    STA.w $030A,Y               ;$01B788    ||
    STA.w $0302,Y               ;$01B78B    |/
    LDA $64                     ;$01B78E    |\ 
    STA.w $030F,Y               ;$01B790    ||
    STA.w $0307,Y               ;$01B793    || Set YXPPCCCT.
    STA.w $030B,Y               ;$01B796    || Rightmost tile takes priority, to prevent odd overlaps.
    STA.w $0313,Y               ;$01B799    ||  It's also X flipped for whatever reason.
    ORA.b #$60                  ;$01B79C    ||
    STA.w $0303,Y               ;$01B79E    |/
    LDA $00                     ;$01B7A1    |
    PHA                         ;$01B7A3    |
    LDA $02                     ;$01B7A4    |
    PHA                         ;$01B7A6    |
    LDA.b #$04                  ;$01B7A7    |\ Upload 5 16x16 tiles to OAM.
    JSR CODE_01B37E             ;$01B7A9    |/
    PLA                         ;$01B7AC    |
    STA $02                     ;$01B7AD    |
    PLA                         ;$01B7AF    |
    STA $00                     ;$01B7B0    |
    RTS                         ;$01B7B2    |





    ; Scratch RAM usage: $00-$0B
    ; $00 - Sprite Y position (low)
    ; $01 - Sprite Y position (high)
    ; $02 - Sprite X position (low)
    ; $03 - Sprite X position (high)
    ; $04 - Current tile X position within the screen (low)
    ; $05 - Current tile X position within the screen (high)
    ; $06 - Sprite X position within the screen
    ; $07 - Sprite X position within the screen
    ; $08 - Number of tiles to draw (returns with #$FF)
    ; $09 - Current tile Y position within the screen (low)
    ; $0A - Current tile Y position within the screen (high)
    ; $0B - Tile size (00 = 8x8, 02 = 16x16, 80+ = manually set)
    
FinishOAMWrite:                 ;-----------| Routine to make sure sprite tiles are on-screen and set their size.
    PHB                         ;$01B7B3    | Usage:
    PHK                         ;$01B7B4    |  A = Number of tiles to draw, -1
    PLB                         ;$01B7B5    |  Y = Tile size (00 = 8x8, 02 = 16x16, 80+ = variable; set size manually)
    JSR FinishOAMWriteRt        ;$01B7B6    | Note: $0300/$0301 must also be set first for each tile before calling this.
    PLB                         ;$01B7B9    |
    RTL                         ;$01B7BA    |

FinishOAMWriteRt:
    STY $0B                     ;$01B7BB    |
    STA $08                     ;$01B7BD    |
    LDY.w $15EA,X               ;$01B7BF    |
    LDA $D8,X                   ;$01B7C2    |\ 
    STA $00                     ;$01B7C4    ||
    SEC                         ;$01B7C6    ||
    SBC $1C                     ;$01B7C7    ||
    STA $06                     ;$01B7C9    ||
    LDA.w $14D4,X               ;$01B7CB    ||
    STA $01                     ;$01B7CE    || Set up position data in scratch RAM.
    LDA $E4,X                   ;$01B7D0    ||
    STA $02                     ;$01B7D2    ||
    SEC                         ;$01B7D4    ||
    SBC $1A                     ;$01B7D5    ||
    STA $07                     ;$01B7D7    ||
    LDA.w $14E0,X               ;$01B7D9    ||
    STA $03                     ;$01B7DC    |/
CODE_01B7DE:                    ;```````````| Main tile loop.
    TYA                         ;$01B7DE    |
    LSR                         ;$01B7DF    |
    LSR                         ;$01B7E0    |
    TAX                         ;$01B7E1    |
    LDA $0B                     ;$01B7E2    |\ 
    BPL CODE_01B7F0             ;$01B7E4    ||
    LDA.w $0460,X               ;$01B7E6    ||
    AND.b #$02                  ;$01B7E9    || Set tile size.
    STA.w $0460,X               ;$01B7EB    ||  If Y was negative, don't change size.
    BRA CODE_01B7F3             ;$01B7EE    ||
CODE_01B7F0:                    ;           ||
    STA.w $0460,X               ;$01B7F0    |/
CODE_01B7F3:                    ;           |
    LDX.b #$00                  ;$01B7F3    |\ 
    LDA.w $0300,Y               ;$01B7F5    ||
    SEC                         ;$01B7F8    ||
    SBC $07                     ;$01B7F9    ||
    BPL CODE_01B7FE             ;$01B7FB    ||
    DEX                         ;$01B7FD    ||
CODE_01B7FE:                    ;           || Get 16-bit X position of the tile within the screen.
    CLC                         ;$01B7FE    ||
    ADC $02                     ;$01B7FF    ||
    STA $04                     ;$01B801    ||
    TXA                         ;$01B803    ||
    ADC $03                     ;$01B804    ||
    STA $05                     ;$01B806    |/
    JSR CODE_01B844             ;$01B808    |\ 
    BCC CODE_01B819             ;$01B80B    ||
    TYA                         ;$01B80D    ||
    LSR                         ;$01B80E    ||
    LSR                         ;$01B80F    || Set OAM high X bit if applicable.
    TAX                         ;$01B810    ||
    LDA.w $0460,X               ;$01B811    ||
    ORA.b #$01                  ;$01B814    ||
    STA.w $0460,X               ;$01B816    |/
CODE_01B819:                    ;           |
    LDX.b #$00                  ;$01B819    |\ 
    LDA.w $0301,Y               ;$01B81B    ||
    SEC                         ;$01B81E    ||
    SBC $06                     ;$01B81F    ||
    BPL CODE_01B824             ;$01B821    ||
    DEX                         ;$01B823    ||
CODE_01B824:                    ;           || Get 16-bit Y position of the tile within the screen.
    CLC                         ;$01B824    ||
    ADC $00                     ;$01B825    ||
    STA $09                     ;$01B827    ||
    TXA                         ;$01B829    ||
    ADC $01                     ;$01B82A    ||
    STA $0A                     ;$01B82C    |/
    JSR CODE_01C9BF             ;$01B82E    |\ 
    BCC CODE_01B838             ;$01B831    || Hide offscreen if applicable.
    LDA.b #$F0                  ;$01B833    ||
    STA.w $0301,Y               ;$01B835    |/
CODE_01B838:                    ;           |
    INY                         ;$01B838    |\ 
    INY                         ;$01B839    ||
    INY                         ;$01B83A    || Loop for all the tiles.
    INY                         ;$01B83B    ||
    DEC $08                     ;$01B83C    ||
    BPL CODE_01B7DE             ;$01B83E    |/
    LDX.w $15E9                 ;$01B840    |
    RTS                         ;$01B843    |


CODE_01B844:                    ;```````````| Returns carry set if the tile is offscreen horizontally, clear if not.
    REP #$20                    ;$01B844    | Store X position in $04 first.
    LDA $04                     ;$01B846    |
    SEC                         ;$01B848    |
    SBC $1A                     ;$01B849    |
    CMP.w #$0100                ;$01B84B    |
    SEP #$20                    ;$01B84E    |
    RTS                         ;$01B850    |

    RTS                         ;$01B851    | rest in peace little buddy





CODE_01B852:                    ;-----------| Contact routine for the turnblock bridge.
    LDA.w $15C4,X               ;$01B852    |\ 
    BNE Return01B8B1            ;$01B855    || Return if:
    LDA $71                     ;$01B857    || - Sprite is offscreen.
    CMP.b #$01                  ;$01B859    || - Mario is in a special animation phase.
    BCS Return01B8B1            ;$01B85B    || - Mario isn't in contact.
    JSR CODE_01B8FF             ;$01B85D    ||
    BCC Return01B8B1            ;$01B860    |/
    LDA $D8,X                   ;$01B862    |\ 
    SEC                         ;$01B864    ||
    SBC $1C                     ;$01B865    ||
    STA $02                     ;$01B867    ||
    SEC                         ;$01B869    || Branch if Mario is below a 1.8 pixel range on top of the sprite.
    SBC $0D                     ;$01B86A    || As with the normal solid routine, it uses on-screen position,
    STA $09                     ;$01B86C    ||  so glitches occur when offscreen.
    LDA $80                     ;$01B86E    || 
    CLC                         ;$01B870    ||
    ADC.b #$18                  ;$01B871    ||
    CMP $09                     ;$01B873    ||
    BCS CODE_01B8B2             ;$01B875    |/
    LDA $7D                     ;$01B877    |\ Return if Mario is moving up. Else, he's on top of the bridge.
    BMI Return01B8B1            ;$01B879    |/
    STZ $7D                     ;$01B87B    | Clear Mario's Y speed.
    LDA.b #$01                  ;$01B87D    |\ Set Mario as standing on a solid sprite.
    STA.w $1471                 ;$01B87F    |/
    LDA $0D                     ;$01B882    |\  
    CLC                         ;$01B884    ||
    ADC.b #$1F                  ;$01B885    ||
    LDY.w $187A                 ;$01B887    ||
    BEQ CODE_01B88F             ;$01B88A    ||
    CLC                         ;$01B88C    ||
    ADC.b #$10                  ;$01B88D    ||
CODE_01B88F:                    ;           || Set Y position on top, accounting for Yoshi.
    STA $00                     ;$01B88F    ||
    LDA $D8,X                   ;$01B891    ||
    SEC                         ;$01B893    ||
    SBC $00                     ;$01B894    ||
    STA $96                     ;$01B896    ||
    LDA.w $14D4,X               ;$01B898    ||
    SBC.b #$00                  ;$01B89B    ||
    STA $97                     ;$01B89D    |/
    LDY.b #$00                  ;$01B89F    |\ 
    LDA.w $1491                 ;$01B8A1    ||
    BPL CODE_01B8A7             ;$01B8A4    ||
    DEY                         ;$01B8A6    ||
CODE_01B8A7:                    ;           ||
    CLC                         ;$01B8A7    || Move Mario with the bridge.
    ADC $94                     ;$01B8A8    ||
    STA $94                     ;$01B8AA    ||
    TYA                         ;$01B8AC    ||
    ADC $95                     ;$01B8AD    ||
    STA $95                     ;$01B8AF    |/
Return01B8B1:                   ;           |
    RTS                         ;$01B8B1    |



CODE_01B8B2:                    ;```````````| Touching bottom of the bridge.
    LDA $02                     ;$01B8B2    |\ 
    CLC                         ;$01B8B4    ||
    ADC $0D                     ;$01B8B5    ||
    STA $02                     ;$01B8B7    ||
    LDA.b #$FF                  ;$01B8B9    ||
    LDY $73                     ;$01B8BB    ||
    BNE CODE_01B8C3             ;$01B8BD    ||
    LDY $19                     ;$01B8BF    || Branch if Mario is not touching the bottom of the bridge.
    BNE CODE_01B8C5             ;$01B8C1    ||  (i.e. touching sides).
CODE_01B8C3:                    ;           ||
    LDA.b #$08                  ;$01B8C3    ||
CODE_01B8C5:                    ;           ||
    CLC                         ;$01B8C5    ||
    ADC $80                     ;$01B8C6    ||
    CMP $02                     ;$01B8C8    ||
    BCC CODE_01B8D5             ;$01B8CA    |/
    LDA $7D                     ;$01B8CC    |\ Return if Mario is moving down.
    BPL Return01B8D4            ;$01B8CE    |/
    LDA.b #$10                  ;$01B8D0    |\\ Y speed to give Mario after hitting the bottom.
    STA $7D                     ;$01B8D2    |/
Return01B8D4:                   ;           |
    RTS                         ;$01B8D4    |

CODE_01B8D5:                    ;```````````| Touching sides of the block.
    LDA $0E                     ;$01B8D5    |\ 
    CLC                         ;$01B8D7    ||
    ADC.b #$10                  ;$01B8D8    ||
    STA $00                     ;$01B8DA    ||
    LDY.b #$00                  ;$01B8DC    ||
    LDA $E4,X                   ;$01B8DE    ||
    SEC                         ;$01B8E0    ||
    SBC $1A                     ;$01B8E1    ||
    CMP $7E                     ;$01B8E3    ||
    BCC CODE_01B8EF             ;$01B8E5    ||
    LDA $00                     ;$01B8E7    ||
    EOR.b #$FF                  ;$01B8E9    || Shove Mario to the side and clear his X speed.
    INC A                       ;$01B8EB    ||
    STA $00                     ;$01B8EC    ||
    DEY                         ;$01B8EE    ||
CODE_01B8EF:                    ;           ||
    LDA $E4,X                   ;$01B8EF    ||
    CLC                         ;$01B8F1    ||
    ADC $00                     ;$01B8F2    ||
    STA $94                     ;$01B8F4    ||
    TYA                         ;$01B8F6    ||
    ADC.w $14E0,X               ;$01B8F7    ||
    STA $95                     ;$01B8FA    ||
    STZ $7B                     ;$01B8FC    |/
    RTS                         ;$01B8FE    |



CODE_01B8FF:                    ;-----------| Check for contact between Mario and the turnblock bridge.
    LDA $00                     ;$01B8FF    |\ 
    STA $0E                     ;$01B901    ||
    LDA $02                     ;$01B903    ||
    STA $0D                     ;$01B905    ||
    LDA $E4,X                   ;$01B907    ||
    SEC                         ;$01B909    ||
    SBC $00                     ;$01B90A    ||
    STA $04                     ;$01B90C    ||
    LDA.w $14E0,X               ;$01B90E    ||
    SBC.b #$00                  ;$01B911    ||
    STA $0A                     ;$01B913    ||
    LDA $00                     ;$01B915    ||
    ASL                         ;$01B917    ||
    CLC                         ;$01B918    || Set up all the addresses and
    ADC.b #$10                  ;$01B919    || check for contact.
    STA $06                     ;$01B91B    ||
    LDA $D8,X                   ;$01B91D    ||
    SEC                         ;$01B91F    ||
    SBC $02                     ;$01B920    ||
    STA $05                     ;$01B922    ||
    LDA.w $14D4,X               ;$01B924    ||
    SBC.b #$00                  ;$01B927    ||
    STA $0B                     ;$01B929    ||
    LDA $02                     ;$01B92B    ||
    ASL                         ;$01B92D    ||
    CLC                         ;$01B92E    ||
    ADC.b #$10                  ;$01B92F    ||
    STA $07                     ;$01B931    ||
    JSL GetMarioClipping        ;$01B933    ||
    JSL CheckForContact         ;$01B937    |/
    RTS                         ;$01B93B    |





HorzNetKoopaSpeed:              ;$01B93C    | Intial X speeds for the horizontal net Koopa.
    db $08,$F8

InitHorzNetKoopa:               ;-----------| Horizontal climbing net Koopa INIT.
    JSR SubHorzPosBnk1          ;$01B93E    |\ 
    LDA.w HorzNetKoopaSpeed,Y   ;$01B941    || Move towards Mario.
    STA $B6,X                   ;$01B944    |/
    BRA CODE_01B950             ;$01B946    |

InitVertNetKoopa:               ;-----------| Vertical climbing net Koopa INIT.
    INC $C2,X                   ;$01B948    |
    INC $B6,X                   ;$01B94A    |
    LDA.b #$F8                  ;$01B94C    |\\ Initial Y speed.
    STA $AA,X                   ;$01B94E    |/
CODE_01B950:                    ;           |
    LDA $E4,X                   ;$01B950    |\ 
    LDY.b #$00                  ;$01B952    ||
    AND.b #$10                  ;$01B954    ||
    BNE CODE_01B959             ;$01B956    || Start in front/behind scenery depending on X position.
    INY                         ;$01B958    ||
CODE_01B959:                    ;           ||
    TYA                         ;$01B959    ||
    STA.w $1632,X               ;$01B95A    |/
    LDA.w $15F6,X               ;$01B95D    |\ 
    AND.b #$02                  ;$01B960    ||
    BNE Return01B968            ;$01B962    || Double X/Y speed if red.
    ASL $B6,X                   ;$01B964    ||
    ASL $AA,X                   ;$01B966    |/
Return01B968:                   ;           |
    RTS                         ;$01B968    |





DATA_01B969:                    ;$01B969    | Animation frames during the turning animation.
    db $02,$02,$03,$04,$03      ; Horz A - Horz B - Vert A - Vert B - Vert C
    db $02,$02,$02,$01,$02      ; Special-World-Passed alternatives to the above five.

DATA_01B973:                    ;$01B973    | GFX pages for the above frames.
    db $01,$01,$00,$00,$00
    db $01,$01,$01,$01,$01

DATA_01B97D:                    ;$01B97D    | Directions to check for blocks for each type.
    db $03,$0C

    ; Net Koopa misc RAM:
    ; $C2   - Whether the sprite is horizontal (00) or vertical (01).
    ; $1540 - Timer for the turning animation. Set to #$50 at the start.
    ; $1570 - Frame counter for animation.
    ; $157C - Direction of movement. 0 = right/up, 1 = left/down
    ; $15AC - Timer for turning around.
    ; $1602 - Animation frame to use for the Koopa.
    ;          0 = in front of net, 1 = behind net
    ;          2 = turning (horz), 3/4 = turning (vert)
    
ClimbingKoopa:                  ;-----------| Climbing net Koopa MAIN
    LDA.w $1540,X               ;$01B97F    |\ Branch if the stun timer is 0.
    BEQ CODE_01B9FB             ;$01B982    |/
    CMP.b #$30                  ;$01B984    |\ Branch if the stun timer is 1-2F.
    BCC CODE_01B9A0             ;$01B986    |/
    CMP.b #$40                  ;$01B988    |\ Branch if the stun timer is 30-3F.
    BCC CODE_01B9A3             ;$01B98A    |/
    BNE CODE_01B9A0             ;$01B98C    |\ 
    LDY $9D                     ;$01B98E    || Branch if the stun timer is 41+ or sprites are locked.
    BNE CODE_01B9A0             ;$01B990    |/
    LDA.w $1632,X               ;$01B992    |\ 
    EOR.b #$01                  ;$01B995    || Stun timer is 40; flip its direction,
    STA.w $1632,X               ;$01B997    ||  invert its Y speed, and
    JSR FlipSpriteDir           ;$01B99A    ||  invert the side of the fence the Koopa is on.
    JSR CODE_01BA7F             ;$01B99D    |/  
CODE_01B9A0:                    ;           |
    JMP CODE_01BA37             ;$01B9A0    |


CODE_01B9A3:                    ;```````````| Koopa is in the process of turning; handle animation.
    LDY $D8,X                   ;$01B9A3    |
    PHY                         ;$01B9A5    |
    LDY.w $14D4,X               ;$01B9A6    |
    PHY                         ;$01B9A9    |
    LDY.b #$00                  ;$01B9AA    |\\ 
    CMP.b #$38                  ;$01B9AC    ||| Get base index (0/1) based on stun timer.
    BCC CODE_01B9B1             ;$01B9AE    |||
    INY                         ;$01B9B0    ||/
CODE_01B9B1:                    ;           ||
    LDA $C2,X                   ;$01B9B1    ||\ 
    BEQ CODE_01B9CC             ;$01B9B3    |||
    INY                         ;$01B9B5    |||
    INY                         ;$01B9B6    |||
    LDA $D8,X                   ;$01B9B7    |||
    SEC                         ;$01B9B9    ||| If vertical, switch to next set (2/3).
    SBC.b #$0C                  ;$01B9BA    |||  If coming from behind the net, use 3/4 instead, to reverse the animation.
    STA $D8,X                   ;$01B9BC    |||
    LDA.w $14D4,X               ;$01B9BE    ||| Also, shift its position up 12 pixels too, to push it on top of the net.
    SBC.b #$00                  ;$01B9C1    |||
    STA.w $14D4,X               ;$01B9C3    |||
    LDA.w $1632,X               ;$01B9C6    |||
    BEQ CODE_01B9CC             ;$01B9C9    |||
    INY                         ;$01B9CB    ||/
CODE_01B9CC:                    ;           ||
    LDA.w $1EEB                 ;$01B9CC    ||\ 
    BPL CODE_01B9D6             ;$01B9CF    |||
    INY                         ;$01B9D1    ||| If the special world is passed, switch from 0-4 to 5-7.
    INY                         ;$01B9D2    |||  Likely meant to prevent conflict from the modified Koopa graphics.
    INY                         ;$01B9D3    |||
    INY                         ;$01B9D4    |||
    INY                         ;$01B9D5    ||/
CODE_01B9D6:                    ;           ||
    LDA.w DATA_01B969,Y         ;$01B9D6    ||\ 
    STA.w $1602,X               ;$01B9D9    |||
    LDA.w DATA_01B973,Y         ;$01B9DC    |||
    STA $00                     ;$01B9DF    |||
    LDA.w $15F6,X               ;$01B9E1    ||| Use all of the above to get the proper animation frame and graphics page.
    PHA                         ;$01B9E4    |||
    AND.b #$FE                  ;$01B9E5    |||
    ORA $00                     ;$01B9E7    |||
    STA.w $15F6,X               ;$01B9E9    ||/
    JSR SubSprGfx1              ;$01B9EC    || Draw the sprite.
    PLA                         ;$01B9EF    ||
    STA.w $15F6,X               ;$01B9F0    |/
    PLA                         ;$01B9F3    |
    STA.w $14D4,X               ;$01B9F4    |
    PLA                         ;$01B9F7    |
    STA $D8,X                   ;$01B9F8    |
    RTS                         ;$01B9FA    |


CODE_01B9FB:                    ;```````````| Koopa is not turning.
    LDA $9D                     ;$01B9FB    |\ Branch if the game is frozen.
    BNE CODE_01BA53             ;$01B9FD    |/
    JSR CODE_019140             ;$01B9FF    |\ 
    LDY $C2,X                   ;$01BA02    ||
    LDA.w $1588,X               ;$01BA04    ||
    AND.w DATA_01B97D,Y         ;$01BA07    ||
    BEQ CODE_01BA14             ;$01BA0A    || If it hits a block, reverse its direction of movement.
CODE_01BA0C:                    ;           ||
    JSR FlipSpriteDir           ;$01BA0C    ||
    JSR CODE_01BA7F             ;$01BA0F    ||
    BRA CODE_01BA37             ;$01BA12    |/

CODE_01BA14:                    ;```````````| Normal movement.
    LDA.w $185F                 ;$01BA14    |\ 
    LDY $AA,X                   ;$01BA17    ||
    BEQ CODE_01BA27             ;$01BA19    ||
    BPL CODE_01BA1F             ;$01BA1B    ||
    BMI CODE_01BA2A             ;$01BA1D    ||
CODE_01BA1F:                    ;           ||
    CMP.b #$07                  ;$01BA1F    ||
    BCC CODE_01BA0C             ;$01BA21    ||
    CMP.b #$1D                  ;$01BA23    ||
    BCS CODE_01BA0C             ;$01BA25    || If no longer touching a fence tile, set the sprite to turn around.
CODE_01BA27:                    ;           ||
    LDA.w $1860                 ;$01BA27    ||
CODE_01BA2A:                    ;           ||
    CMP.b #$07                  ;$01BA2A    ||
    BCC CODE_01BA32             ;$01BA2C    ||
    CMP.b #$1D                  ;$01BA2E    ||
    BCC CODE_01BA37             ;$01BA30    ||
CODE_01BA32:                    ;           ||
    LDA.b #$50                  ;$01BA32    ||
    STA.w $1540,X               ;$01BA34    |/

CODE_01BA37:                    ;```````````| Handle general functions.
    LDA $9D                     ;$01BA37    |\ If the game is frozen, just draw graphics.
    BNE CODE_01BA53             ;$01BA39    |/
    INC.w $1570,X               ;$01BA3B    |
    JSR UpdateDirection         ;$01BA3E    |\ 
    LDA $C2,X                   ;$01BA41    ||
    BNE CODE_01BA4A             ;$01BA43    ||
    JSR SubSprXPosNoGrvty       ;$01BA45    || Update direction and position.
    BRA CODE_01BA4D             ;$01BA48    ||
CODE_01BA4A:                    ;           ||
    JSR SubSprYPosNoGrvty       ;$01BA4A    |/
CODE_01BA4D:                    ;           |
    JSR MarioSprInteractRt      ;$01BA4D    | Interact with Mario.
    JSR SubOffscreen0Bnk1       ;$01BA50    | Process offscreen from -$40 to +$30.
CODE_01BA53:                    ;           |
    LDA.w $157C,X               ;$01BA53    |\ 
    PHA                         ;$01BA56    ||
    LDA.w $1570,X               ;$01BA57    ||
    AND.b #$08                  ;$01BA5A    ||
    LSR                         ;$01BA5C    ||
    LSR                         ;$01BA5D    || Climbing animation.
    LSR                         ;$01BA5E    ||
    STA.w $157C,X               ;$01BA5F    ||
    LDA $64                     ;$01BA62    ||
    PHA                         ;$01BA64    ||
    LDA.w $1632,X               ;$01BA65    ||
    STA.w $1602,X               ;$01BA68    |/
    LDA.w $1632,X               ;$01BA6B    |\ 
    BEQ CODE_01BA74             ;$01BA6E    ||
    LDA.b #$10                  ;$01BA70    || Draw graphics.
    STA $64                     ;$01BA72    ||  Send behind objects if applicable.
CODE_01BA74:                    ;           ||
    JSR SubSprGfx1              ;$01BA74    |/
    PLA                         ;$01BA77    |
    STA $64                     ;$01BA78    |
    PLA                         ;$01BA7A    |
    STA.w $157C,X               ;$01BA7B    |
    RTS                         ;$01BA7E    |



CODE_01BA7F:                    ;-----------| Invert Y speed. 
    LDA $AA,X                   ;$01BA7F    |
    EOR.b #$FF                  ;$01BA81    |
    INC A                       ;$01BA83    |
    STA $AA,X                   ;$01BA84    |
    RTS                         ;$01BA86    |





InitClimbingDoor:               ;-----------| Climbing door INIT
    LDA $E4,X                   ;$01BA87    |\ 
    CLC                         ;$01BA89    ||
    ADC.b #$08                  ;$01BA8A    ||
    STA $E4,X                   ;$01BA8C    || Offset X/Y position to line up with the object.
    LDA $D8,X                   ;$01BA8E    ||
    ADC.b #$07                  ;$01BA90    ||
    STA $D8,X                   ;$01BA92    |/
    RTS                         ;$01BA94    |



DATA_01BA95:                    ;$01BA95    | Unused?
    db $30,$54

DATA_01BA97:                    ;$01BA497   | Offsets from their normal position to draw the columns for each frame of the animation.
    db $00,$01,$02,$04,$06,$09,$0C,$0D
    db $14,$0D,$0C,$09,$06,$04,$02,$01

DATA_01BAA7:                    ;$01BAA7    | Number of columns to not draw for each frame of the animation.
    db $00,$00,$00,$00,$00,$01,$01,$01
    db $02,$01,$01,$01,$00,$00,$00,$00

DATA_01BAB7:                    ;$01BAB7    | Tile numbers to use based on the number of columns.
    db $00,$10,$00,$00,$10,$00,$01,$11,$01  ; Three columns
    db $05,$15,$05,$05,$15,$05              ; Two columns
    db $00,$00,$00                          ; (unused)
    db $03,$13,$03                          ; One column

Return01BACC:
    RTS                         ;$01BACC    |

    ; Climbing door misc RAM:
    ; $1540 - Timer for the turning animation.
    ; $154C - Timer to wait briefly after being hit before turning. Set to #$07 on hit.
    
ClimbingDoor:                   ;-----------| Climbing door MAIN
    JSR SubOffscreen0Bnk1       ;$01BACD    | Process offscreen from -$40 to +$30.
    LDA.w $154C,X               ;$01BAD0    |\ 
    CMP.b #$01                  ;$01BAD3    || Handle Mario preparing the fence to turn shortly after being hit.
    BNE CODE_01BAF5             ;$01BAD5    ||
    LDA.b #$0F                  ;$01BAD7    ||\ SFX for the door turning.
    STA.w $1DF9                 ;$01BAD9    ||/
    LDA.b #$19                  ;$01BADC    ||\ Erase the net object below.
    JSL GenTileFromSpr2         ;$01BADE    ||/
    LDA.b #$1F                  ;$01BAE2    ||\ 
    STA.w $1540,X               ;$01BAE4    ||| Start the turn.
    STA.w $149D                 ;$01BAE7    ||/
    LDA $94                     ;$01BAEA    ||\ 
    SEC                         ;$01BAEC    |||
    SBC.b #$10                  ;$01BAED    ||| Preserve Mario's distance from the center of the net.
    SEC                         ;$01BAEF    |||  Routine that uses it is at $00DB17.
    SBC $E4,X                   ;$01BAF0    |||
    STA.w $1878                 ;$01BAF2    |//
CODE_01BAF5:                    ;           |
    LDA.w $1540,X               ;$01BAF5    |\ 
    ORA.w $154C,X               ;$01BAF8    ||
    BNE CODE_01BB16             ;$01BAFB    ||
    JSL GetSpriteClippingA      ;$01BAFD    || Mark the net as hit and ready to turn if:
    JSR CODE_01BC1D             ;$01BB01    ||  - Not already turning/being hit.
    JSL CheckForContact         ;$01BB04    ||  - Mario is in contact.
    BCC CODE_01BB16             ;$01BB08    ||  - Mario has punched the net.
    LDA.w $149E                 ;$01BB0A    ||
    CMP.b #$01                  ;$01BB0D    ||
    BNE CODE_01BB16             ;$01BB0F    ||
    LDA.b #$06                  ;$01BB11    ||
    STA.w $154C,X               ;$01BB13    |/
CODE_01BB16:                    ;           |
    LDA.w $1540,X               ;$01BB16    |\ Return (and don't draw) if not in the process of turning.
    BEQ Return01BACC            ;$01BB19    |/
    CMP.b #$01                  ;$01BB1B    |\ 
    BNE CODE_01BB27             ;$01BB1D    ||
    PHA                         ;$01BB1F    || Restore the net object below the fence if finished turning.
    LDA.b #$1A                  ;$01BB20    ||
    JSL GenTileFromSpr2         ;$01BB22    ||
    PLA                         ;$01BB26    |/
CODE_01BB27:                    ;           |
    CMP.b #$10                  ;$01BB27    |\ 
    BNE CODE_01BB33             ;$01BB29    ||
    LDA.w $13F9                 ;$01BB2B    || Invert Mario's layer when halfway turned.
    EOR.b #$01                  ;$01BB2E    ||
    STA.w $13F9                 ;$01BB30    |/
CODE_01BB33:                    ;```````````| Climbing door GFX routine.
    LDA.b #$30                  ;$01BB33    |\\ OAM slot for the climbing door.
    STA.w $15EA,X               ;$01BB35    |/
    STA $03                     ;$01BB38    |
    TAY                         ;$01BB3A    |
    LDA $E4,X                   ;$01BB3B    |\ 
    SEC                         ;$01BB3D    ||
    SBC $1A                     ;$01BB3E    ||
    STA $00                     ;$01BB40    ||
    LDA $D8,X                   ;$01BB42    || Set up some scratch RAM.
    SEC                         ;$01BB44    ||  $00 - X position
    SBC $1C                     ;$01BB45    ||  $01 - Y position
    STA $01                     ;$01BB47    ||  $02 - Turn timer, divided by 2
    LDA.w $1540,X               ;$01BB49    ||  $06 - Number of columns to not draw.
    LSR                         ;$01BB4C    ||
    STA $02                     ;$01BB4D    ||
    TAX                         ;$01BB4F    ||
    LDA.w DATA_01BAA7,X         ;$01BB50    ||
    STA $06                     ;$01BB53    |/
    LDA $00                     ;$01BB55    |\ 
    CLC                         ;$01BB57    ||
    ADC.w DATA_01BA97,X         ;$01BB58    ||
    STA.w $0300,Y               ;$01BB5B    ||
    STA.w $0304,Y               ;$01BB5E    ||
    STA.w $0308,Y               ;$01BB61    ||
    LDA $06                     ;$01BB64    ||
    CMP.b #$02                  ;$01BB66    ||
    BEQ CODE_01BB8E             ;$01BB68    ||
    LDA $00                     ;$01BB6A    ||
    CLC                         ;$01BB6C    ||
    ADC.b #$20                  ;$01BB6D    ||
    SEC                         ;$01BB6F    || Set X positions.
    SBC.w DATA_01BA97,X         ;$01BB70    ||
    STA.w $030C,Y               ;$01BB73    ||
    STA.w $0310,Y               ;$01BB76    ||
    STA.w $0314,Y               ;$01BB79    ||
    LDA $06                     ;$01BB7C    ||
    BNE CODE_01BB8E             ;$01BB7E    ||
    LDA $00                     ;$01BB80    ||
    CLC                         ;$01BB82    ||
    ADC.b #$10                  ;$01BB83    ||
    STA.w $0318,Y               ;$01BB85    ||
    STA.w $031C,Y               ;$01BB88    ||
    STA.w $0320,Y               ;$01BB8B    |/
CODE_01BB8E:                    ;           |
    LDA $01                     ;$01BB8E    |\ 
    STA.w $0301,Y               ;$01BB90    ||
    STA.w $030D,Y               ;$01BB93    ||
    STA.w $0319,Y               ;$01BB96    ||
    CLC                         ;$01BB99    ||
    ADC.b #$10                  ;$01BB9A    ||
    STA.w $0305,Y               ;$01BB9C    ||
    STA.w $0311,Y               ;$01BB9F    || Set Y positions.
    STA.w $031D,Y               ;$01BBA2    ||
    CLC                         ;$01BBA5    ||
    ADC.b #$10                  ;$01BBA6    ||
    STA.w $0309,Y               ;$01BBA8    ||
    STA.w $0315,Y               ;$01BBAB    ||
    STA.w $0321,Y               ;$01BBAE    |/
    LDA.b #$08                  ;$01BBB1    |\ 
    STA $07                     ;$01BBB3    ||
    LDA $06                     ;$01BBB5    ||
    ASL                         ;$01BBB7    ||
    ASL                         ;$01BBB8    ||
    ASL                         ;$01BBB9    ||
    ADC $06                     ;$01BBBA    ||
    TAX                         ;$01BBBC    ||
CODE_01BBBD:                    ;           || Set tile numbers.
    LDA.w DATA_01BAB7,X         ;$01BBBD    ||
    STA.w $0302,Y               ;$01BBC0    ||
    INY                         ;$01BBC3    ||
    INY                         ;$01BBC4    ||
    INY                         ;$01BBC5    ||
    INY                         ;$01BBC6    ||
    INX                         ;$01BBC7    ||
    DEC $07                     ;$01BBC8    ||
    BPL CODE_01BBBD             ;$01BBCA    |/
    LDY $03                     ;$01BBCC    |\ 
    LDX.b #$08                  ;$01BBCE    ||
CODE_01BBD0:                    ;           ||
    LDA $64                     ;$01BBD0    ||
    ORA.b #$09                  ;$01BBD2    ||| CCCT bits.
    CPX.b #$06                  ;$01BBD4    ||
    BCS CODE_01BBDA             ;$01BBD6    ||
    ORA.b #$40                  ;$01BBD8    ||
CODE_01BBDA:                    ;           ||
    CPX.b #$00                  ;$01BBDA    ||
    BEQ CODE_01BBE6             ;$01BBDC    || Set YXPPCCCT.
    CPX.b #$03                  ;$01BBDE    ||  Set X bit for right column,
    BEQ CODE_01BBE6             ;$01BBE0    ||  and Y bit for bottom row.
    CPX.b #$06                  ;$01BBE2    ||
    BNE CODE_01BBE8             ;$01BBE4    ||
CODE_01BBE6:                    ;           ||
    ORA.b #$80                  ;$01BBE6    ||
CODE_01BBE8:                    ;           ||
    STA.w $0303,Y               ;$01BBE8    ||
    INY                         ;$01BBEB    ||
    INY                         ;$01BBEC    ||
    INY                         ;$01BBED    ||
    INY                         ;$01BBEE    ||
    DEX                         ;$01BBEF    ||
    BPL CODE_01BBD0             ;$01BBF0    |/
    LDA $06                     ;$01BBF2    |
    PHA                         ;$01BBF4    |
    LDX.w $15E9                 ;$01BBF5    |\ 
    LDA.b #$08                  ;$01BBF8    || Draw 9 16x16 tiles.
    JSR CODE_01B37E             ;$01BBFA    |/
    LDY.b #$0C                  ;$01BBFD    |\ 
    PLA                         ;$01BBFF    ||
    BEQ Return01BC1C            ;$01BC00    ||
    CMP.b #$02                  ;$01BC02    ||
    BNE CODE_01BC11             ;$01BC04    ||
    LDA.b #$03                  ;$01BC06    ||
    STA.w $0463,Y               ;$01BC08    || Send unused columns offscreen.
    STA.w $0464,Y               ;$01BC0B    ||
    STA.w $0465,Y               ;$01BC0E    ||
CODE_01BC11:                    ;           ||
    LDA.b #$03                  ;$01BC11    ||
    STA.w $0466,Y               ;$01BC13    ||
    STA.w $0467,Y               ;$01BC16    ||
    STA.w $0468,Y               ;$01BC19    |/
Return01BC1C:                   ;           |
    RTS                         ;$01BC1C    |



CODE_01BC1D:                    ;-----------| Set clipping values for Mario. Used for the rotating fence sprite.
    LDA $94                     ;$01BC1D    |  Why they didn't just change the sprite's hitbox, who knows.
    STA $00                     ;$01BC1F    |
    LDA $96                     ;$01BC21    |
    STA $01                     ;$01BC23    |
    LDA.b #$10                  ;$01BC25    |
    STA $02                     ;$01BC27    |
    STA $03                     ;$01BC29    |
    LDA $95                     ;$01BC2B    |
    STA $08                     ;$01BC2D    |
    LDA $97                     ;$01BC2F    |
    STA $09                     ;$01BC31    |
    RTS                         ;$01BC33    |





MagiKoopasMagicPals:            ;$01BC34    | Palettes for the magic to cycle through.
    db $05,$07,$09,$0B

MagikoopasMagic:                ;-----------| Magikoopa magic MAIN
    LDA $9D                     ;$01BC38    |\ 
    BEQ CODE_01BC3F             ;$01BC3A    || If the game is frozen, just draw graphics.
    JMP CODE_01BCBD             ;$01BC3C    |/

CODE_01BC3F:
    JSR CODE_01B14E             ;$01BC3F    | Draw glitter.
    JSR SubSprYPosNoGrvty       ;$01BC42    |\ Update X/Y position.
    JSR SubSprXPosNoGrvty       ;$01BC45    |/
    LDA $AA,X                   ;$01BC48    |\ 
    PHA                         ;$01BC4A    ||
    LDA.b #$FF                  ;$01BC4B    ||
    STA $AA,X                   ;$01BC4D    || Interact with blocks.
    JSR CODE_019140             ;$01BC4F    ||
    PLA                         ;$01BC52    ||
    STA $AA,X                   ;$01BC53    |/
    JSR IsTouchingCeiling       ;$01BC55    |\ 
    BEQ CODE_01BCBD             ;$01BC58    || If offscreen or not touching a ceiling, branch to interact with sprites and draw graphics.
    LDA.w $15A0,X               ;$01BC5A    ||
    BNE CODE_01BCBD             ;$01BC5D    |/
    LDA.b #$01                  ;$01BC5F    |\ SFX for the Magikoopa's magic hitting a block.
    STA.w $1DF9                 ;$01BC61    |/
    STZ.w $14C8,X               ;$01BC64    |
    LDA.w $185F                 ;$01BC67    |\ 
    SEC                         ;$01BC6A    ||
    SBC.b #$11                  ;$01BC6B    || If not hitting tiles 111-12D, just erase it in a cloud of smoke.
    CMP.b #$1D                  ;$01BC6D    ||
    BCS CODE_01BCB9             ;$01BC6F    |/
    JSL GetRand                 ;$01BC71    |\ 
    ADC.w $148E                 ;$01BC75    ||
    ADC $7B                     ;$01BC78    ||
    ADC $13                     ;$01BC7A    ||
    LDY.b #$78                  ;$01BC7C    ||| Magikoopa magic sprite spawn A (1up)
    CMP.b #$35                  ;$01BC7E    ||
    BEQ StoreSpriteNum          ;$01BC80    ||
    LDY.b #$21                  ;$01BC82    ||| Magikoopa magic sprite spawn B (coin)
    CMP.b #$08                  ;$01BC84    ||
    BCC StoreSpriteNum          ;$01BC86    ||
    LDY.b #$27                  ;$01BC88    ||| Magikoopa magic sprite spawn C (Thwimp)
    CMP.b #$F7                  ;$01BC8A    ||
    BCS StoreSpriteNum          ;$01BC8C    ||
    LDY.b #$07                  ;$01BC8E    ||| Magikoopa magic sprite spawn D (yellow Koopa)
StoreSpriteNum:                 ;           ||
    STY $9E,X                   ;$01BC90    ||
    LDA.b #$08                  ;$01BC92    || Turn the block into a random sprite Their chances are:
    STA.w $14C8,X               ;$01BC94    || - 1up: 1/256
    JSL InitSpriteTables        ;$01BC97    || - Coin: 8/256
    LDA $9B                     ;$01BC9B    || - Thwimp: 9/256
    STA.w $14E0,X               ;$01BC9D    || - Koopa: 238/256
    LDA $9A                     ;$01BCA0    ||
    AND.b #$F0                  ;$01BCA2    ||
    STA $E4,X                   ;$01BCA4    ||
    LDA $99                     ;$01BCA6    ||
    STA.w $14D4,X               ;$01BCA8    ||
    LDA $98                     ;$01BCAB    ||
    AND.b #$F0                  ;$01BCAD    ||
    STA $D8,X                   ;$01BCAF    |/
    LDA.b #$02                  ;$01BCB1    |\ 
    STA $9C                     ;$01BCB3    || Erase the block.
    JSL GenerateTile            ;$01BCB5    |/
CODE_01BCB9:                    ;           |
    JSR CODE_01BD98             ;$01BCB9    | Spawn a smoke sprite.
    RTS                         ;$01BCBC    |


CODE_01BCBD:
    JSR SubSprSprPMarioSpr      ;$01BCBD    | Interact with sprites/Mario.
    LDA $13                     ;$01BCC0    |\ 
    LSR                         ;$01BCC2    ||
    LSR                         ;$01BCC3    ||
    AND.b #$03                  ;$01BCC4    || Get palette.
    TAY                         ;$01BCC6    ||
    LDA.w MagiKoopasMagicPals,Y ;$01BCC7    ||
    STA.w $15F6,X               ;$01BCCA    |/
    JSR MagiKoopasMagicGfx      ;$01BCCD    | Draw graphics.
    JSR SubOffscreen0Bnk1       ;$01BCD0    | Process offscreen from -$40 to +$30.
    LDA $D8,X                   ;$01BCD3    |\ 
    SEC                         ;$01BCD5    ||
    SBC $1C                     ;$01BCD6    || Erase if it goes off the bottom of the screen.
    CMP.b #$E0                  ;$01BCD8    ||
    BCC Return01BCDF            ;$01BCDA    ||
    STZ.w $14C8,X               ;$01BCDC    |/
Return01BCDF:                   ;           |
    RTS                         ;$01BCDF    |



MagiKoopasMagicDisp:            ;$01BCE0    | X/Y offsets for the magic's tiles during the animation.
    db $00,$01,$02,$05,$08,$0B,$0E,$0F
    db $10,$0F,$0E,$0B,$08,$05,$02,$01

MagiKoopasMagicGfx:             ;-----------| Magikoopa magic GFX routine.
    JSR GetDrawInfoBnk1         ;$01BCF0    |
    LDA $14                     ;$01BCF3    |
    LSR                         ;$01BCF5    |
    AND.b #$0F                  ;$01BCF6    |
    STA $03                     ;$01BCF8    |
    CLC                         ;$01BCFA    |
    ADC.b #$0C                  ;$01BCFB    |
    AND.b #$0F                  ;$01BCFD    |
    STA $02                     ;$01BCFF    |
    LDA $01                     ;$01BD01    |
    SEC                         ;$01BD03    |
    SBC.b #$04                  ;$01BD04    |
    STA $01                     ;$01BD06    |
    LDA $00                     ;$01BD08    |
    SEC                         ;$01BD0A    |
    SBC.b #$04                  ;$01BD0B    |
    STA $00                     ;$01BD0D    |
    LDX $02                     ;$01BD0F    |\ 
    LDA $01                     ;$01BD11    ||
    CLC                         ;$01BD13    || Set Y position for the circle.
    ADC.w MagiKoopasMagicDisp,X ;$01BD14    ||
    STA.w $0301,Y               ;$01BD17    |/
    LDX $03                     ;$01BD1A    |\ 
    LDA $00                     ;$01BD1C    ||
    CLC                         ;$01BD1E    || Set X position for the circle.
    ADC.w MagiKoopasMagicDisp,X ;$01BD1F    ||
    STA.w $0300,Y               ;$01BD22    |/
    LDA $02                     ;$01BD25    |\ 
    CLC                         ;$01BD27    ||
    ADC.b #$05                  ;$01BD28    ||
    AND.b #$0F                  ;$01BD2A    ||
    STA $02                     ;$01BD2C    || Set Y position for the square.
    TAX                         ;$01BD2E    ||
    LDA $01                     ;$01BD2F    ||
    CLC                         ;$01BD31    ||
    ADC.w MagiKoopasMagicDisp,X ;$01BD32    ||
    STA.w $0305,Y               ;$01BD35    |/
    LDA $03                     ;$01BD38    |\ 
    CLC                         ;$01BD3A    ||
    ADC.b #$05                  ;$01BD3B    ||
    AND.b #$0F                  ;$01BD3D    ||
    STA $03                     ;$01BD3F    || Set X position for the square.
    TAX                         ;$01BD41    ||
    LDA $00                     ;$01BD42    ||
    CLC                         ;$01BD44    ||
    ADC.w MagiKoopasMagicDisp,X ;$01BD45    ||
    STA.w $0304,Y               ;$01BD48    |/
    LDA $02                     ;$01BD4B    |\ 
    CLC                         ;$01BD4D    ||
    ADC.b #$05                  ;$01BD4E    ||
    AND.b #$0F                  ;$01BD50    ||
    STA $02                     ;$01BD52    || Set Y position for the triangle.
    TAX                         ;$01BD54    ||
    LDA $01                     ;$01BD55    || 
    CLC                         ;$01BD57    ||
    ADC.w MagiKoopasMagicDisp,X ;$01BD58    ||
    STA.w $0309,Y               ;$01BD5B    |/
    LDA $03                     ;$01BD5E    |\ 
    CLC                         ;$01BD60    ||
    ADC.b #$05                  ;$01BD61    ||
    AND.b #$0F                  ;$01BD63    ||
    STA $03                     ;$01BD65    || Set X position for the triangle.
    TAX                         ;$01BD67    ||
    LDA $00                     ;$01BD68    || 
    CLC                         ;$01BD6A    ||
    ADC.w MagiKoopasMagicDisp,X ;$01BD6B    ||
    STA.w $0308,Y               ;$01BD6E    |/
    LDX.w $15E9                 ;$01BD71    |\ 
    LDA.w $15F6,X               ;$01BD74    ||
    ORA $64                     ;$01BD77    || Set YXPPCCCT.
    STA.w $0303,Y               ;$01BD79    ||
    STA.w $0307,Y               ;$01BD7C    ||
    STA.w $030B,Y               ;$01BD7F    |/
    LDA.b #$88                  ;$01BD82    |\\ Tile number for the circle.
    STA.w $0302,Y               ;$01BD84    ||
    LDA.b #$89                  ;$01BD87    ||| Tile number for the square.
    STA.w $0306,Y               ;$01BD89    ||
    LDA.b #$98                  ;$01BD8C    ||| Tile number for the triangle.
    STA.w $030A,Y               ;$01BD8E    |/
    LDY.b #$00                  ;$01BD91    |
    LDA.b #$02                  ;$01BD93    |
    JMP FinishOAMWriteRt        ;$01BD95    |



CODE_01BD98:                    ;-----------| Subroutine to spawn a smoke sprite. Used by the Magikoopa's magic.
    LDY.b #$03                  ;$01BD98    |\ 
CODE_01BD9A:                    ;           ||
    LDA.w $17C0,Y               ;$01BD9A    || Find an empty slot.
    BEQ CODE_01BDA3             ;$01BD9D    ||
    DEY                         ;$01BD9F    ||
    BPL CODE_01BD9A             ;$01BDA0    |/
    RTS                         ;$01BDA2    |

CODE_01BDA3:
    LDA.b #$01                  ;$01BDA3    |\ 
    STA.w $17C0,Y               ;$01BDA5    ||
    LDA $E4,X                   ;$01BDA8    ||
    STA.w $17C8,Y               ;$01BDAA    || Spawn smoke at the sprite's position.
    LDA $D8,X                   ;$01BDAD    ||
    STA.w $17C4,Y               ;$01BDAF    ||
    LDA.b #$1B                  ;$01BDB2    ||
    STA.w $17CC,Y               ;$01BDB4    |/
    RTS                         ;$01BDB7    |





InitMagikoopa:                  ;-----------| Magikoopa INIT
    LDY.b #$09                  ;$01BDB8    |\ 
CODE_01BDBA:                    ;           ||
    CPY.w $15E9                 ;$01BDBA    ||
    BEQ CODE_01BDCF             ;$01BDBD    ||
    LDA.w $14C8,Y               ;$01BDBF    || Erase if another Magikoopa already exists.
    BEQ CODE_01BDCF             ;$01BDC2    ||
    LDA.w $009E,Y               ;$01BDC4    ||
    CMP.b #$1F                  ;$01BDC7    ||
    BNE CODE_01BDCF             ;$01BDC9    ||
    STZ.w $14C8,X               ;$01BDCB    |/
    RTS                         ;$01BDCE    |

CODE_01BDCF:
    DEY                         ;$01BDCF    |
    BPL CODE_01BDBA             ;$01BDD0    |
    STZ.w $18BF                 ;$01BDD2    |
    RTS                         ;$01BDD5    |



    ; Magikoopa misc RAM:
    ; $C2   - Current phase.
    ;          0 = find tile, 1 = fade in, 2 = shoot magic, 3 = fade out.
    ; $1540 - Timer for animation.
    ;          Set to #$04 for timing each palette change during fade-in.
    ;          Set to #$70 for shooting the magic.
    ;          Set to #$02 for timing each palette change during fade-out.
    ; $1570 - Pointer to current palette to use.
    ; $157C - Horizontal direction the sprite is facing.
    ; $1602 - Animation frame.
    ;          0 = fading in, 1 = unused?, 2/3 = wand raised, 4/5 = shooting

Magikoopa:                      ;-----------| Magikoopa MAIN
    LDA.b #$01                  ;$01BDD6    |\ Disable interaction with Mario/sprites.
    STA.w $15D0,X               ;$01BDD8    |/
    LDA.w $15A0,X               ;$01BDDB    |\ 
    BEQ CODE_01BDE2             ;$01BDDE    || If offscreen, search for a new spot.
    STZ $C2,X                   ;$01BDE0    |/
CODE_01BDE2:                    ;           |
    LDA $C2,X                   ;$01BDE2    |
    AND.b #$03                  ;$01BDE4    |
    JSL ExecutePtr              ;$01BDE6    |

MagiKoopaPtrs:                  ;$01BDEA    | Magikoopa pointers.
    dw CODE_01BDF2                          ; 0 - Find spot
    dw CODE_01BE5F                          ; 1 - Fade in
    dw CODE_01BE6E                          ; 2 - Shoot magic
    dw CODE_01BF16                          ; 3 - Fade out


CODE_01BDF2:                    ;-----------| Magikoopa phase 0 - Find spot.
    LDA.w $18BF                 ;$01BDF2    |\ 
    BEQ CODE_01BDFB             ;$01BDF5    || Erase the sprite if sprite D2 is present.
    STZ.w $14C8,X               ;$01BDF7    |/
    RTS                         ;$01BDFA    |

CODE_01BDFB:
    LDA $9D                     ;$01BDFB    |\ 
    BNE Return01BE5E            ;$01BDFD    ||
    LDY.b #$24                  ;$01BDFF    || Return if:
    STY $40                     ;$01BE01    ||  - Game frozen.
    LDA.w $1540,X               ;$01BE03    ||  - Stun timer is set?
    BNE Return01BE5E            ;$01BE06    ||  - RNG would put it offscreen.
    JSL GetRand                 ;$01BE08    ||
    CMP.b #$D1                  ;$01BE0C    ||
    BCS Return01BE5E            ;$01BE0E    |/
    CLC                         ;$01BE10    |\ 
    ADC $1C                     ;$01BE11    ||
    AND.b #$F0                  ;$01BE13    ||
    STA $D8,X                   ;$01BE15    || Give a random Y position.
    LDA $1D                     ;$01BE17    ||
    ADC.b #$00                  ;$01BE19    ||
    STA.w $14D4,X               ;$01BE1B    |/
    JSL GetRand                 ;$01BE1E    |\ 
    CLC                         ;$01BE22    ||
    ADC $1A                     ;$01BE23    ||
    AND.b #$F0                  ;$01BE25    || Give a random X position.
    STA $E4,X                   ;$01BE27    ||
    LDA $1B                     ;$01BE29    ||
    ADC.b #$00                  ;$01BE2B    ||
    STA.w $14E0,X               ;$01BE2D    |/
    JSR SubHorzPosBnk1          ;$01BE30    |\ 
    LDA $0F                     ;$01BE33    ||
    CLC                         ;$01BE35    ||
    ADC.b #$20                  ;$01BE36    ||
    CMP.b #$40                  ;$01BE38    || Return if:
    BCC Return01BE5E            ;$01BE3A    || - Within two tiles of Mario.
    STZ $AA,X                   ;$01BE3C    || - Not on the ground.
    LDA.b #$01                  ;$01BE3E    || - Inside a block.
    STA $B6,X                   ;$01BE40    ||
    JSR CODE_019140             ;$01BE42    ||
    JSR IsOnGround              ;$01BE45    ||
    BEQ Return01BE5E            ;$01BE48    ||
    LDA.w $1862                 ;$01BE4A    ||
    BNE Return01BE5E            ;$01BE4D    |/
    INC $C2,X                   ;$01BE4F    |\ 
    STZ.w $1570,X               ;$01BE51    || Move to next phase.
    JSR CODE_01BE82             ;$01BE54    |/
    JSR SubHorzPosBnk1          ;$01BE57    |\ 
    TYA                         ;$01BE5A    || Face Mario.
    STA.w $157C,X               ;$01BE5B    |/
Return01BE5E:                   ;           |
    RTS                         ;$01BE5E    |



CODE_01BE5F:                    ;-----------| Magikoopa phase 1 - Fade in.
    JSR CODE_01C004             ;$01BE5F    | Fade palette in.
    STZ.w $1602,X               ;$01BE62    |\ Draw graphics.
    JSR SubSprGfx1              ;$01BE65    |/
    RTS                         ;$01BE68    |



DATA_01BE69:                    ;$01BE69    | Frames for the Magikoopa's shooting animation. Third byte is unused.
    db $04,$02,$00                          ; Also includes the following frame (i.e. 4/5, 2/3).

DATA_01BE6C:                    ;$01BE6C    | X offsets for positioning the Magikoopa's wand.
    db $10,$F8

CODE_01BE6E:                    ;-----------| Magikoopa phase 2 - Shoot magic.
    STZ.w $15D0,X               ;$01BE6E    |\ Reenable Mario/sprite interaction.
    JSR SubSprSprPMarioSpr      ;$01BE71    |/
    JSR SubHorzPosBnk1          ;$01BE74    |\ 
    TYA                         ;$01BE77    || Face Mario.
    STA.w $157C,X               ;$01BE78    |/
    LDA.w $1540,X               ;$01BE7B    |\ 
    BNE CODE_01BE86             ;$01BE7E    ||
    INC $C2,X                   ;$01BE80    || If the stun timer has run out, move to next phase and make sprites transparent.
CODE_01BE82:                    ;           ||
    LDY.b #$34                  ;$01BE82    ||
    STY $40                     ;$01BE84    |/
CODE_01BE86:                    ;           |
    CMP.b #$40                  ;$01BE86    |\ 
    BNE CODE_01BE96             ;$01BE88    ||
    PHA                         ;$01BE8A    || If:
    LDA $9D                     ;$01BE8B    ||  - The stun timer reaches #$40
    ORA.w $15A0,X               ;$01BE8D    ||  - The game is not frozen
    BNE CODE_01BE95             ;$01BE90    ||  - The Magikoopa is onscreen
    JSR CODE_01BF1D             ;$01BE92    || Then spawn magic.
CODE_01BE95:                    ;           ||
    PLA                         ;$01BE95    |/
CODE_01BE96:                    ;           |
    LSR                         ;$01BE96    |\ 
    LSR                         ;$01BE97    ||
    LSR                         ;$01BE98    ||
    LSR                         ;$01BE99    ||
    LSR                         ;$01BE9A    ||
    LSR                         ;$01BE9B    ||
    TAY                         ;$01BE9C    || Set animation frame.
    PHY                         ;$01BE9D    ||
    LDA.w $1540,X               ;$01BE9E    ||
    LSR                         ;$01BEA1    ||
    LSR                         ;$01BEA2    ||
    LSR                         ;$01BEA3    ||
    AND.b #$01                  ;$01BEA4    ||
    ORA.w DATA_01BE69,Y         ;$01BEA6    ||
    STA.w $1602,X               ;$01BEA9    |/
    JSR SubSprGfx1              ;$01BEAC    | Draw graphics.
    LDA.w $1602,X               ;$01BEAF    |\ 
    SEC                         ;$01BEB2    ||
    SBC.b #$02                  ;$01BEB3    ||
    CMP.b #$02                  ;$01BEB5    ||
    BCC CODE_01BEC6             ;$01BEB7    ||
    LSR                         ;$01BEB9    || Make the Magikoopa "laugh" after shooting by shifting up and down.
    BCC CODE_01BEC6             ;$01BEBA    ||
    LDA.w $15EA,X               ;$01BEBC    ||
    TAX                         ;$01BEBF    ||
    INC.w $0301,X               ;$01BEC0    ||
    LDX.w $15E9                 ;$01BEC3    |/
CODE_01BEC6:                    ;           |
    PLY                         ;$01BEC6    |\ 
    CPY.b #$01                  ;$01BEC7    || Draw glitter on the Magikoopa while his wand is raised.
    BNE CODE_01BECE             ;$01BEC9    ||
    JSR CODE_01B14E             ;$01BECB    |/
CODE_01BECE:                    ;           |
    LDA.w $1602,X               ;$01BECE    |\ 
    CMP.b #$04                  ;$01BED1    || Return if the Magikoopa hasn't shot yet.
    BCC Return01BF15            ;$01BED3    |/
    LDY.w $157C,X               ;$01BED5    |\ 
    LDA $E4,X                   ;$01BED8    ||
    CLC                         ;$01BEDA    ||
    ADC.w DATA_01BE6C,Y         ;$01BEDB    ||
    SEC                         ;$01BEDE    ||
    SBC $1A                     ;$01BEDF    ||
    LDY.w $15EA,X               ;$01BEE1    ||
    STA.w $0308,Y               ;$01BEE4    ||
    LDA $D8,X                   ;$01BEE7    ||
    SEC                         ;$01BEE9    ||
    SBC $1C                     ;$01BEEA    ||
    CLC                         ;$01BEEC    || If in frame 04/05, add the Magikoopa's wand.
    ADC.b #$10                  ;$01BEED    ||
    STA.w $0309,Y               ;$01BEEF    ||
    LDA.w $157C,X               ;$01BEF2    ||
    LSR                         ;$01BEF5    ||
    LDA.b #$00                  ;$01BEF6    ||
    BCS CODE_01BEFC             ;$01BEF8    ||
    ORA.b #$40                  ;$01BEFA    ||
CODE_01BEFC:                    ;           ||
    ORA $64                     ;$01BEFC    ||
    ORA.w $15F6,X               ;$01BEFE    ||
    STA.w $030B,Y               ;$01BF01    ||
    LDA.b #$99                  ;$01BF04    ||| Tile to use for the Magikoopa's wand.
    STA.w $030A,Y               ;$01BF06    ||
    TYA                         ;$01BF09    ||
    LSR                         ;$01BF0A    ||
    LSR                         ;$01BF0B    ||
    TAY                         ;$01BF0C    ||
    LDA.b #$00                  ;$01BF0D    ||
    ORA.w $15A0,X               ;$01BF0F    ||
    STA.w $0462,Y               ;$01BF12    |/
Return01BF15:                   ;           |
    RTS                         ;$01BF15    |



CODE_01BF16:                    ;-----------| Magikoopa phase 3 - Fade out.
    JSR CODE_01BFE3             ;$01BF16    | Fade palette out.
    JSR SubSprGfx1              ;$01BF19    | Draw graphics.
    RTS                         ;$01BF1C    |



CODE_01BF1D:                    ;-----------| Routine to aim and spawn magic.
    LDY.b #$09                  ;$01BF1D    |\ 
CODE_01BF1F:                    ;           ||
    LDA.w $14C8,Y               ;$01BF1F    || Find an empty sprite slot, and return if none found.
    BEQ CODE_01BF28             ;$01BF22    ||
    DEY                         ;$01BF24    ||
    BPL CODE_01BF1F             ;$01BF25    |/
    RTS                         ;$01BF27    |

CODE_01BF28:
    LDA.b #$10                  ;$01BF28    |\ SFX for shooting magic.
    STA.w $1DF9                 ;$01BF2A    |/
    LDA.b #$08                  ;$01BF2D    |\ 
    STA.w $14C8,Y               ;$01BF2F    ||
    LDA.b #$20                  ;$01BF32    ||| Sprite to spawn (magic).
    STA.w $009E,Y               ;$01BF34    ||
    LDA $E4,X                   ;$01BF37    ||\ 
    STA.w $00E4,Y               ;$01BF39    |||
    LDA.w $14E0,X               ;$01BF3C    |||
    STA.w $14E0,Y               ;$01BF3F    |||
    LDA $D8,X                   ;$01BF42    |||
    CLC                         ;$01BF44    ||| Spawn at the Magikoopa's position.
    ADC.b #$0A                  ;$01BF45    |||
    STA.w $00D8,Y               ;$01BF47    |||
    LDA.w $14D4,X               ;$01BF4A    |||
    ADC.b #$00                  ;$01BF4D    |||
    STA.w $14D4,Y               ;$01BF4F    ||/
    TYX                         ;$01BF52    ||
    JSL InitSpriteTables        ;$01BF53    |/
    LDA.b #$20                  ;$01BF57    |\\ Speed to give the magic.
    JSR CODE_01BF6A             ;$01BF59    ||
    LDX.w $15E9                 ;$01BF5C    ||
    LDA $00                     ;$01BF5F    || Set X and Y speed.
    STA.w $00AA,Y               ;$01BF61    ||
    LDA $01                     ;$01BF64    ||
    STA.w $00B6,Y               ;$01BF66    |/
    RTS                         ;$01BF69    |

CODE_01BF6A:                    ;```````````| Aiming routine for the Magikooa's magic.
    STA $01                     ;$01BF6A    |  Input: A = desired magnitude of the final speed vector, X = sprite slot to aim from.
    PHX                         ;$01BF6C    |  Output: $00 = X speed, $01 = Y speed
    PHY                         ;$01BF6D    |
    JSR SubVertPosBnk1          ;$01BF6E    |\ 
    STY $02                     ;$01BF71    ||
    LDA $0E                     ;$01BF73    ||
    BPL CODE_01BF7C             ;$01BF75    ||
    EOR.b #$FF                  ;$01BF77    ||
    CLC                         ;$01BF79    ||
    ADC.b #$01                  ;$01BF7A    ||
CODE_01BF7C:                    ;           || $02 = Vertical direction
    STA $0C                     ;$01BF7C    || $03 = Horizontal direction
    JSR SubHorzPosBnk1          ;$01BF7E    || $0C = Absolute vertical distance
    STY $03                     ;$01BF81    || $0D = Absolute horizontal distance.
    LDA $0F                     ;$01BF83    ||
    BPL CODE_01BF8C             ;$01BF85    ||
    EOR.b #$FF                  ;$01BF87    ||
    CLC                         ;$01BF89    ||
    ADC.b #$01                  ;$01BF8A    ||
CODE_01BF8C:                    ;           ||
    STA $0D                     ;$01BF8C    |/
    LDY.b #$00                  ;$01BF8E    |\\ 
    LDA $0D                     ;$01BF90    |||
    CMP $0C                     ;$01BF92    |||
    BCS CODE_01BF9F             ;$01BF94    ||| If further away horizontally than vertically, swap $0C/$0D
    INY                         ;$01BF96    |||  (so that the shorter distance is in $0C).
    PHA                         ;$01BF97    |||
    LDA $0C                     ;$01BF98    |||
    STA $0D                     ;$01BF9A    |||
    PLA                         ;$01BF9C    |||
    STA $0C                     ;$01BF9D    ||/
CODE_01BF9F:                    ;           ||
    LDA.b #$00                  ;$01BF9F    ||
    STA $0B                     ;$01BFA1    ||
    STA $00                     ;$01BFA3    ||
    LDX $01                     ;$01BFA5    ||\ 
CODE_01BFA7:                    ;           |||
    LDA $0B                     ;$01BFA7    |||
    CLC                         ;$01BFA9    |||
    ADC $0C                     ;$01BFAA    ||| $00 = ($0C * $01) / $0D
    CMP $0D                     ;$01BFAC    ||| $0B = ($0C * $01) % $0D
    BCC CODE_01BFB4             ;$01BFAE    |||
    SBC $0D                     ;$01BFB0    ||| Essentially, this does a ratio of the vertical and horizontal distances,
    INC $00                     ;$01BFB2    |||  then scales the base speed using that ratio.
CODE_01BFB4:                    ;           |||
    STA $0B                     ;$01BFB4    |||
    DEX                         ;$01BFB6    |||
    BNE CODE_01BFA7             ;$01BFB7    ||/
    TYA                         ;$01BFB9    ||\ 
    BEQ CODE_01BFC6             ;$01BFBA    |||
    LDA $00                     ;$01BFBC    |||
    PHA                         ;$01BFBE    ||| If $0C/$0D were swapped before,
    LDA $01                     ;$01BFBF    |||  swap $00/$01.
    STA $00                     ;$01BFC1    |||
    PLA                         ;$01BFC3    |||
    STA $01                     ;$01BFC4    |//
CODE_01BFC6:                    ;           |
    LDA $00                     ;$01BFC6    |\ 
    LDY $02                     ;$01BFC8    ||
    BEQ CODE_01BFD3             ;$01BFCA    ||
    EOR.b #$FF                  ;$01BFCC    ||
    CLC                         ;$01BFCE    ||
    ADC.b #$01                  ;$01BFCF    ||
    STA $00                     ;$01BFD1    ||
CODE_01BFD3:                    ;           || Invert $00/$01 if Mario is to the left/above.
    LDA $01                     ;$01BFD3    ||
    LDY $03                     ;$01BFD5    ||
    BEQ CODE_01BFE0             ;$01BFD7    ||
    EOR.b #$FF                  ;$01BFD9    ||
    CLC                         ;$01BFDB    ||
    ADC.b #$01                  ;$01BFDC    ||
    STA $01                     ;$01BFDE    |/
CODE_01BFE0:                    ;           |
    PLY                         ;$01BFE0    |
    PLX                         ;$01BFE1    |
    RTS                         ;$01BFE2    |



CODE_01BFE3:                    ;-----------| Fade the Magikoopa's palette out.
    LDA.w $1540,X               ;$01BFE3    |\ 
    BNE Return01C000            ;$01BFE6    || Only update the palette every 2 frames.
    LDA.b #$02                  ;$01BFE8    ||
    STA.w $1540,X               ;$01BFEA    |/
    DEC.w $1570,X               ;$01BFED    |\ 
    LDA.w $1570,X               ;$01BFF0    ||
    CMP.b #$00                  ;$01BFF3    ||
    BNE CODE_01C001             ;$01BFF5    || Decrease palette.
    INC $C2,X                   ;$01BFF7    || If at 0, move to next phase.
    LDA.b #$10                  ;$01BFF9    ||
    STA.w $1540,X               ;$01BFFB    ||
    PLA                         ;$01BFFE    ||
    PLA                         ;$01BFFF    |/
Return01C000:                   ;           |
    RTS                         ;$01C000    |

CODE_01C001:
    JMP CODE_01C028             ;$01C001    | ...kinda a pointless jump.


CODE_01C004:                    ;-----------| Fade the Magikoopa's palette in.
    LDA.w $1540,X               ;$01C004    |\ 
    BNE CODE_01C05E             ;$01C007    || Only update every 4 frames.
    LDA.b #$04                  ;$01C009    ||
    STA.w $1540,X               ;$01C00B    |/
    INC.w $1570,X               ;$01C00E    |\ 
    LDA.w $1570,X               ;$01C011    ||
    CMP.b #$09                  ;$01C014    ||
    BNE CODE_01C01C             ;$01C016    ||
    LDY.b #$24                  ;$01C018    || Increase palette.
    STY $40                     ;$01C01A    || If at max (09), move to next phase. (the branches are a bit weird here...)
CODE_01C01C:                    ;           ||
    CMP.b #$09                  ;$01C01C    ||
    BNE CODE_01C028             ;$01C01E    ||
    INC $C2,X                   ;$01C020    ||
    LDA.b #$70                  ;$01C022    ||| Timer for shooting magic.
    STA.w $1540,X               ;$01C024    |/
    RTS                         ;$01C027    |


CODE_01C028:                    ;```````````| Actually update the Magikoopa's palette.
    LDA.w $1570,X               ;$01C028    |\ 
    DEC A                       ;$01C02B    ||
    ASL                         ;$01C02C    ||
    ASL                         ;$01C02D    ||
    ASL                         ;$01C02E    ||
    ASL                         ;$01C02F    ||
    TAX                         ;$01C030    ||
    STZ $00                     ;$01C031    ||
    LDY.w $0681                 ;$01C033    || Store color values to the upload table.
CODE_01C036:                    ;           ||
    LDA.l MagiKoopaPals,X       ;$01C036    ||
    STA.w $0684,Y               ;$01C03A    ||
    INY                         ;$01C03D    ||
    INX                         ;$01C03E    ||
    INC $00                     ;$01C03F    ||
    LDA $00                     ;$01C041    ||
    CMP.b #$10                  ;$01C043    ||
    BNE CODE_01C036             ;$01C045    |/
    LDX.w $0681                 ;$01C047    |\ 
    LDA.b #$10                  ;$01C04A    ||
    STA.w $0682,X               ;$01C04C    || Set location and size: x10 colors starting at F0.
    LDA.b #$F0                  ;$01C04F    ||
    STA.w $0683,X               ;$01C051    ||
    STZ.w $0694,X               ;$01C054    |/
    TXA                         ;$01C057    |\ 
    CLC                         ;$01C058    || Update dynamic palettes index.
    ADC.b #$12                  ;$01C059    ||
    STA.w $0681                 ;$01C05B    |/
CODE_01C05E:                    ;           |
    LDX.w $15E9                 ;$01C05E    |
    RTS                         ;$01C061    |





ADDR_01C062:                    ;-----------| Unused. Some kind of raised goal tape?
    JSR InitGoalTape            ;$01C062    |
    LDA $D8,X                   ;$01C065    |
    SEC                         ;$01C067    |
    SBC.b #$4C                  ;$01C068    |
    STA $D8,X                   ;$01C06A    |
    LDA.w $14D4,X               ;$01C06C    |
    SBC.b #$00                  ;$01C06F    |
    STA.w $14D4,X               ;$01C071    |
    RTS                         ;$01C074    |





InitGoalTape:                   ;-----------| Goal tape INIT.
    LDA $E4,X                   ;$01C075    |\ 
    SEC                         ;$01C077    ||
    SBC.b #$08                  ;$01C078    ||| X offset of the goal tape's hitbox.
    STA $C2,X                   ;$01C07A    ||
    LDA.w $14E0,X               ;$01C07C    ||
    SBC.b #$00                  ;$01C07F    ||
    STA.w $151C,X               ;$01C081    || Set the position of the goal tape's hitbox. 
    LDA $D8,X                   ;$01C084    ||  Also preserve whether the tape is a normal or secret exit.
    STA.w $1528,X               ;$01C086    ||
    LDA.w $14D4,X               ;$01C089    ||
    STA.w $187B,X               ;$01C08C    ||
    AND.b #$01                  ;$01C08F    ||
    STA.w $14D4,X               ;$01C091    ||
    STA.w $1534,X               ;$01C094    |/
    RTS                         ;$01C097    |



    ; Goal tape misc RAM:
    ; $C2   - X position of the tape's hitbox (low)
    ; $151C - X position of the tape's hitbox (high)
    ; $1528 - Y position of the tape's hitbox (low)
    ; $1534 - Y position of the tape's hitbox (high)
    ; $1540 - Timer for changing directions. Set to #$7C at each turn.
    ;          Also used as a timer (#$80) for the stars after hitting the goal tape.
    ; $1594 - Relative Y position the tape was hit at.
    ; $1602 - Set to 01 when the goal is crossed.
    ; $160E - Set to 01 when the actual tape is hit.
    ; $187B - Goal type. #$00-#$03 = normal, #$04-#$07 = secret, #$08-#$0B = submap warp, #$0C+ = glitched

GoalTape:                       ;-----------| Goal tape MAIN.
    JSR CODE_01C12D             ;$01C098    | Draw the goal tape.
    LDA $9D                     ;$01C09B    |\ If the game is frozen, return.
    BNE Return01C0A4            ;$01C09D    |/
    LDA.w $1602,X               ;$01C09F    |\ If the goal tape hasn't been hit already, branch.
    BEQ CODE_01C0A7             ;$01C0A2    |/
Return01C0A4:                   ;           |
    RTS                         ;$01C0A4    |


DATA_01C0A5:                    ;$01C0A5    | Movement speeds for the goal tape.
    db $10,$F0

CODE_01C0A7:                    ;```````````| Goal tape hasn't been hit yet.
    LDA.w $1540,X               ;$01C0A7    |\ 
    BNE CODE_01C0B4             ;$01C0AA    ||
    LDA.b #$7C                  ;$01C0AC    ||| How long before the goal tape changes direction.
    STA.w $1540,X               ;$01C0AE    |/
    INC.w $1588,X               ;$01C0B1    |
CODE_01C0B4:                    ;           |
    LDA.w $1588,X               ;$01C0B4    |\ 
    AND.b #$01                  ;$01C0B7    ||
    TAY                         ;$01C0B9    || Update Y speed.
    LDA.w DATA_01C0A5,Y         ;$01C0BA    ||
    STA $AA,X                   ;$01C0BD    |/
    JSR SubSprYPosNoGrvty       ;$01C0BF    | Update position.
    LDA $C2,X                   ;$01C0C2    |
    STA $00                     ;$01C0C4    |
    LDA.w $151C,X               ;$01C0C6    |
    STA $01                     ;$01C0C9    |
    REP #$20                    ;$01C0CB    |
    LDA $94                     ;$01C0CD    |\ 
    SEC                         ;$01C0CF    || If Mario is not touching the tape horizontally, return.
    SBC $00                     ;$01C0D0    ||
    CMP.w #$0010                ;$01C0D2    ||| Width of the tape's hitbox.
    SEP #$20                    ;$01C0D5    ||
    BCS Return01C12C            ;$01C0D7    |/
    LDA.w $1528,X               ;$01C0D9    |\ 
    CMP $96                     ;$01C0DC    ||
    LDA.w $1534,X               ;$01C0DE    || If Mario is below the goal tape, return.
    AND.b #$01                  ;$01C0E1    ||
    SBC $97                     ;$01C0E3    ||
    BCC Return01C12C            ;$01C0E5    |/
    LDA.w $187B,X               ;$01C0E7    |\ 
    LSR                         ;$01C0EA    || Set secret exit flag for the goal tape if applicable.
    LSR                         ;$01C0EB    ||
    STA.w $141C                 ;$01C0EC    |/
    LDA.b #$0C                  ;$01C0EF    |\ SFX for the goal tape/level end music.
    STA.w $1DFB                 ;$01C0F1    ||
    LDA.b #$FF                  ;$01C0F4    ||
    STA.w $0DDA                 ;$01C0F6    |/
    LDA.b #$FF                  ;$01C0F9    |\ Set the end level timer.
    STA.w $1493                 ;$01C0FB    |/
    STZ.w $1490                 ;$01C0FE    | Clear the star timer.
    INC.w $1602,X               ;$01C101    |
    JSR MarioSprInteractRt      ;$01C104    |\ Branch if the actual tape was not touched (and thus no bonus stars given).
    BCC CODE_01C125             ;$01C107    |/
    LDA.b #$09                  ;$01C109    |\ SFX for breaking the goal tape.
    STA.w $1DFC                 ;$01C10B    |/
    INC.w $160E,X               ;$01C10E    |
    LDA.w $1528,X               ;$01C111    |\ 
    SEC                         ;$01C114    || Keep track of how high the tape was when hit.
    SBC $D8,X                   ;$01C115    ||
    STA.w $1594,X               ;$01C117    |/
    LDA.b #$80                  ;$01C11A    |\ How many frames the bonus star counter stays on screen.
    STA.w $1540,X               ;$01C11C    |/
    JSL CODE_07F252             ;$01C11F    | Count bonus stars to give Mario (and 3up if giving 50).
    BRA CODE_01C128             ;$01C123    | Trigger the tape.

CODE_01C125:                    ;```````````| No bonus stars given.
    STZ.w $1686,X               ;$01C125    | Let the tape turn into a coin.
CODE_01C128:                    ;```````````| Trigger goal tape.
    JSL TriggerGoalTape         ;$01C128    |
Return01C12C:                   ;           |
    RTS                         ;$01C12C    |



CODE_01C12D:                    ;```````````| Goal tape GFX routine.
    LDA.w $160E,X               ;$01C12D    |\ Branch if the goal tape has been hit.
    BNE CODE_01C175             ;$01C130    |/
    JSR GetDrawInfoBnk1         ;$01C132    |\ 
    LDA $00                     ;$01C135    ||
    SEC                         ;$01C137    ||
    SBC.b #$08                  ;$01C138    ||
    STA.w $0300,Y               ;$01C13A    ||
    CLC                         ;$01C13D    ||
    ADC.b #$08                  ;$01C13E    ||
    STA.w $0304,Y               ;$01C140    ||
    CLC                         ;$01C143    ||
    ADC.b #$08                  ;$01C144    ||
    STA.w $0308,Y               ;$01C146    ||
    LDA $01                     ;$01C149    || Upload three 8x8s to OAM.
    CLC                         ;$01C14B    ||
    ADC.b #$08                  ;$01C14C    ||
    STA.w $0301,Y               ;$01C14E    ||
    STA.w $0305,Y               ;$01C151    ||
    STA.w $0309,Y               ;$01C154    ||
    LDA.b #$D4                  ;$01C157    ||| 16x8 tile to use for the goal tape.
    STA.w $0302,Y               ;$01C159    ||
    INC A                       ;$01C15C    ||
    STA.w $0306,Y               ;$01C15D    ||
    STA.w $030A,Y               ;$01C160    ||
    LDA.b #$32                  ;$01C163    ||| YXPPCCCT for the goal tape.
    STA.w $0303,Y               ;$01C165    ||
    STA.w $0307,Y               ;$01C168    ||
    STA.w $030B,Y               ;$01C16B    ||
    LDY.b #$00                  ;$01C16E    ||
    LDA.b #$02                  ;$01C170    ||
    JMP FinishOAMWriteRt        ;$01C172    |/

CODE_01C175:                    ;```````````| Goal tape has been hit.
    LDA.w $1540,X               ;$01C175    |\ If done drawing bonus star digits, erase the sprite.
    BEQ CODE_01C17F             ;$01C178    |/
    JSL CODE_07F1CA             ;$01C17A    | Draw the bonus star digits.
    RTS                         ;$01C17E    |
CODE_01C17F:                    ;           |
    STZ.w $14C8,X               ;$01C17F    |
    RTS                         ;$01C182    |





    ; Growing vine misc RAM:
    ; $1540 - Timer for going behind objects after being spawned from a block. Set to #$3E when spawned from a block.
    ; $154C - Set to #$2C when spawned from a block.

GrowingVine:                    ;-----------| Growing vine MAIN.
    LDA $64                     ;$01C183    |
    PHA                         ;$01C185    |
    LDA.w $1540,X               ;$01C186    |\ 
    CMP.b #$20                  ;$01C189    ||
    BCC CODE_01C191             ;$01C18B    || If spawned from a block, send behind objects.
    LDA.b #$10                  ;$01C18D    ||
    STA $64                     ;$01C18F    |/
CODE_01C191:                    ;           |
    JSR SubSprGfx2Entry1        ;$01C191    | Set up OAM.
    LDY.w $15EA,X               ;$01C194    |\ 
    LDA $14                     ;$01C197    ||
    LSR                         ;$01C199    ||
    LSR                         ;$01C19A    ||
    LSR                         ;$01C19B    || Set tile based on frame.
    LSR                         ;$01C19C    ||
    LDA.b #$AC                  ;$01C19D    ||| Vine frame A.
    BCC CODE_01C1A3             ;$01C19F    ||
    LDA.b #$AE                  ;$01C1A1    ||| Vine frame B.
CODE_01C1A3:                    ;           ||
    STA.w $0302,Y               ;$01C1A3    |/
    PLA                         ;$01C1A6    |
    STA $64                     ;$01C1A7    |
    LDA $9D                     ;$01C1A9    |\ Return if game frozen.
    BNE Return01C1ED            ;$01C1AB    |/
    LDA.b #$F0                  ;$01C1AD    |\\ Vine's Y speed.
    STA $AA,X                   ;$01C1AF    |/
    JSR SubSprYPosNoGrvty       ;$01C1B1    | Update position.
    LDA.w $1540,X               ;$01C1B4    |\ 
    CMP.b #$20                  ;$01C1B7    || Don't interact with objects while being spawned from a block.
    BCS CODE_01C1CB             ;$01C1B9    |/
    JSR CODE_019140             ;$01C1BB    | Interact with blocks.
    LDA.w $1588,X               ;$01C1BE    |\ 
    BNE CODE_01C1C8             ;$01C1C1    ||
    LDA.w $14D4,X               ;$01C1C3    || Erase the vine if it hit a block or it's off the top of the level.
    BPL CODE_01C1CB             ;$01C1C6    ||
CODE_01C1C8:                    ;           ||
    JMP OffScrEraseSprite       ;$01C1C8    |/

CODE_01C1CB:                    ;```````````| Spawn a vine tile beneath the sprite.
    LDA $D8,X                   ;$01C1CB    |\ 
    AND.b #$0F                  ;$01C1CD    || Return if not centered on a tile.
    CMP.b #$00                  ;$01C1CF    ||
    BNE Return01C1ED            ;$01C1D1    |/
    LDA $E4,X                   ;$01C1D3    |\ 
    STA $9A                     ;$01C1D5    ||
    LDA.w $14E0,X               ;$01C1D7    ||
    STA $9B                     ;$01C1DA    ||
    LDA $D8,X                   ;$01C1DC    ||
    STA $98                     ;$01C1DE    || Spawn the tile.
    LDA.w $14D4,X               ;$01C1E0    ||
    STA $99                     ;$01C1E3    ||
    LDA.b #$03                  ;$01C1E5    ||
    STA $9C                     ;$01C1E7    ||
    JSL GenerateTile            ;$01C1E9    |/
Return01C1ED:                   ;           |
    RTS                         ;$01C1ED    |





DATA_01C1EE:                    ;$01C1EE    | Accelerations for the flying sprites.
    db $FF,$01

DATA_01C1F0:                    ;$01C1F0    | Max speeds for the flying sprites.
    db $F0,$10

    ; Flying sprite misc RAM:
    ; $C2   - If non-zero, only shows wings. If specifically #$02, also makes it sparkle, and if sprite 7E, also send Yoshi to the bonus game.
    ;          Only actually used for Yoshi wings, but works for all others too.
    ; $151C - Direction of vertical acceleration. Even = up, odd = down.
    ; $1540 - Never set, but code is implemented to use this as a timer for rising the P-balloon out of blocks.
    ; $1570 - Frame counter for the wings animation. Still updated in the P-balloon despite not being used.
    ; $157C - Indicates the sprite is a P-balloon.

BalloonKeyFlyObjs:              ;-----------| Flying sprite MAIN (P-balloon MAIN, wings MAIN, flying key/1up/red coin)
    LDA.w $14C8,X               ;$01C1F2    |\ 
    CMP.b #$0C                  ;$01C1F5    ||
    BEQ CODE_01C255             ;$01C1F7    || Branch if in powerup state from the goal tape or sprites are locked.
    LDA $9D                     ;$01C1F9    ||
    BNE CODE_01C255             ;$01C1FB    |/
    LDA $9E,X                   ;$01C1FD    |\ 
    CMP.b #$7D                  ;$01C1FF    ||
    BNE CODE_01C21D             ;$01C201    ||
    LDA.w $1540,X               ;$01C203    ||
    BEQ CODE_01C21D             ;$01C206    ||
    LDA $64                     ;$01C208    || Unused code that just always branches to the next.
    PHA                         ;$01C20A    ||
    LDA.b #$10                  ;$01C20B    || Would have been used for making the P-balloon rise out of blocks.
    STA $64                     ;$01C20D    ||
    JSR CODE_01C61A             ;$01C20F    ||
    PLA                         ;$01C212    ||
    STA $64                     ;$01C213    ||
    LDA.b #$F8                  ;$01C215    ||
    STA $AA,X                   ;$01C217    ||
    JSR SubSprYPosNoGrvty       ;$01C219    ||
    RTS                         ;$01C21C    |/

CODE_01C21D:
    LDA $13                     ;$01C21D    |\ 
    AND.b #$01                  ;$01C21F    || Change vertical acceleration every other frame.
    BNE CODE_01C239             ;$01C221    ||
    LDA.w $151C,X               ;$01C223    ||\ 
    AND.b #$01                  ;$01C226    |||
    TAY                         ;$01C228    |||
    LDA $AA,X                   ;$01C229    ||| Update acceleration.
    CLC                         ;$01C22B    |||
    ADC.w DATA_01C1EE,Y         ;$01C22C    |||
    STA $AA,X                   ;$01C22F    ||/
    CMP.w DATA_01C1F0,Y         ;$01C231    ||\ 
    BNE CODE_01C239             ;$01C234    ||| If at max Y speed, change direction.
    INC.w $151C,X               ;$01C236    |//
CODE_01C239:                    ;           |
    LDA.b #$0C                  ;$01C239    |\\ Flying sprites X speed.
    STA $B6,X                   ;$01C23B    |/
    JSR SubSprXPosNoGrvty       ;$01C23D    | Update X position.
    LDA $AA,X                   ;$01C240    |\ 
    PHA                         ;$01C242    ||
    CLC                         ;$01C243    || Decrease Y speed, to make the balloon "rise" slightly.
    SEC                         ;$01C244    ||
    SBC.b #$02                  ;$01C245    ||
    STA $AA,X                   ;$01C247    |/
    JSR SubSprYPosNoGrvty       ;$01C249    | Update sprite Y position.
    PLA                         ;$01C24C    |\ ...And restore Y speed afterwards.
    STA $AA,X                   ;$01C24D    |/
    JSR SubOffscreen0Bnk1       ;$01C24F    | Process offscreen from -$40 to +$30.
    INC.w $1570,X               ;$01C252    | Increase frame counter.
CODE_01C255:                    ;           |
    LDA $9E,X                   ;$01C255    |\ 
    CMP.b #$7D                  ;$01C257    ||
    BNE CODE_01C262             ;$01C259    || Don't draw wings if P-balloon.
    LDA.b #$01                  ;$01C25B    ||
    STA.w $157C,X               ;$01C25D    ||
    BRA CODE_01C27F             ;$01C260    |/


CODE_01C262:                    ;```````````| Handles winged sprites, including the Yoshi wings as part of sprite 7E.
    LDA $C2,X                   ;$01C262    |\ 
    CMP.b #$02                  ;$01C264    || If Yoshi wings, make them sparkle.
    BNE CODE_01C27C             ;$01C266    ||
    LDA $13                     ;$01C268    ||\ 
    AND.b #$03                  ;$01C26A    ||| Every 4th frame, display a glitter effect.
    BNE CODE_01C271             ;$01C26C    ||| [note: branch is actually useless]
    JSR CODE_01B14E             ;$01C26E    ||/
CODE_01C271:                    ;           ||
    LDA $14                     ;$01C271    ||\ 
    LSR                         ;$01C273    ||| Would cause the sprite to flip through every palette, but since there
    AND.b #$0E                  ;$01C274    |||  isn't any actual sprite being drawn, it seems to be useless.
    EOR.w $15F6,X               ;$01C276    |||
    STA.w $15F6,X               ;$01C279    |//
CODE_01C27C:                    ;           |
    JSR CODE_019E95             ;$01C27C    | Draw wings.
CODE_01C27F:                    ;           |
    LDA $C2,X                   ;$01C27F    |\ If the sprite state is non-zero, then return with only the wings drawn.
    BEQ CODE_01C287             ;$01C281    |/
    JSR GetDrawInfoBnk1         ;$01C283    | (useless?)
    RTS                         ;$01C286    |


CODE_01C287:                    ;```````````| Other winged sprites/P-balloon continue here.
    JSR CODE_01C61A             ;$01C287    | Draw GFX.
    JSR MarioSprInteractRt      ;$01C28A    |\ Return if Mario isn't in contact.
    BCC Return01C2D2            ;$01C28D    |/
    LDA $9E,X                   ;$01C28F    |\ 
    CMP.b #$7E                  ;$01C291    || Branch if not sprite 7E (flying red coin).
    BNE CODE_01C2A6             ;$01C293    |/
    JSR CODE_01C4F0             ;$01C295    | Display glitter when collected.
    LDA.b #$05                  ;$01C298    |\\ How many coins the flying red coin gives (5).
    JSL ADDR_05B329             ;$01C29A    |/
    LDA.b #$03                  ;$01C29E    |\\ How many points the flying red coin gives (800).
    JSL GivePoints              ;$01C2A0    |/
    BRA ADDR_01C30F             ;$01C2A4    | Erase the sprite.


CODE_01C2A6:                    ;```````````| Sprite 7F (flying 1up).
    CMP.b #$7F                  ;$01C2A6    |\ Branch if not sprite 7F.
    BNE CODE_01C2AF             ;$01C2A8    |/
    JSR GiveMario1Up            ;$01C2AA    | Give Mario a 1up.
    BRA ADDR_01C30F             ;$01C2AD    | Erase the sprite.


CODE_01C2AF:                    ;```````````| Sprite 80 (flying key).
    CMP.b #$80                  ;$01C2AF    |\ Branch if not sprite 80.
    BNE CODE_01C2CE             ;$01C2B1    |/
    LDA $7D                     ;$01C2B3    |\ Return if Mario is moving upward.
    BMI Return01C2D2            ;$01C2B5    |/
    LDA.b #$09                  ;$01C2B7    |\ Make carryable.
    STA.w $14C8,X               ;$01C2B9    |/
    LDA.b #$D0                  ;$01C2BC    |\ Bounce Mario.
    STA $7D                     ;$01C2BE    |/
    STZ $AA,X                   ;$01C2C0    |\ 
    STZ.w $1540,X               ;$01C2C2    || Clear the key's Y speed and stun timer, then
    LDA.w $167A,X               ;$01C2C5    ||  set to use default Mario interaction.
    AND.b #$7F                  ;$01C2C8    ||
    STA.w $167A,X               ;$01C2CA    |/
    RTS                         ;$01C2CD    |


CODE_01C2CE:
    CMP.b #$7D                  ;$01C2CE    |\ 
    BEQ CODE_01C2D3             ;$01C2D0    || If not sprite 7D, just return.
Return01C2D2:                   ;           ||  (not that anything else can get here)
    RTS                         ;$01C2D2    |/


CODE_01C2D3:                    ;```````````| Sprite 7D (P-balloon)
    LDY.b #$0B                  ;$01C2D3    |\ 
CODE_01C2D5:                    ;           ||
    LDA.w $14C8,Y               ;$01C2D5    ||
    CMP.b #$0B                  ;$01C2D8    ||
    BNE CODE_01C2E8             ;$01C2DA    || If Mario already has a P-balloon, reset that one?
    LDA.w $009E,Y               ;$01C2DC    ||  (see $019560 for carryable routine)
    CMP.b #$7D                  ;$01C2DF    || Seems useless?
    BEQ CODE_01C2E8             ;$01C2E1    ||
    LDA.b #$09                  ;$01C2E3    || Also see $019FA3 for carried routine.
    STA.w $14C8,Y               ;$01C2E5    ||
CODE_01C2E8:                    ;           ||
    DEY                         ;$01C2E8    ||
    BPL CODE_01C2D5             ;$01C2E9    |/
    LDA.b #$00                  ;$01C2EB    |\ 
    LDY.w $13F3                 ;$01C2ED    ||
    BNE CODE_01C2F4             ;$01C2F0    || Decide whether to erase this P-balloon or give it to Mario,
    LDA.b #$0B                  ;$01C2F2    ||  depending on whether he already has one.
CODE_01C2F4:                    ;           ||
    STA.w $14C8,X               ;$01C2F4    |/
    LDA $7D                     ;$01C2F7    |\ 
    STA $AA,X                   ;$01C2F9    || Connect the sprite to Mario.
    LDA $7B                     ;$01C2FB    ||
    STA $B6,X                   ;$01C2FD    |/
    LDA.b #$09                  ;$01C2FF    |\ 
    STA.w $13F3                 ;$01C301    || Start the inflation animation.
    LDA.b #$FF                  ;$01C304    ||
    STA.w $1891                 ;$01C306    |/
    LDA.b #$1E                  ;$01C309    |\ SFX for inflating.
    STA.w $1DF9                 ;$01C30B    |/
    RTS                         ;$01C30E    |


ADDR_01C30F:
    STZ.w $14C8,X               ;$01C30F    |
    RTS                         ;$01C312    |





ChangingItemSprite:             ;$01C313    | Roulette block sprite table.
    db $74,$75,$77,$76
    
    ; Roulette sprite misc RAM:
    ; $C2   - Flag for whether the sprite is stationary in the block (#$01) or bouncing out of it (#$00).
    ; $151C - Used to indicate a powerup is from the roulette block. Always #$01.
    ; $154C - Set after being hit out of a block.
    ; $1558 - Timer to disable interaction with the sides of blocks. Set when hit out of a block.
    ; $1570 - Frame counter for the powerups' codes, not actually used by the roulette.
    ; $157C - Horizontal direction the sprite is facing. Always 0.
    ; $187B - Timer for changing the sprite. The sprite changes every #$40 ticks.

ChangingItem:                   ;-----------| Roulette block MAIN
    LDA.b #$01                  ;$01C317    |
    STA.w $151C,X               ;$01C319    |
    LDA.w $15D0,X               ;$01C31C    |\ 
    BNE CODE_01C324             ;$01C31F    || Don't change sprite if on Yoshi's tongue.
    INC.w $187B,X               ;$01C321    |/
CODE_01C324:                    ;           |
    LDA.w $187B,X               ;$01C324    |\ 
    LSR                         ;$01C327    ||
    LSR                         ;$01C328    ||
    LSR                         ;$01C329    ||
    LSR                         ;$01C32A    ||
    LSR                         ;$01C32B    ||
    LSR                         ;$01C32C    || Turn into the appropriate sprite and run powerup codes.
    AND.b #$03                  ;$01C32D    ||
    TAY                         ;$01C32F    ||
    LDA.w ChangingItemSprite,Y  ;$01C330    ||
    STA $9E,X                   ;$01C333    ||
    JSL LoadSpriteTables        ;$01C335    ||
    JSR PowerUpRt               ;$01C339    |/
    LDA.b #$81                  ;$01C33C    |\ 
    STA $9E,X                   ;$01C33E    || Restore the sprite.
    JSL LoadSpriteTables        ;$01C340    |/
    RTS                         ;$01C344    |





EatenBerryGfxProp:              ;$01C345    | YXPPCCCT properties for the different berries. First is unused.
    db $02,$02,$04,$06
    
    ; Powerup misc RAM:
    ; $C2   - Flag for whether the sprite is moving (0) or stationary (1). If the high bit is set, prevents the sprite from ever moving.
    ; $151C - Indicates the powerup is the roulette sprite.
    ; $1528 - Direction of the feather's acceleration. Even = left, odd = right.
    ;          If set while rising from a ? block, prevents it from going behind objects (used by the flying ? block).
    ; $1534 - Flag for having been dropped from the item box. Set for all items, but not used in feathers.
    ; $1540 - Timer for rising out of a ? block. Set to #$3E at the start.
    ; $154C - Timer for disabling contact with Mario. Set to #$2C when spawned from item boxes.
    ; $1558 - Timer to prevent interaction with the sides of blocks. Only ever used by the roulette sprite, after being hit out of the block.
    ; $1570 - Frame counter for the fire flower's animation.
    ; $157C - Horizontal direction the sprite is facing.
    ; $1594 - Unused, but can be used to change the number of lives a 1up gives (00 = 1, 01 = 2, 02 = 3, 03 = 5)
    ; $160E - If set, turns the sprite into a berry.

FireFlowerMain:                 ;-----------| Fireflower MAIN
    LDA $14                     ;$01C349    |\ 
    AND.b #$08                  ;$01C34B    ||
    LSR                         ;$01C34D    || X flip every 8 frames.
    LSR                         ;$01C34E    ||
    LSR                         ;$01C34F    ||
    STA.w $157C,X               ;$01C350    |/

PowerUpRt:                      ;-----------| Generic powerup MAIN (fireflower, mushroom, 1up, star, roulette, coin)
    LDA.w $160E,X               ;$01C353    |\ Turn into a berry if $160E is set.
    BEQ CODE_01C371             ;$01C356    |/

DrawBerryGfx:                   ;```````````| Berry sprite.
    JSR SubSprGfx2Entry1        ;$01C358    | Draw a 16x16.
    LDY.w $15EA,X               ;$01C35B    |\ 
    LDA.b #$80                  ;$01C35E    ||| Tile to use for the berry.
    STA.w $0302,Y               ;$01C360    |/
    PHX                         ;$01C363    |
    LDX.w $18D6                 ;$01C364    |\ 
    LDA.w EatenBerryGfxProp,X   ;$01C367    || Set YXPPCCCT based on berry color.
    ORA $64                     ;$01C36A    ||
    STA.w $0303,Y               ;$01C36C    |/
    PLX                         ;$01C36F    |
    RTS                         ;$01C370    |

CODE_01C371:                    ;```````````| Not a berry; check if dropped from item box.
    LDA $64                     ;$01C371    |
    PHA                         ;$01C373    |
    JSR CODE_01C4AC             ;$01C374    | Process interaction with Mario.
    LDA.w $1534,X               ;$01C377    |\ Branch if not dropped from the item box. 
    BEQ CODE_01C38F             ;$01C37A    |/
    LDA $9D                     ;$01C37C    |\ 
    BNE CODE_01C387             ;$01C37E    ||
    LDA.b #$10                  ;$01C380    ||| Y speed to fall with.
    STA $AA,X                   ;$01C382    ||
    JSR SubSprYPosNoGrvty       ;$01C384    |/
CODE_01C387:                    ;           |
    LDA $14                     ;$01C387    |\ 
    AND.b #$0C                  ;$01C389    || Make the sprite flash.
    BNE CODE_01C3AB             ;$01C38B    |/
    PLA                         ;$01C38D    |
    RTS                         ;$01C38E    |

CODE_01C38F:                    ;```````````| Not from item box; check if rising out of a ? block.
    LDA.w $1540,X               ;$01C38F    |\ Branch if not rising from a block.
    BEQ CODE_01C3AE             ;$01C392    |/
    JSR CODE_019140             ;$01C394    | Process object interaction for some reason.
    LDA.w $1528,X               ;$01C397    |\ 
    BNE CODE_01C3A0             ;$01C39A    || Send behind objects, unless spawned from a flying ? block.
    LDA.b #$10                  ;$01C39C    ||
    STA $64                     ;$01C39E    |/
CODE_01C3A0:                    ;           |
    LDA $9D                     ;$01C3A0    |\ 
    BNE CODE_01C3AB             ;$01C3A2    ||
    LDA.b #$FC                  ;$01C3A4    ||| Y speed to rise with.
    STA $AA,X                   ;$01C3A6    ||
    JSR SubSprYPosNoGrvty       ;$01C3A8    |/
CODE_01C3AB:                    ;           |
    JMP CODE_01C48D             ;$01C3AB    | Draw graphics.

CODE_01C3AE:                    ;```````````| Not from block; normal sprite routine.
    LDA $9D                     ;$01C3AE    |\ 
    BNE CODE_01C3AB             ;$01C3B0    ||
    LDA.w $14C8,X               ;$01C3B2    || Just draw graphics if game frozen or spawned from goal tape.
    CMP.b #$0C                  ;$01C3B5    ||
    BEQ CODE_01C3AB             ;$01C3B7    |/
    LDA $9E,X                   ;$01C3B9    |\ 
    CMP.b #$76                  ;$01C3BB    || Useless.
    BNE CODE_01C3BF             ;$01C3BD    |/
CODE_01C3BF:                    ;           |
    INC.w $1570,X               ;$01C3BF    |
    JSR CODE_018DBB             ;$01C3C2    | Set X speed.
    LDA $9E,X                   ;$01C3C5    |\ 
    CMP.b #$75                  ;$01C3C7    ||
    BNE CODE_01C3D2             ;$01C3C9    || Clear X speed if fireflower and not from the roulette block.
    LDA.w $151C,X               ;$01C3CB    ||
    BNE CODE_01C3D2             ;$01C3CE    ||
    STZ $B6,X                   ;$01C3D0    |/
CODE_01C3D2:                    ;           |
    CMP.b #$76                  ;$01C3D2    |\ 
    BEQ CODE_01C3E1             ;$01C3D4    ||
    CMP.b #$21                  ;$01C3D6    || Double X speed for mushrooms.
    BEQ CODE_01C3E1             ;$01C3D8    ||  (not for star/coin/roulette).
    LDA.w $151C,X               ;$01C3DA    ||
    BNE CODE_01C3E1             ;$01C3DD    ||
    ASL $B6,X                   ;$01C3DF    |/
CODE_01C3E1:                    ;           |
    LDA $C2,X                   ;$01C3E1    |\ Branch if moving.
    BEQ CODE_01C3F3             ;$01C3E3    |/
    BMI CODE_01C3F1             ;$01C3E5    |\ 
    JSR CODE_019140             ;$01C3E7    ||
    LDA.w $1588,X               ;$01C3EA    || If not locked in place (from flying ? block) and no longer on the ground, start moving.
    BNE CODE_01C3F1             ;$01C3ED    ||
    STZ $C2,X                   ;$01C3EF    |/
CODE_01C3F1:                    ;           |
    BRA CODE_01C437             ;$01C3F1    | Skip movement code.

CODE_01C3F3:                    ;```````````| Sprite is not stationary.
    LDA.w $0D9B                 ;$01C3F3    |\ 
    CMP.b #$C1                  ;$01C3F6    || Branch unless in level mode #$C0?
    BEQ CODE_01C42C             ;$01C3F8    ||  i.e.  Reznor/Morton/Roy/Ludwig boss rooms? which don't have powerups?
    BIT.w $0D9B                 ;$01C3FA    ||
    BVC CODE_01C42C             ;$01C3FD    |/
    STZ.w $1588,X               ;$01C3FF    |\ 
    STZ $B6,X                   ;$01C402    ||
    LDA.w $14D4,X               ;$01C404    ||
    BNE ADDR_01C41E             ;$01C407    ||
    LDA $D8,X                   ;$01C409    ||
    CMP.b #$A0                  ;$01C40B    ||
    BCC ADDR_01C41E             ;$01C40D    || Move horizontally if on the floor of the boss room.
    AND.b #$F0                  ;$01C40F    ||  Else, clear X speed.
    STA $D8,X                   ;$01C411    ||
    LDA.w $1588,X               ;$01C413    ||
    ORA.b #$04                  ;$01C416    ||
    STA.w $1588,X               ;$01C418    ||
    JSR CODE_018DBB             ;$01C41B    ||
ADDR_01C41E:                    ;           ||
    JSR SubSprXPosNoGrvty       ;$01C41E    |/
    JSR SubSprYPosNoGrvty       ;$01C421    |\ 
    INC $AA,X                   ;$01C424    || ...apply gravity?
    INC $AA,X                   ;$01C426    ||
    INC $AA,X                   ;$01C428    |/
    BRA CODE_01C42F             ;$01C42A    |

CODE_01C42C:                    ;```````````| Not in Reznor/Morton/Roy's boss room.
    JSR SubUpdateSprPos         ;$01C42C    | Update X/Y position, apply gravity, and process interaction with blocks.
CODE_01C42F:                    ;           |
    LDA $13                     ;$01C42F    |\ 
    AND.b #$03                  ;$01C431    || Adjust fall speed slightly.
    BEQ CODE_01C437             ;$01C433    ||
    DEC $AA,X                   ;$01C435    |/
CODE_01C437:                    ;           |
    JSR SubOffscreen0Bnk1       ;$01C437    | Process offscreen from -$40 to +$30.
    JSR IsTouchingCeiling       ;$01C43A    |\ 
    BEQ CODE_01C443             ;$01C43D    || Clear Y speed if hitting a ceiling.
    LDA.b #$00                  ;$01C43F    ||
    STA $AA,X                   ;$01C441    |/
CODE_01C443:                    ;           |
    JSR IsOnGround              ;$01C443    |\ 
    BNE CODE_01C44A             ;$01C446    || Skip Y speed handler if in air.
    BRA CODE_01C47E             ;$01C448    |/

CODE_01C44A:                    ;```````````| Set Y speed on the ground.
    LDA $9E,X                   ;$01C44A    |\ 
    CMP.b #$21                  ;$01C44C    || Branch if not a coin.
    BNE CODE_01C46C             ;$01C44E    |/
    JSR CODE_018DBB             ;$01C450    | Set X speed.
    LDA $AA,X                   ;$01C453    |\ 
    INC A                       ;$01C455    ||
    PHA                         ;$01C456    ||
    JSR SetSomeYSpeed           ;$01C457    ||
    PLA                         ;$01C45A    ||
    LSR                         ;$01C45B    || Give coin standard Y speed.
    JSR CODE_01CCEC             ;$01C45C    ||  (adjust it a bit weirdly when on Layer 2...)
    CMP.b #$FC                  ;$01C45F    ||
    BCS CODE_01C46A             ;$01C461    ||
    LDY.w $1588,X               ;$01C463    ||
    BMI CODE_01C46A             ;$01C466    ||
    STA $AA,X                   ;$01C468    |/
CODE_01C46A:                    ;           |
    BRA CODE_01C47E             ;$01C46A    |

CODE_01C46C:                    ;```````````| Set ground Y speed for non-coin powerups.
    JSR SetSomeYSpeed           ;$01C46C    |\ 
    LDA.w $151C,X               ;$01C46F    ||
    BNE CODE_01C47A             ;$01C472    ||
    LDA $9E,X                   ;$01C474    ||
    CMP.b #$76                  ;$01C476    || Give standard Y speed if not star/roulette, else make it bounce.
    BNE CODE_01C47E             ;$01C478    ||
CODE_01C47A:                    ;           ||
    LDA.b #$C8                  ;$01C47A    ||| Bounce Y speed for star/roulette sprite.
    STA $AA,X                   ;$01C47C    |/
    
CODE_01C47E:                    ;```````````| All powerups meet back up.
    LDA.w $1558,X               ;$01C47E    |\ 
    ORA $C2,X                   ;$01C481    || If moving and touching the side of an object,
    BNE CODE_01C48D             ;$01C483    ||  or if the roulette sprite after first coming out of its block,
    JSR IsTouchingObjSide       ;$01C485    ||  flip the sprite's direction.
    BEQ CODE_01C48D             ;$01C488    ||
    JSR FlipSpriteDir           ;$01C48A    |/
CODE_01C48D:                    ;           |
    LDA.w $1540,X               ;$01C48D    |\ 
    CMP.b #$36                  ;$01C490    || Don't draw for a few frames after spawning from a block.
    BCS CODE_01C4A8             ;$01C492    |/
    LDA $C2,X                   ;$01C494    |\ 
    BEQ CODE_01C49C             ;$01C496    ||
    CMP.b #$FF                  ;$01C498    ||
    BNE CODE_01C4A1             ;$01C49A    ||
CODE_01C49C:                    ;           || If stationary or set to go behind scenery, draw behind objects.
    LDA.w $1632,X               ;$01C49C    ||
    BEQ CODE_01C4A5             ;$01C49F    ||
CODE_01C4A1:                    ;           ||
    LDA.b #$10                  ;$01C4A1    ||
    STA $64                     ;$01C4A3    |/
CODE_01C4A5:                    ;           |
    JSR CODE_01C61A             ;$01C4A5    | Draw GFX.
CODE_01C4A8:                    ;           |
    PLA                         ;$01C4A8    |
    STA $64                     ;$01C4A9    |
Return01C4AB:                   ;           |
    RTS                         ;$01C4AB    |



CODE_01C4AC:                    ;-----------| Generic powerup interaction routine (including coin).
    JSR CODE_01A80F             ;$01C4AC    |\ 
    BCC Return01C4AB            ;$01C4AF    ||
    LDA.w $151C,X               ;$01C4B1    ||
    BEQ CODE_01C4BA             ;$01C4B4    || Return if:
    LDA $C2,X                   ;$01C4B6    || - Mario isn't in contact with the powerup.
    BNE Return01C4FA            ;$01C4B8    || - It's a roulette sprite still in the block.
CODE_01C4BA:                    ;           || - Contact is disabled with Mario.
    LDA.w $154C,X               ;$01C4BA    || - Powerup is rising out of a block.
    BNE Return01C4FA            ;$01C4BD    ||
CODE_01C4BF:                    ;           || Else, interact with the powerup.
    LDA.w $1540,X               ;$01C4BF    || 
    CMP.b #$18                  ;$01C4C2    ||
    BCS Return01C4FA            ;$01C4C4    |/
    STZ.w $14C8,X               ;$01C4C6    | Erase sprite.
    LDA $9E,X                   ;$01C4C9    |\ 
    CMP.b #$21                  ;$01C4CB    || Branch if not a moving coin.
    BNE TouchedPowerUp          ;$01C4CD    |/
    JSL CODE_05B34A             ;$01C4CF    | Give a coin.
    LDA.w $15F6,X               ;$01C4D3    |\ 
    AND.b #$0E                  ;$01C4D6    ||
    CMP.b #$02                  ;$01C4D8    || Give an appropriate amount of points.
    BEQ CODE_01C4E0             ;$01C4DA    ||
    LDA.b #$01                  ;$01C4DC    ||| Points to give for a normal coin.
    BRA CODE_01C4EC             ;$01C4DE    ||
CODE_01C4E0:                    ;           ||
    LDA.w $18DD                 ;$01C4E0    ||
    INC.w $18DD                 ;$01C4E3    ||
    CMP.b #$0A                  ;$01C4E6    ||| Maximum points to give for a silver coin.
    BCC CODE_01C4EC             ;$01C4E8    ||
    LDA.b #$0A                  ;$01C4EA    ||
CODE_01C4EC:                    ;           ||
    JSL GivePoints              ;$01C4EC    |/
CODE_01C4F0:                    ;           |
    LDY.b #$03                  ;$01C4F0    |\ 
CODE_01C4F2:                    ;           ||
    LDA.w $17C0,Y               ;$01C4F2    || Find an empty smoke sprite slot to put glitter in.
    BEQ CODE_01C4FB             ;$01C4F5    ||
    DEY                         ;$01C4F7    ||
    BPL CODE_01C4F2             ;$01C4F8    |/
Return01C4FA:                   ;           |
    RTS                         ;$01C4FA    |

CODE_01C4FB:
    LDA.b #$05                  ;$01C4FB    |\ 
    STA.w $17C0,Y               ;$01C4FD    ||
    LDA $E4,X                   ;$01C500    ||
    STA.w $17C8,Y               ;$01C502    || Spawn glitter at the sprite's position.
    LDA $D8,X                   ;$01C505    ||
    STA.w $17C4,Y               ;$01C507    ||
    LDA.b #$10                  ;$01C50A    ||
    STA.w $17CC,Y               ;$01C50C    |/
    RTS                         ;$01C50F    |





ItemBoxSprite:                  ;$01C510    | Items to put in the item box when Mario collects a powerup, indexed by his status and the sprite ID.
    db $00,$01,$01,$01          ; Mushroom
    db $00,$01,$04,$02          ; Flower
    db $00,$00,$00,$00          ; Star
    db $00,$01,$04,$02          ; Feather
    db $00,$00,$00,$00          ; 1up

GivePowerPtrIndex:              ;$01C524    | Pointers to powerup transformations for each powerup collected.
    db $00,$01,$01,$01          ; Mushroom
    db $04,$04,$04,$01          ; Flower
    db $02,$02,$02,$02          ; Star
    db $03,$03,$01,$03          ; Feather
    db $05,$05,$05,$05          ; 1up

TouchedPowerUp:                 ;-----------| Routine to decide what to do when a powerup is touched or eaten. Usage: sprite ID in A.
    SEC                         ;$01C538    |\ 
    SBC.b #$74                  ;$01C539    ||
    ASL                         ;$01C53B    ||
    ASL                         ;$01C53C    ||
    ORA $19                     ;$01C53D    || Get the sprite to put in the item box, if applicable.
    TAY                         ;$01C53F    ||
    LDA.w ItemBoxSprite,Y       ;$01C540    ||
    BEQ NoItem                  ;$01C543    ||
    STA.w $0DC2                 ;$01C545    |/
    LDA.b #$0B                  ;$01C548    |\ SFX to play when Mario receives a powerup in the item box.
    STA.w $1DFC                 ;$01C54A    |/
NoItem:                         ;           |
    LDA.w GivePowerPtrIndex,Y   ;$01C54D    |
    JSL ExecutePtr              ;$01C550    |

HandlePowerUpPtrs:              ;$01C554    | Powerup routine pointers (specifically, the "give powerup" part).
    dw GiveMarioMushroom                    ; 00 - Big
    dw CODE_01C56F                          ; 01 - Do nothing (give points)
    dw GiveMarioStar                        ; 02 - Star
    dw GiveMarioCape                        ; 03 - Cape
    dw GiveMarioFire                        ; 04 - Fireflower
    dw GiveMario1Up                         ; 05 - 1up

    RTS                         ;$01C560    |



GiveMarioMushroom:              ;-----------| Routine to handle giving Mario a mushroom.
    LDA.b #$02                  ;$01C561    |\ 
    STA $71                     ;$01C563    ||
    LDA.b #$2F                  ;$01C565    ||| How many frames the mushroom powerup animation lasts.
    STA.w $1496,Y               ;$01C567    |/ (sidenote: the ,Y here is probably a typo. Y is always 00 here though, so no issues)
    STA $9D                     ;$01C56A    |
    JMP CODE_01C56F             ;$01C56C    |



CODE_01C56F:                    ;-----------| Routine for giving points after collecting most powerups (except capes/1ups). Also serves as a general 'do nothing'.
    LDA.b #$04                  ;$01C56F    |\\ How many points to give Mario for collecting a powerup (1000).
    LDY.w $1534,X               ;$01C571    || Give points, unless it's from the item box.
    BNE CODE_01C57A             ;$01C574    ||
    JSL GivePoints              ;$01C576    |/
CODE_01C57A:                    ;           |
    LDA.b #$0A                  ;$01C57A    |\ SFX for collecting a powerup.
    STA.w $1DF9                 ;$01C57C    |/
    RTS                         ;$01C57F    |



CODE_01C580:
    LDA.b #$FF                  ;$01C580    |\\ How long star power lasts.
    STA.w $1490                 ;$01C582    |/
    LDA.b #$0D                  ;$01C585    |\ SFX for the star power music.
    STA.w $1DFB                 ;$01C587    |/
    ASL.w $0DDA                 ;$01C58A    |
    SEC                         ;$01C58D    |
    ROR.w $0DDA                 ;$01C58E    |
    RTL                         ;$01C591    |

GiveMarioStar:                  ;-----------| Routine to handle giving Mario a star.
    JSL CODE_01C580             ;$01C592    | Run above routine.
    BRA CODE_01C56F             ;$01C596    | Give points.



GiveMarioCape:                  ;-----------| Routine to handle giving Mario a cape.
    LDA.b #$02                  ;$01C598    |\ Set cape status.
    STA $19                     ;$01C59A    |/
    LDA.b #$0D                  ;$01C59C    |\ SFX for grabbing a feather.
    STA.w $1DF9                 ;$01C59E    |/
    LDA.b #$04                  ;$01C5A1    |\\ How many points grabbing a feather gives (1000).
    JSL GivePoints              ;$01C5A3    |/
    JSL CODE_01C5AE             ;$01C5A7    | Make a cloud of smoke at Mario's position.
    INC $9D                     ;$01C5AB    |
    RTS                         ;$01C5AD    |



CODE_01C5AE:                    ;-----------| Routine (JSL) to make a cloud of smoke at Mario's position and temporarily freeze the game.
    LDA $81                     ;$01C5AE    |\ 
    ORA $7F                     ;$01C5B0    || Return if Mario is offscreen.
    BNE Return01C5EB            ;$01C5B2    |/
    LDA.b #$03                  ;$01C5B4    |\ 
    STA $71                     ;$01C5B6    ||
    LDA.b #$18                  ;$01C5B8    ||| How many frames the cape animation lasts.
    STA.w $1496                 ;$01C5BA    |/
    LDY.b #$03                  ;$01C5BD    |\ 
CODE_01C5BF:                    ;           ||
    LDA.w $17C0,Y               ;$01C5BF    ||
    BEQ CODE_01C5D4             ;$01C5C2    ||
    DEY                         ;$01C5C4    ||
    BPL CODE_01C5BF             ;$01C5C5    ||
    DEC.w $1863                 ;$01C5C7    ||
    BPL CODE_01C5D1             ;$01C5CA    ||
    LDA.b #$03                  ;$01C5CC    ||
    STA.w $1863                 ;$01C5CE    ||
CODE_01C5D1:                    ;           ||
    LDY.w $1863                 ;$01C5D1    || Spawn a cloud of smoke at Mario's position.
CODE_01C5D4:                    ;           ||
    LDA.b #$81                  ;$01C5D4    ||
    STA.w $17C0,Y               ;$01C5D6    ||
    LDA.b #$1B                  ;$01C5D9    ||| How long the smoke lasts.
    STA.w $17CC,Y               ;$01C5DB    ||
    LDA $96                     ;$01C5DE    ||
    CLC                         ;$01C5E0    ||
    ADC.b #$08                  ;$01C5E1    ||
    STA.w $17C4,Y               ;$01C5E3    ||
    LDA $94                     ;$01C5E6    ||
    STA.w $17C8,Y               ;$01C5E8    |/
Return01C5EB:                   ;           |
    RTL                         ;$01C5EB    |



GiveMarioFire:                  ;-----------| Routine to handle giving Mario a fireflower.
    LDA.b #$20                  ;$01C5EC    |\\ How many frames the animation lasts.
    STA.w $149B                 ;$01C5EE    ||
    STA $9D                     ;$01C5F1    |/
    LDA.b #$04                  ;$01C5F3    |
    STA $71                     ;$01C5F5    |
    LDA.b #$03                  ;$01C5F7    |\ Set fire status.
    STA $19                     ;$01C5F9    |/
    JMP CODE_01C56F             ;$01C5FB    |



GiveMario1Up:                   ;-----------| Routine to handle giving Mario a 1up.
    LDA.b #$08                  ;$01C5FE    |\ 
    CLC                         ;$01C600    || Give Mario a 1up. Seems to be able to give 2/3ups as well.
    ADC.w $1594,X               ;$01C601    ||
    JSL GivePoints              ;$01C604    |/
    RTS                         ;$01C608    |





PowerUpTiles:                   ;$01C609    | Tiles used by various powerup sprites. Order:
    db $24,$26,$48,$0E,$24,$00,$00,$00      ; Mushroom, flower, star, feather, 1up, -, -, -
    db $00,$E4,$E8,$24,$EC                  ; -, P-balloon, flying red coin, flying 1-up, flying key

StarPalValues:                  ;$01C616    | Palettes that star power flashes through.
    db $00,$04,$08,$04

CODE_01C61A:                    ;-----------| Subroutine to draw graphics for powerups and coin sprites.
    JSR GetDrawInfoBnk1         ;$01C61A    |
    STZ $0A                     ;$01C61D    |
    LDA.w $140F                 ;$01C61F    |\ 
    BNE CODE_01C636             ;$01C622    ||
    LDA.w $0D9B                 ;$01C624    ||
    CMP.b #$C1                  ;$01C627    || If in a Mode 7 room (except Reznor's/Bowser's), change the OAM index.
    BEQ CODE_01C636             ;$01C629    ||
    BIT.w $0D9B                 ;$01C62B    ||
    BVC CODE_01C636             ;$01C62E    ||
    LDA.b #$D8                  ;$01C630    ||\\ OAM index for a powerup in Mode 7 rooms.
    STA.w $15EA,X               ;$01C632    ||/
    TAY                         ;$01C635    |/
CODE_01C636:                    ;           |
    LDA $9E,X                   ;$01C636    |\ 
    CMP.b #$21                  ;$01C638    ||
    BNE PowerUpGfxRt            ;$01C63A    || Jump to the graphics routine corresponding to the sprite.
    JSL CoinSprGfx              ;$01C63C    ||
    RTS                         ;$01C640    |/



CoinSprGfx:                     ;-----------| Subroutine to draw graphics for sprite 21 (coin).
    JSR CoinSprGfxSub           ;$01C641    |
    RTL                         ;$01C644    |

CoinSprGfxSub:
    JSR GetDrawInfoBnk1         ;$01C645    |
    LDA $00                     ;$01C648    |\ 
    STA.w $0300,Y               ;$01C64A    || Set X/Y position.
    LDA $01                     ;$01C64D    ||
    STA.w $0301,Y               ;$01C64F    |/
    LDA.b #$E8                  ;$01C652    |\\ Base tile to use for the coin. 
    STA.w $0302,Y               ;$01C654    |/
    LDA.w $15F6,X               ;$01C657    |\ 
    ORA $64                     ;$01C65A    || Set YXPPCCCT.
    STA.w $0303,Y               ;$01C65C    |/
    TXA                         ;$01C65F    |\ 
    CLC                         ;$01C660    ||
    ADC $14                     ;$01C661    ||
    LSR                         ;$01C663    || Animate spinning.
    LSR                         ;$01C664    ||
    AND.b #$03                  ;$01C665    ||
    BNE CODE_01C670             ;$01C667    |/
    LDY.b #$02                  ;$01C669    |\ Draw 16x16.
    BRA CODE_01C69A             ;$01C66B    |/

MovingCoinTiles:                ;$01C66D    | 8x8 tiles to use for the coin in its turning frame.
    db $EA,$FA,$EA

CODE_01C670:                    ;-----------| Draws the coin in its turning frame (2 8x8s).
    PHX                         ;$01C670    |
    TAX                         ;$01C671    |
    LDA $00                     ;$01C672    |\ 
    CLC                         ;$01C674    ||
    ADC.b #$04                  ;$01C675    || Offset horizontally.
    STA.w $0300,Y               ;$01C677    ||
    STA.w $0304,Y               ;$01C67A    |/
    LDA $01                     ;$01C67D    |\ 
    CLC                         ;$01C67F    || Offset bottom 8x8.
    ADC.b #$08                  ;$01C680    ||
    STA.w $0305,Y               ;$01C682    |/
    LDA.l MovingCoinTiles-1,X   ;$01C685    |\ 
    STA.w $0302,Y               ;$01C689    || Set tile number.
    STA.w $0306,Y               ;$01C68C    |/
    LDA.w $0303,Y               ;$01C68F    |\ 
    ORA.b #$80                  ;$01C692    || Flip bottom tile vertically.
    STA.w $0307,Y               ;$01C694    |/
    PLX                         ;$01C697    |
    LDY.b #$00                  ;$01C698    | Draw 8x8s.
CODE_01C69A:                    ;           |
    LDA.b #$01                  ;$01C69A    |\ Draw two tiles.
    JSL FinishOAMWrite          ;$01C69C    |/
    RTS                         ;$01C6A0    |



PowerUpGfxRt:                   ;-----------| Routine to draw graphics for powerup sprites.
    CMP.b #$76                  ;$01C6A1    |\ If not the star, don't animate palette.
    BNE NoFlashingPal           ;$01C6A3    ||
    LDA $13                     ;$01C6A5    ||\ 
    LSR                         ;$01C6A7    |||
    AND.b #$03                  ;$01C6A8    |||
    PHY                         ;$01C6AA    ||| Get current palette for the star.
    TAY                         ;$01C6AB    |||
    LDA.w StarPalValues,Y       ;$01C6AC    |||
    PLY                         ;$01C6AF    |||
    STA $0A                     ;$01C6B0    |//
NoFlashingPal:                  ;           |
    LDA $00                     ;$01C6B2    |\ 
    STA.w $0300,Y               ;$01C6B4    ||
    LDA $01                     ;$01C6B7    || Set X/Y position.
    DEC A                       ;$01C6B9    ||
    STA.w $0301,Y               ;$01C6BA    |/
    LDA.w $157C,X               ;$01C6BD    |\ 
    LSR                         ;$01C6C0    ||
    LDA.b #$00                  ;$01C6C1    ||
    BCS CODE_01C6C7             ;$01C6C3    ||
    ORA.b #$40                  ;$01C6C5    || Set YXPPCCCT.
CODE_01C6C7:                    ;           ||
    ORA $64                     ;$01C6C7    ||
    ORA.w $15F6,X               ;$01C6C9    ||
    EOR $0A                     ;$01C6CC    ||
    STA.w $0303,Y               ;$01C6CE    |/
    LDA $9E,X                   ;$01C6D1    |\ 
    SEC                         ;$01C6D3    ||
    SBC.b #$74                  ;$01C6D4    || Set tile number.
    TAX                         ;$01C6D6    ||
    LDA.w PowerUpTiles,X        ;$01C6D7    ||
    STA.w $0302,Y               ;$01C6DA    |/
    LDX.w $15E9                 ;$01C6DD    |
    LDA.b #$00                  ;$01C6E0    |\ Draw one 16x16 tile.
    JSR CODE_01B37E             ;$01C6E2    |/
    RTS                         ;$01C6E5    |



DATA_01C6E6:                    ;$01C6E6    | X speed accelerations for the feather.
    db $02,$FE

DATA_01C6E8:                    ;$01C6E8    | Maximum X speeds for the feather.
    db $20,$E0

DATA_01C6EA:                    ;$01C6EA    | Y speeds for the feather's "swing". Actual speed is this + #$06.
    db $0A,$F6,$08                          ; 0 = down (left); 1 = up; 2 = down (right)

FeatherMain:                    ;-----------| Feather MAIN.
    LDA $9D                     ;$01C6ED    |\ If game frozen, just handle touched routine and graphics.
    BNE CODE_01C744             ;$01C6EF    |/
    LDA $C2,X                   ;$01C6F1    |\ Branch if not stationary.
    BEQ CODE_01C701             ;$01C6F3    |/
    JSR CODE_019140             ;$01C6F5    |\ 
    LDA.w $1588,X               ;$01C6F8    || If no longer on the ground, set to fall.
    BNE CODE_01C6FF             ;$01C6FB    ||
    STZ $C2,X                   ;$01C6FD    |/
CODE_01C6FF:                    ;           |
    BRA CODE_01C741             ;$01C6FF    | Interact with Mario and draw.
                                             
CODE_01C701:                    ;```````````| Feather is in air.
    LDA.w $14C8,X               ;$01C701    |\ 
    CMP.b #$0C                  ;$01C704    || Just draw graphics if spawned by the goal tape.
    BEQ CODE_01C744             ;$01C706    |/
    LDA.w $154C,X               ;$01C708    |\ 
    BEQ CODE_01C715             ;$01C70B    || If knocked out of a block, only update Y position and decelerate,
    JSR SubSprYPosNoGrvty       ;$01C70D    ||  then process interaction with Mario and draw.
    INC $AA,X                   ;$01C710    ||
    JMP CODE_01C741             ;$01C712    |/
                                             
CODE_01C715:                    ;```````````| Feather is falling.
    LDA.w $1528,X               ;$01C715    |\ 
    AND.b #$01                  ;$01C718    ||
    TAY                         ;$01C71A    ||
    LDA $B6,X                   ;$01C71B    ||
    CLC                         ;$01C71D    || Accerate horizontally.
    ADC.w DATA_01C6E6,Y         ;$01C71E    ||  If at max speed, invert direction.
    STA $B6,X                   ;$01C721    ||
    CMP.w DATA_01C6E8,Y         ;$01C723    ||
    BNE CODE_01C72B             ;$01C726    ||
    INC.w $1528,X               ;$01C728    |/
CODE_01C72B:                    ;           |
    LDA $B6,X                   ;$01C72B    |\ 
    BPL CODE_01C730             ;$01C72D    ||
    INY                         ;$01C72F    ||
CODE_01C730:                    ;           || Set Y speed based on where in the swing the feather is.
    LDA.w DATA_01C6EA,Y         ;$01C730    ||
    CLC                         ;$01C733    ||
    ADC.b #$06                  ;$01C734    ||
    STA $AA,X                   ;$01C736    |/
    JSR SubOffscreen0Bnk1       ;$01C738    | Process offscreen from -$40 to +$30.
    JSR SubSprXPosNoGrvty       ;$01C73B    |\ Update X/Y position. 
    JSR SubSprYPosNoGrvty       ;$01C73E    |/
CODE_01C741:                    ;           |
    JSR UpdateDirection         ;$01C741    | Update directon based on X speed.
CODE_01C744:                    ;           |
    JSR CODE_01C4AC             ;$01C744    | Process interaction with Mario.
    JMP CODE_01C61A             ;$01C747    | Draw graphics.





InitBrwnChainPlat:              ;-----------| Revolving platform INIT
    LDA.b #$80                  ;$01C74A    |\ 
    STA.w $151C,X               ;$01C74C    || Set initial angle (#$0180 = 270deg)
    LDA.b #$01                  ;$01C74F    ||
    STA.w $1528,X               ;$01C751    |/
    LDA $E4,X                   ;$01C754    |\ 
    CLC                         ;$01C756    ||
    ADC.b #$78                  ;$01C757    ||
    STA $E4,X                   ;$01C759    ||
    LDA.w $14E0,X               ;$01C75B    ||
    ADC.b #$00                  ;$01C75E    ||
    STA.w $14E0,X               ;$01C760    || Shift center position from spawn location.
    LDA $D8,X                   ;$01C763    ||  (7.8 blocks right, 6.8 blocks down)
    CLC                         ;$01C765    ||
    ADC.b #$68                  ;$01C766    ||
    STA $D8,X                   ;$01C768    ||
    LDA.w $14D4,X               ;$01C76A    ||
    ADC.b #$00                  ;$01C76D    ||
    STA.w $14D4,X               ;$01C76F    |/
    RTS                         ;$01C772    |



    ; Revolving platform misc RAM:
    ; $C2   - X position (low) of the platform, previous frame, Used to determine how far it's moved in the frame.
    ; $1504 - Speed of rotation. Max #$40.
    ; $1510 - Accumulating fraction bits for the angle.
    ; $151C - Angle, low.
    ; $1528 - Angle, high. Odd = upper half, even = lower half.
    ; $1602 - Flag for being on the platform. Set to #$03 if true.
    ; $160E - Flag for simply touching the platform. Set to #$01 if true.
    
BrownChainedPlat:               ;-----------| Revolving platform MAIN
    JSR SubOffscreen2Bnk1       ;$01C773    |
    LDA $9D                     ;$01C776    |\ 
    BNE CODE_01C795             ;$01C778    ||
    LDA $13                     ;$01C77A    || Every 4th frame while the game is not frozen,
    AND.b #$03                  ;$01C77C    ||  if Mario is not on the platform, slow it down.
    ORA.w $1602,X               ;$01C77E    ||
    BNE CODE_01C795             ;$01C781    ||
    LDA.b #$01                  ;$01C783    ||| Deceleration speed (counterclockwise)
    LDY.w $1504,X               ;$01C785    ||
    BEQ CODE_01C795             ;$01C788    ||
    BMI CODE_01C78E             ;$01C78A    ||
    LDA.b #$FF                  ;$01C78C    ||| Deceleration speed (clockwise)
CODE_01C78E:                    ;           ||
    CLC                         ;$01C78E    ||
    ADC.w $1504,X               ;$01C78F    ||
    STA.w $1504,X               ;$01C792    |/
CODE_01C795:                    ;           |
    LDA.w $151C,X               ;$01C795    |\ 
    PHA                         ;$01C798    ||
    LDA.w $1528,X               ;$01C799    ||
    PHA                         ;$01C79C    ||
    LDA.b #$00                  ;$01C79D    ||
    SEC                         ;$01C79F    ||
    SBC.w $151C,X               ;$01C7A0    ||
    STA.w $151C,X               ;$01C7A3    ||
    LDA.b #$02                  ;$01C7A6    ||
    SBC.w $1528,X               ;$01C7A8    || Update rotation.
    AND.b #$01                  ;$01C7AB    || Output is in $14B8 (X) and $14BA (Y).
    STA.w $1528,X               ;$01C7AD    ||  
    JSR CODE_01CACB             ;$01C7B0    ||
    JSR CODE_01CB20             ;$01C7B3    ||
    JSR CODE_01CB53             ;$01C7B6    ||
    PLA                         ;$01C7B9    ||
    STA.w $1528,X               ;$01C7BA    ||
    PLA                         ;$01C7BD    ||
    STA.w $151C,X               ;$01C7BE    |/
    LDA.w $14B8                 ;$01C7C1    |\ 
    PHA                         ;$01C7C4    ||
    SEC                         ;$01C7C5    ||
    SBC $C2,X                   ;$01C7C6    || Register how much the platform moved horizontally.
    STA.w $1491                 ;$01C7C8    ||
    PLA                         ;$01C7CB    ||
    STA $C2,X                   ;$01C7CC    |/
    LDY.w $15EA,X               ;$01C7CE    |
    LDA.w $14BA                 ;$01C7D1    |\ 
    SEC                         ;$01C7D4    ||
    SBC $1C                     ;$01C7D5    ||
    SEC                         ;$01C7D7    ||
    SBC.b #$08                  ;$01C7D8    ||
    STA.w $0301,Y               ;$01C7DA    ||
    LDA.w $14B8                 ;$01C7DD    ||
    SEC                         ;$01C7E0    || Store OAM for the outermost chain link.
    SBC $1A                     ;$01C7E1    ||
    SEC                         ;$01C7E3    ||
    SBC.b #$08                  ;$01C7E4    ||
    STA.w $0300,Y               ;$01C7E6    ||
    LDA.b #$A2                  ;$01C7E9    ||| Tile
    STA.w $0302,Y               ;$01C7EB    ||
    LDA.b #$31                  ;$01C7EE    ||| YXPPCCCT
    STA.w $0303,Y               ;$01C7F0    |/
    LDY.b #$00                  ;$01C7F3    |\ 
    LDA.w $14BA                 ;$01C7F5    ||
    SEC                         ;$01C7F8    ||
    SBC.w $14B2                 ;$01C7F9    ||
    BPL CODE_01C802             ;$01C7FC    || Adjust for whether the platform is left or right of the center.
    EOR.b #$FF                  ;$01C7FE    || $00 - 00 if left, 01 if right.
    INC A                       ;$01C800    ||
    INY                         ;$01C801    ||
CODE_01C802:                    ;           ||
    STY $00                     ;$01C802    |/
    STA.w $4205                 ;$01C804    |\ 
    STZ.w $4204                 ;$01C807    ||
    LDA.b #$05                  ;$01C80A    ||
    STA.w $4206                 ;$01C80C    ||
    JSR DoNothing               ;$01C80F    || Calculate tile X position.
    LDA.w $4214                 ;$01C812    || $02/$03 = X offset between each tile.
    STA $02                     ;$01C815    || $06/$07 = X position of the current tile.
    STA $06                     ;$01C817    ||
    LDA.w $4215                 ;$01C819    ||
    STA $03                     ;$01C81C    ||
    STA $07                     ;$01C81E    |/
    LDY.b #$00                  ;$01C820    |\ 
    LDA.w $14B8                 ;$01C822    ||
    SEC                         ;$01C825    ||
    SBC.w $14B0                 ;$01C826    ||
    BPL CODE_01C82F             ;$01C829    || Adjust for whether the platform is above or below the center.
    EOR.b #$FF                  ;$01C82B    || $01 - 00 if above, 01 if below.
    INC A                       ;$01C82D    ||
    INY                         ;$01C82E    ||
CODE_01C82F:                    ;           ||
    STY $01                     ;$01C82F    |/
    STA.w $4205                 ;$01C831    |\ 
    STZ.w $4204                 ;$01C834    ||
    LDA.b #$05                  ;$01C837    ||
    STA.w $4206                 ;$01C839    ||
    JSR DoNothing               ;$01C83C    || Calculate tile Y position.
    LDA.w $4214                 ;$01C83F    || $04/$05 - Y offset between each tile.
    STA $04                     ;$01C842    || $08/$09 - Y position of the current tile.
    STA $08                     ;$01C844    ||
    LDA.w $4215                 ;$01C846    ||
    STA $05                     ;$01C849    ||
    STA $09                     ;$01C84B    |/
    LDY.w $15EA,X               ;$01C84D    |
    INY                         ;$01C850    |
    INY                         ;$01C851    |
    INY                         ;$01C852    |
    INY                         ;$01C853    |
    LDA.w $14B2                 ;$01C854    |\ 
    SEC                         ;$01C857    || Dummy OAM tile for the center of the chain.
    SBC $1C                     ;$01C858    ||
    SEC                         ;$01C85A    ||
    SBC.b #$08                  ;$01C85B    ||| Y offset of the center of the chain.
    STA $0A                     ;$01C85D    ||
    STA.w $0301,Y               ;$01C85F    ||
    LDA.w $14B0                 ;$01C862    ||
    SEC                         ;$01C865    ||
    SBC $1A                     ;$01C866    ||  
    SEC                         ;$01C868    ||
    SBC.b #$08                  ;$01C869    ||| X offset of the center of the chain.
    STA $0B                     ;$01C86B    ||
    STA.w $0300,Y               ;$01C86D    ||
    LDA.b #$A2                  ;$01C870    ||\ 
    STA.w $0302,Y               ;$01C872    ||| Useless, as the tile gets sent offscreen later.
    LDA.b #$31                  ;$01C875    |||
    STA.w $0303,Y               ;$01C877    |//
    LDX.b #$03                  ;$01C87A    |] Number of additional chain links to draw (excluding outermost).
CODE_01C87C:                    ;```````````| Chain link GFX loop.
    INY                         ;$01C87C    |
    INY                         ;$01C87D    |
    INY                         ;$01C87E    |
    INY                         ;$01C87F    |
    LDA $00                     ;$01C880    |\ 
    BNE CODE_01C88E             ;$01C882    ||
    LDA $0A                     ;$01C884    ||
    CLC                         ;$01C886    ||
    ADC $07                     ;$01C887    ||
    STA.w $0301,Y               ;$01C889    || Store Y position for the tile.
    BRA CODE_01C896             ;$01C88C    ||
CODE_01C88E:                    ;           ||
    LDA $0A                     ;$01C88E    ||
    SEC                         ;$01C890    ||
    SBC $07                     ;$01C891    ||
    STA.w $0301,Y               ;$01C893    |/
CODE_01C896:                    ;           |
    LDA $06                     ;$01C896    |\ 
    CLC                         ;$01C898    ||
    ADC $02                     ;$01C899    ||
    STA $06                     ;$01C89B    || Update Y position for the next tile.
    LDA $07                     ;$01C89D    ||
    ADC $03                     ;$01C89F    ||
    STA $07                     ;$01C8A1    |/
    LDA $01                     ;$01C8A3    |\ 
    BNE CODE_01C8B1             ;$01C8A5    ||
    LDA $0B                     ;$01C8A7    ||
    CLC                         ;$01C8A9    ||
    ADC $09                     ;$01C8AA    ||
    STA.w $0300,Y               ;$01C8AC    || Store X position for the tile.
    BRA CODE_01C8B9             ;$01C8AF    ||
CODE_01C8B1:                    ;           ||
    LDA $0B                     ;$01C8B1    ||
    SEC                         ;$01C8B3    ||
    SBC $09                     ;$01C8B4    ||
    STA.w $0300,Y               ;$01C8B6    |/
CODE_01C8B9:                    ;           |
    LDA $08                     ;$01C8B9    |\ 
    CLC                         ;$01C8BB    ||
    ADC $04                     ;$01C8BC    ||
    STA $08                     ;$01C8BE    || Update X position for the next tile.
    LDA $09                     ;$01C8C0    ||
    ADC $05                     ;$01C8C2    ||
    STA $09                     ;$01C8C4    |/
    LDA.b #$A2                  ;$01C8C6    |\ 
    STA.w $0302,Y               ;$01C8C8    || Store tile number and YXPPCCCT for the chain link.
    LDA.b #$31                  ;$01C8CB    ||
    STA.w $0303,Y               ;$01C8CD    |/
    DEX                         ;$01C8D0    |
    BPL CODE_01C87C             ;$01C8D1    |
    LDX.b #$03                  ;$01C8D3    |] Number of tiles to draw for the platform.
CODE_01C8D5:                    ;```````````| Platform GFX loop.
    STX $02                     ;$01C8D5    |
    INY                         ;$01C8D7    |
    INY                         ;$01C8D8    |
    INY                         ;$01C8D9    |
    INY                         ;$01C8DA    |
    LDA.w $14BA                 ;$01C8DB    |\ 
    SEC                         ;$01C8DE    ||
    SBC $1C                     ;$01C8DF    || Set Y position.
    SEC                         ;$01C8E1    ||
    SBC.b #$10                  ;$01C8E2    ||| Y offset from outermost chain tile for the platform.
    STA.w $0301,Y               ;$01C8E4    |/
    LDA.w $14B8                 ;$01C8E7    |\ 
    SEC                         ;$01C8EA    ||
    SBC $1A                     ;$01C8EB    || Set X position.
    CLC                         ;$01C8ED    ||
    ADC.w DATA_01C9B7,X         ;$01C8EE    ||
    STA.w $0300,Y               ;$01C8F1    |/
    LDA.w BrwnChainPlatTiles,X  ;$01C8F4    |\ 
    STA.w $0302,Y               ;$01C8F7    || Set tile and YXPPCCCT.
    LDA.b #$31                  ;$01C8FA    ||
    STA.w $0303,Y               ;$01C8FC    |/
    DEX                         ;$01C8FF    |
    BPL CODE_01C8D5             ;$01C900    |
    LDX.w $15E9                 ;$01C902    |
    LDA.b #$09                  ;$01C905    |\ Number of tiles total in the platform.
    STA $08                     ;$01C907    |/
    LDA.w $14B2                 ;$01C909    |\ 
    SEC                         ;$01C90C    ||
    SBC.b #$08                  ;$01C90D    ||
    STA $00                     ;$01C90F    ||
    LDA.w $14B3                 ;$01C911    ||
    SBC.b #$00                  ;$01C914    ||
    STA $01                     ;$01C916    || Store some information.
    LDA.w $14B0                 ;$01C918    || $00 - 16-bit Xpos of the platform's center.
    SEC                         ;$01C91B    || $02 - 16-bit Ypos of the platform's center.
    SBC.b #$08                  ;$01C91C    || $06 - On-screen Y position of the platform's center.
    STA $02                     ;$01C91E    || $07 - On-screen X position of the platform's center.
    LDA.w $14B1                 ;$01C920    ||
    SBC.b #$00                  ;$01C923    ||
    STA $03                     ;$01C925    ||
    LDY.w $15EA,X               ;$01C927    ||
    LDA.w $0305,Y               ;$01C92A    ||
    STA $06                     ;$01C92D    ||
    LDA.w $0304,Y               ;$01C92F    ||
    STA $07                     ;$01C932    |/
CODE_01C934:                    ;```````````| Tile size OAM loop.
    TYA                         ;$01C934    |
    LSR                         ;$01C935    |
    LSR                         ;$01C936    |
    TAX                         ;$01C937    |
    LDA.b #$02                  ;$01C938    |\ Set as 16x16.
    STA.w $0460,X               ;$01C93A    |/
    LDX.b #$00                  ;$01C93D    |\ 
    LDA.w $0300,Y               ;$01C93F    ||
    SEC                         ;$01C942    ||
    SBC $07                     ;$01C943    ||
    BPL CODE_01C948             ;$01C945    ||
    DEX                         ;$01C947    ||
CODE_01C948:                    ;           ||
    CLC                         ;$01C948    ||
    ADC $02                     ;$01C949    ||
    STA $04                     ;$01C94B    || If the tile is offscreen on the right, set high X bit of OAM.
    TXA                         ;$01C94D    ||
    ADC $03                     ;$01C94E    ||
    STA $05                     ;$01C950    ||
    JSR CODE_01B844             ;$01C952    ||
    BCC CODE_01C960             ;$01C955    ||
    TYA                         ;$01C957    ||
    LSR                         ;$01C958    ||
    LSR                         ;$01C959    ||
    TAX                         ;$01C95A    ||
    LDA.b #$03                  ;$01C95B    ||
    STA.w $0460,X               ;$01C95D    |/
CODE_01C960:                    ;           |
    LDX.b #$00                  ;$01C960    |\ 
    LDA.w $0301,Y               ;$01C962    ||
    SEC                         ;$01C965    ||
    SBC $06                     ;$01C966    ||
    BPL CODE_01C96B             ;$01C968    ||
    DEX                         ;$01C96A    ||
CODE_01C96B:                    ;           ||
    CLC                         ;$01C96B    ||
    ADC $00                     ;$01C96C    || If the tile is offscreen vertically, keep it offscreen.
    STA $09                     ;$01C96E    ||
    TXA                         ;$01C970    ||
    ADC $01                     ;$01C971    ||
    STA $0A                     ;$01C973    ||
    JSR CODE_01C9BF             ;$01C975    ||
    BCC CODE_01C97F             ;$01C978    ||
    LDA.b #$F0                  ;$01C97A    ||
    STA.w $0301,Y               ;$01C97C    |/
CODE_01C97F:                    ;           |
    LDA $08                     ;$01C97F    |\  
    CMP.b #$09                  ;$01C981    ||
    BNE CODE_01C999             ;$01C983    ||
    LDA $04                     ;$01C985    ||
    STA.w $14B8                 ;$01C987    || Preserve onscreen X/Y position of th outermost chainlink tile.
    LDA $05                     ;$01C98A    ||
    STA.w $14B9                 ;$01C98C    ||
    LDA $09                     ;$01C98F    ||
    STA.w $14BA                 ;$01C991    ||
    LDA $0A                     ;$01C994    ||
    STA.w $14BB                 ;$01C996    |/
CODE_01C999:                    ;           |
    INY                         ;$01C999    | 
    INY                         ;$01C99A    |
    INY                         ;$01C99B    |
    INY                         ;$01C99C    |
    DEC $08                     ;$01C99D    |
    BPL CODE_01C934             ;$01C99F    |
    LDX.w $15E9                 ;$01C9A1    |\ 
    LDY.w $15EA,X               ;$01C9A4    || Send the dummy center tile offscreen.
    LDA.b #$F0                  ;$01C9A7    ||
    STA.w $0305,Y               ;$01C9A9    |/
    LDA $9D                     ;$01C9AC    |\ Return if the game is frozen.
    BNE Return01C9B6            ;$01C9AE    |/
    JSR CODE_01CCF0             ;$01C9B0    | Update the platform's angle.
    JMP CODE_01C9EC             ;$01C9B3    | Process interaction with the platform.

Return01C9B6:
    RTS                         ;$01C9B6    |

DATA_01C9B7:                    ;$01C9B7    | X offsets for each tile of the platform part of the revolving brown platform.
    db $E0,$F0,$00,$10

BrwnChainPlatTiles:
    db $60,$61,$61,$62



CODE_01C9BF:                    ;-----------| Returns carry set if the tile is below the screen, clear if not.
    REP #$20                    ;$01C9BF    | Store Y position in $09 first.
    LDA $09                     ;$01C9C1    |
    PHA                         ;$01C9C3    |
    CLC                         ;$01C9C4    |
    ADC.w #$0010                ;$01C9C5    |
    STA $09                     ;$01C9C8    |
    SEC                         ;$01C9CA    |
    SBC $1C                     ;$01C9CB    |
    CMP.w #$0100                ;$01C9CD    |
    PLA                         ;$01C9D0    |
    STA $09                     ;$01C9D1    |
    SEP #$20                    ;$01C9D3    |
Return01C9D5:                   ;           |
    RTS                         ;$01C9D5    |



DATA_01C9D6:                    ;$01C9D6    | Accel/decel speeds for the revolving brown platform.
    db $01,$FF

DATA_01C9D8:                    ;$01C9D8    | Max speeds for the revolving brown platform.
    db $40,$C0



CODE_01C9DA:                    ;-----------| Not touching the platform at all.
    LDA.w $160E,X               ;$01C9DA    |\ 
    BEQ Return01C9EB            ;$01C9DD    || If Mario just stopped touching the platform, clear the flag.
    STZ.w $160E,X               ;$01C9DF    |/ Then for no real reason reason redraw his graphics.
CODE_01C9E2:                    ;           |
    PHX                         ;$01C9E2    |\ 
    JSL CODE_00E2BD             ;$01C9E3    || Redraw Mario. This is done to have Mario line up with the platform's movement.
    PLX                         ;$01C9E7    ||
    STX.w $15E9                 ;$01C9E8    |/
Return01C9EB:                   ;           |
    RTS                         ;$01C9EB    |



CODE_01C9EC:                    ;-----------| Process interaction with the platform.
    LDA.w $14B9                 ;$01C9EC    |\ 
    XBA                         ;$01C9EF    ||
    LDA.w $14B8                 ;$01C9F0    ||
    REP #$20                    ;$01C9F3    ||
    SEC                         ;$01C9F5    ||
    SBC $1A                     ;$01C9F6    ||
    CLC                         ;$01C9F8    || Set horizontally offscreen flag...?
    ADC.w #$0010                ;$01C9F9    ||  Plus sprite frozen flag.
    CMP.w #$0120                ;$01C9FC    || Return if set.
    SEP #$20                    ;$01C9FF    ||
    ROL                         ;$01CA01    ||
    AND.b #$01                  ;$01CA02    ||
    ORA $9D                     ;$01CA04    ||
    STA.w $15C4,X               ;$01CA06    ||
    BNE Return01C9D5            ;$01CA09    |/
    JSR CODE_01CA9C             ;$01CA0B    |\ 
    STZ.w $1602,X               ;$01CA0E    || Return if not in contact.
    BCC CODE_01C9DA             ;$01CA11    |/
    LDA.b #$01                  ;$01CA13    |\ Set flag for touching the platform.
    STA.w $160E,X               ;$01CA15    |/
    LDA.w $14BA                 ;$01CA18    |\ 
    SEC                         ;$01CA1B    ||
    SBC $1C                     ;$01CA1C    ||
    STA $03                     ;$01CA1E    ||
    SEC                         ;$01CA20    ||
    SBC.b #$08                  ;$01CA21    || Return if not touching the top of the platform.
    STA $0E                     ;$01CA23    ||
    LDA $80                     ;$01CA25    ||
    CLC                         ;$01CA27    ||
    ADC.b #$18                  ;$01CA28    ||
    CMP $0E                     ;$01CA2A    ||
    BCS Return01CA9B            ;$01CA2C    |/
    LDA $7D                     ;$01CA2E    |\ Restore Mario and return if moving upwards.
    BMI CODE_01C9E2             ;$01CA30    |/
    STZ $7D                     ;$01CA32    |\ 
    LDA.b #$03                  ;$01CA34    || Make Mario stand on top of the platform.
    STA.w $1471                 ;$01CA36    ||
    STA.w $1602,X               ;$01CA39    |/
    LDA.b #$28                  ;$01CA3C    |\ 
    LDY.w $187A                 ;$01CA3E    ||
    BEQ CODE_01CA45             ;$01CA41    ||
    LDA.b #$38                  ;$01CA43    ||
CODE_01CA45:                    ;           ||
    STA $0F                     ;$01CA45    ||
    LDA.w $14BA                 ;$01CA47    || Offset Mario's Y position from the platform.
    SEC                         ;$01CA4A    ||
    SBC $0F                     ;$01CA4B    ||
    STA $96                     ;$01CA4D    ||
    LDA.w $14BB                 ;$01CA4F    ||
    SBC.b #$00                  ;$01CA52    ||
    STA $97                     ;$01CA54    |/
    LDA $77                     ;$01CA56    |\ 
    AND.b #$03                  ;$01CA58    ||
    BNE CODE_01CA6E             ;$01CA5A    ||
    LDY.b #$00                  ;$01CA5C    ||
    LDA.w $1491                 ;$01CA5E    ||
    BPL CODE_01CA64             ;$01CA61    ||
    DEY                         ;$01CA63    || Move Mario horizontally with the platform.
CODE_01CA64:                    ;           ||
    CLC                         ;$01CA64    ||
    ADC $94                     ;$01CA65    ||
    STA $94                     ;$01CA67    ||
    TYA                         ;$01CA69    ||
    ADC $95                     ;$01CA6A    ||
    STA $95                     ;$01CA6C    |/
CODE_01CA6E:                    ;           |
    JSR CODE_01C9E2             ;$01CA6E    | Redraw Mario.
    LDA $16                     ;$01CA71    |\ 
    BMI CODE_01CA79             ;$01CA73    || Hide Mario from the future draws,
    LDA.b #$FF                  ;$01CA75    ||  unless jumping off. (yes, this causes him to be drawn twice)
    STA $78                     ;$01CA77    |/
CODE_01CA79:                    ;           |
    LDA $13                     ;$01CA79    |\ 
    LSR                         ;$01CA7B    ||
    BCC Return01CA9B            ;$01CA7C    ||
    LDA.w $151C,X               ;$01CA7E    ||
    CLC                         ;$01CA81    ||
    ADC.b #$80                  ;$01CA82    ||
    LDA.w $1528,X               ;$01CA84    ||
    ADC.b #$00                  ;$01CA87    || Every other frame, if not at the max speed, accelerate/decelerate
    AND.b #$01                  ;$01CA89    ||  the platform according to which side of the center it is on.
    TAY                         ;$01CA8B    ||  (Y = 0 for right side, Y = 1 for left)
    LDA.w $1504,X               ;$01CA8C    ||
    CMP.w DATA_01C9D8,Y         ;$01CA8F    ||
    BEQ Return01CA9B            ;$01CA92    ||
    CLC                         ;$01CA94    ||
    ADC.w DATA_01C9D6,Y         ;$01CA95    ||
    STA.w $1504,X               ;$01CA98    |/
Return01CA9B:                   ;           |
    RTS                         ;$01CA9B    |


CODE_01CA9C:                    ;```````````| Subroutine to check for contact with the platform. Carry set if so.
    LDA.w $14B8                 ;$01CA9C    |\ 
    SEC                         ;$01CA9F    ||
    SBC.b #$18                  ;$01CAA0    ||| X displacement (low)
    STA $04                     ;$01CAA2    ||
    LDA.w $14B9                 ;$01CAA4    ||
    SBC.b #$00                  ;$01CAA7    ||| X displacement (high)
    STA $0A                     ;$01CAA9    ||
    LDA.b #$40                  ;$01CAAB    ||| Width
    STA $06                     ;$01CAAD    ||
    LDA.w $14BA                 ;$01CAAF    ||
    SEC                         ;$01CAB2    ||
    SBC.b #$0C                  ;$01CAB3    ||| Y displacement (low)
    STA $05                     ;$01CAB5    ||
    LDA.w $14BB                 ;$01CAB7    ||
    SBC.b #$00                  ;$01CABA    ||| Y displacement (high)
    STA $0B                     ;$01CABC    ||
    LDA.b #$13                  ;$01CABE    ||| Height
    STA $07                     ;$01CAC0    |/
    JSL GetMarioClipping        ;$01CAC2    |
    JSL CheckForContact         ;$01CAC6    |
    RTS                         ;$01CACA    |





    ; Usage:
    ; $151C - Angle (low)
    ; $1528 - Angle (high)
    ;
    ; Output:
    ; $36   - 16-bit angle
    ; $14BC - 16-bit horizontal radius (#$0050)
    ; $14BF - 16-bit vertical radius   (#$0000)
    ; $14B4 - 16-bit X position of the platform at 0 deg
    ; $14B6 - 16-bit Y position of the platform at 0 deg
    ; $14B0 - 16-bit X position of the center of the platform
    ; $14B2 - 16-bit Y position of the center of the platform
    
CODE_01CACB:                    ;-----------| Sprite rotation preparation routine.
    LDA.b #$50                  ;$01CACB    |\\ Radius.
    STA.w $14BC                 ;$01CACD    || Set up $14BC as the 16-bit radius.
    STZ.w $14BF                 ;$01CAD0    || Also sets up $14BF as a vertical radius, though it's always zero.
    STZ.w $14BD                 ;$01CAD3    ||
    STZ.w $14C0                 ;$01CAD6    |/
    LDA $E4,X                   ;$01CAD9    |\ 
    STA.w $14B4                 ;$01CADB    ||
    LDA.w $14E0,X               ;$01CADE    ||
    STA.w $14B5                 ;$01CAE1    ||
    LDA.w $14B4                 ;$01CAE4    ||
    SEC                         ;$01CAE7    || Store the horizontal center of the platform.
    SBC.w $14BC                 ;$01CAE8    ||
    STA.w $14B0                 ;$01CAEB    ||
    LDA.w $14B5                 ;$01CAEE    ||
    SBC.w $14BD                 ;$01CAF1    ||
    STA.w $14B1                 ;$01CAF4    |/
    LDA $D8,X                   ;$01CAF7    |\ 
    STA.w $14B6                 ;$01CAF9    ||
    LDA.w $14D4,X               ;$01CAFC    ||
    STA.w $14B7                 ;$01CAFF    ||
    LDA.w $14B6                 ;$01CB02    ||
    SEC                         ;$01CB05    || Store the vertical center of the platform.
    SBC.w $14BF                 ;$01CB06    ||
    STA.w $14B2                 ;$01CB09    ||
    LDA.w $14B7                 ;$01CB0C    ||
    SBC.w $14C0                 ;$01CB0F    ||
    STA.w $14B3                 ;$01CB12    |/
    LDA.w $151C,X               ;$01CB15    |\ 
    STA $36                     ;$01CB18    || Store the angle.
    LDA.w $1528,X               ;$01CB1A    ||
    STA $37                     ;$01CB1D    |/
    RTS                         ;$01CB1F    |





    ; Usage:
    ;  $36 - 16-bit angle of rotation
    ;  Run $01CACB (sprites) or $01CCC7 (Mode 7) first to set up additional information.
    ;
    ; Output:
    ; $14C2 - 16-bit sin value
    ; $14C5 - 16-bit cos value
    ; $1866 - Signage of the sin value (1 = negative).
    ; $1867 - Signage of the cos value (1 = negative).
    
CODE_01CB20:                    ;-----------| Routine to prepare the game's global rotation routine.
    LDA $37                     ;$01CB20    |\ 
    STA.w $1866                 ;$01CB22    ||
    PHX                         ;$01CB25    ||
    REP #$30                    ;$01CB26    ||
    LDA $36                     ;$01CB28    || Get the sin value for the angle.
    ASL                         ;$01CB2A    ||
    AND.w #$01FF                ;$01CB2B    ||
    TAX                         ;$01CB2E    ||
    LDA.l CircleCoords,X        ;$01CB2F    ||
    STA.w $14C2                 ;$01CB33    |/
    LDA $36                     ;$01CB36    |\ 
    CLC                         ;$01CB38    ||
    ADC.w #$0080                ;$01CB39    ||
    STA $00                     ;$01CB3C    ||
    ASL                         ;$01CB3E    ||
    AND.w #$01FF                ;$01CB3F    || Get the cos value for the angle.
    TAX                         ;$01CB42    ||
    LDA.l CircleCoords,X        ;$01CB43    ||
    STA.w $14C5                 ;$01CB47    ||
    SEP #$30                    ;$01CB4A    ||
    LDA $01                     ;$01CB4C    ||
    STA.w $1867                 ;$01CB4E    |/
    PLX                         ;$01CB51    |
    RTS                         ;$01CB52    |



    ; Usage:
    ;  Run $01CB20 first.
    ;
    ; Output:
    ;  $14B8 - 16-bit X position along the perimeter of the circle.
    ;  $14BA - 16-bit Y position along the perimeter of the circle.
    
CODE_01CB53:                    ;-----------| Global rotation routine.
    REP #$20                    ;$01CB53    |
    LDA.w $14C5                 ;$01CB55    |\ 
    STA $02                     ;$01CB58    || Calculate X position.
    LDA.w $14BC                 ;$01CB5A    ||
    STA $00                     ;$01CB5D    ||
    SEP #$20                    ;$01CB5F    ||
    JSR CODE_01CC28             ;$01CB61    ||
    LDA.w $1867                 ;$01CB64    ||
    LSR                         ;$01CB67    ||
    REP #$20                    ;$01CB68    ||
    LDA $04                     ;$01CB6A    ||
    BCC CODE_01CB72             ;$01CB6C    ||
    EOR.w #$FFFF                ;$01CB6E    ||
    INC A                       ;$01CB71    ||
CODE_01CB72:                    ;           ||
    STA $08                     ;$01CB72    ||
    LDA $06                     ;$01CB74    ||
    BCC CODE_01CB7C             ;$01CB76    ||
    EOR.w #$FFFF                ;$01CB78    ||
    INC A                       ;$01CB7B    ||
CODE_01CB7C:                    ;           ||
    STA $0A                     ;$01CB7C    ||
    LDA.w $14C2                 ;$01CB7E    || 
    STA $02                     ;$01CB81    ||
    LDA.w $14BF                 ;$01CB83    ||
    STA $00                     ;$01CB86    ||
    SEP #$20                    ;$01CB88    ||
    JSR CODE_01CC28             ;$01CB8A    ||
    LDA.w $1866                 ;$01CB8D    ||
    LSR                         ;$01CB90    ||
    REP #$20                    ;$01CB91    ||
    LDA $04                     ;$01CB93    ||
    BCC CODE_01CB9B             ;$01CB95    ||
    EOR.w #$FFFF                ;$01CB97    ||
    INC A                       ;$01CB9A    ||
CODE_01CB9B:                    ;           ||
    STA $04                     ;$01CB9B    ||
    LDA $06                     ;$01CB9D    ||
    BCC CODE_01CBA5             ;$01CB9F    ||
    EOR.w #$FFFF                ;$01CBA1    ||
    INC A                       ;$01CBA4    ||
CODE_01CBA5:                    ;           ||
    STA $06                     ;$01CBA5    ||
    LDA $04                     ;$01CBA7    ||
    CLC                         ;$01CBA9    ||
    ADC $08                     ;$01CBAA    ||
    STA $04                     ;$01CBAC    ||
    LDA $06                     ;$01CBAE    ||
    ADC $0A                     ;$01CBB0    ||
    STA $06                     ;$01CBB2    ||
    LDA $05                     ;$01CBB4    ||
    CLC                         ;$01CBB6    ||
    ADC.w $14B0                 ;$01CBB7    ||
    STA.w $14B8                 ;$01CBBA    |/
    LDA.w $14C5                 ;$01CBBD    |\ 
    STA $02                     ;$01CBC0    || Calculate Y position.
    LDA.w $14BF                 ;$01CBC2    ||
    STA $00                     ;$01CBC5    ||
    SEP #$20                    ;$01CBC7    ||
    JSR CODE_01CC28             ;$01CBC9    ||
    LDA.w $1867                 ;$01CBCC    ||
    LSR                         ;$01CBCF    ||
    REP #$20                    ;$01CBD0    ||
    LDA $04                     ;$01CBD2    ||
    BCC CODE_01CBDA             ;$01CBD4    ||
    EOR.w #$FFFF                ;$01CBD6    ||
    INC A                       ;$01CBD9    ||
CODE_01CBDA:                    ;           ||
    STA $08                     ;$01CBDA    ||
    LDA $06                     ;$01CBDC    ||
    BCC CODE_01CBE4             ;$01CBDE    ||
    EOR.w #$FFFF                ;$01CBE0    ||
    INC A                       ;$01CBE3    ||
CODE_01CBE4:                    ;           ||
    STA $0A                     ;$01CBE4    ||
    LDA.w $14C2                 ;$01CBE6    ||
    STA $02                     ;$01CBE9    ||
    LDA.w $14BC                 ;$01CBEB    ||
    STA $00                     ;$01CBEE    ||
    SEP #$20                    ;$01CBF0    ||
    JSR CODE_01CC28             ;$01CBF2    ||
    LDA.w $1866                 ;$01CBF5    ||
    LSR                         ;$01CBF8    ||
    REP #$20                    ;$01CBF9    ||
    LDA $04                     ;$01CBFB    ||
    BCC CODE_01CC03             ;$01CBFD    ||
    EOR.w #$FFFF                ;$01CBFF    ||
    INC A                       ;$01CC02    ||
CODE_01CC03:                    ;           ||
    STA $04                     ;$01CC03    ||
    LDA $06                     ;$01CC05    ||
    BCC CODE_01CC0D             ;$01CC07    ||
    EOR.w #$FFFF                ;$01CC09    ||
    INC A                       ;$01CC0C    ||
CODE_01CC0D:                    ;           ||
    STA $06                     ;$01CC0D    ||
    LDA $04                     ;$01CC0F    ||
    SEC                         ;$01CC11    ||
    SBC $08                     ;$01CC12    ||
    STA $04                     ;$01CC14    ||
    LDA $06                     ;$01CC16    ||
    SBC $0A                     ;$01CC18    ||
    STA $06                     ;$01CC1A    ||
    LDA.w $14B2                 ;$01CC1C    ||
    SEC                         ;$01CC1F    ||
    SBC $05                     ;$01CC20    ||
    STA.w $14BA                 ;$01CC22    |/
    SEP #$20                    ;$01CC25    |
    RTS                         ;$01CC27    |


CODE_01CC28:                    ;```````````| Subroutine to do 16-bit cos/sin multiplication. Stores a radius in $00 and cos/sin value in $02.
    LDA $00                     ;$01CC28    |
    STA.w $4202                 ;$01CC2A    |
    LDA $02                     ;$01CC2D    |
    STA.w $4203                 ;$01CC2F    |
    JSR DoNothing               ;$01CC32    |
    LDA.w $4216                 ;$01CC35    |
    STA $04                     ;$01CC38    |
    LDA.w $4217                 ;$01CC3A    |
    STA $05                     ;$01CC3D    |
    LDA $00                     ;$01CC3F    |
    STA.w $4202                 ;$01CC41    |
    LDA $03                     ;$01CC44    |
    STA.w $4203                 ;$01CC46    |
    JSR DoNothing               ;$01CC49    |
    LDA.w $4216                 ;$01CC4C    |
    CLC                         ;$01CC4F    |
    ADC $05                     ;$01CC50    |
    STA $05                     ;$01CC52    |
    LDA.w $4217                 ;$01CC54    |
    ADC.b #$00                  ;$01CC57    |
    STA $06                     ;$01CC59    |
    LDA $01                     ;$01CC5B    |
    STA.w $4202                 ;$01CC5D    |
    LDA $02                     ;$01CC60    |
    STA.w $4203                 ;$01CC62    |
    JSR DoNothing               ;$01CC65    |
    LDA.w $4216                 ;$01CC68    |
    CLC                         ;$01CC6B    |
    ADC $05                     ;$01CC6C    |
    STA $05                     ;$01CC6E    |
    LDA.w $4217                 ;$01CC70    |
    ADC $06                     ;$01CC73    |
    STA $06                     ;$01CC75    |
    LDA $01                     ;$01CC77    |
    STA.w $4202                 ;$01CC79    |
    LDA $03                     ;$01CC7C    |
    STA.w $4203                 ;$01CC7E    |
    JSR DoNothing               ;$01CC81    |
    LDA.w $4216                 ;$01CC84    |
    CLC                         ;$01CC87    |
    ADC $06                     ;$01CC88    |
    STA $06                     ;$01CC8A    |
    LDA.w $4217                 ;$01CC8C    |
    ADC.b #$00                  ;$01CC8F    |
    STA $07                     ;$01CC91    |
    RTS                         ;$01CC93    |

DoNothing:                      ;-----------| Subroutine to wait 16 cycles for registers to finish multiplication.
    NOP                         ;$01CC94    |
    NOP                         ;$01CC95    |
    NOP                         ;$01CC96    |
    NOP                         ;$01CC97    |
    NOP                         ;$01CC98    |
    NOP                         ;$01CC99    |
    NOP                         ;$01CC9A    |
    NOP                         ;$01CC9B    |
    RTS                         ;$01CC9C    |



    ; Set up before running below routine:
    ;  $14B4 - 16-bit X position to check.
    ;  $14B6 - 16-bit Y position to check.
    ; Returns carry set if contact is made, as well as:
    ;  $14B8 - 16-bit X position, rotated with the platform.
    ;  $14BA - 16-bit Y position, rotated with the platform.

CODE_01CC9D:                    ;-----------| Routine to handle interaction between a sprite and Iggy/Larry's platform.
    LDA.w $14B5                 ;$01CC9D    |\ 
    ORA.w $14B7                 ;$01CCA0    || Return no interaction if high X/Y bytes are non-zero (pretty much never).
    BNE CODE_01CCC5             ;$01CCA3    |/
    JSR CODE_01CCC7             ;$01CCA5    |\ 
    JSR CODE_01CB20             ;$01CCA8    || Get rotation information.
    JSR CODE_01CB53             ;$01CCAB    |/
    LDA.w $14BA                 ;$01CCAE    |\ 
    AND.b #$F0                  ;$01CCB1    ||
    STA $00                     ;$01CCB3    ||
    LDA.w $14B8                 ;$01CCB5    ||
    LSR                         ;$01CCB8    ||
    LSR                         ;$01CCB9    || Check if the sprite is in contact with a solid tile.
    LSR                         ;$01CCBA    ||  Returns carry set if so.
    LSR                         ;$01CCBB    ||
    ORA $00                     ;$01CCBC    ||
    TAY                         ;$01CCBE    ||
    LDA.w $0AF6,Y               ;$01CCBF    ||
    CMP.b #$15                  ;$01CCC2    |/
    RTL                         ;$01CCC4    |

CODE_01CCC5:
    CLC                         ;$01CCC5    |
    RTL                         ;$01CCC6    |



    ; Usage:
    ; $14B4 - 16-bit X position of point to check.
    ; $14B6 - 16-bit Y position of point to check.
    ;
    ; Output:
    ; $14B0 - 16-bit horizontal center of rotation.
    ; $14B2 - 16-bit vertical center of rotation.
    ; $14BC - 16-bit horizontal distance from the center for the point.
    ; $14BF - 16-bit vertical distance from the center for the point.
    
CODE_01CCC7:                    ;-----------| Iggy/Larry Mode 7 interaction prep routine. Stores necessary information for various things.
    REP #$20                    ;$01CCC7    |
    LDA $2A                     ;$01CCC9    |\ 
    STA.w $14B0                 ;$01CCCB    || Store center of rotation.
    LDA $2C                     ;$01CCCE    ||
    STA.w $14B2                 ;$01CCD0    |/
    LDA.w $14B4                 ;$01CCD3    |\ 
    SEC                         ;$01CCD6    || Store horizontal radius of the position from center.
    SBC.w $14B0                 ;$01CCD7    ||
    STA.w $14BC                 ;$01CCDA    |/
    LDA.w $14B6                 ;$01CCDD    |\ 
    SEC                         ;$01CCE0    || Store vertical radius of interaction point from center.
    SBC.w $14B2                 ;$01CCE1    ||
    STA.w $14BF                 ;$01CCE4    |/
    SEP #$20                    ;$01CCE7    |
    RTS                         ;$01CCE9    |
    
    RTS                         ;$01CCEA    |
    RTS                         ;$01CCEB    |



CODE_01CCEC:                    ;-----------| Subroutine to invert the accumulator.
    EOR.b #$FF                  ;$01CCEC    |
    INC A                       ;$01CCEE    |
    RTS                         ;$01CCEF    |



CODE_01CCF0:                    ;-----------| Subroutine to update the revolving platform's angle.
    LDA.w $1504,X               ;$01CCF0    |\ 
    ASL                         ;$01CCF3    ||
    ASL                         ;$01CCF4    ||
    ASL                         ;$01CCF5    ||
    ASL                         ;$01CCF6    ||
    CLC                         ;$01CCF7    ||
    ADC.w $1510,X               ;$01CCF8    ||
    STA.w $1510,X               ;$01CCFB    ||
    PHP                         ;$01CCFE    ||
    LDY.b #$00                  ;$01CCFF    ||
    LDA.w $1504,X               ;$01CD01    ||
    LSR                         ;$01CD04    ||
    LSR                         ;$01CD05    || Update the platform's angle.
    LSR                         ;$01CD06    ||
    LSR                         ;$01CD07    ||
    CMP.b #$08                  ;$01CD08    ||
    BCC CODE_01CD0F             ;$01CD0A    ||
    ORA.b #$F0                  ;$01CD0C    ||
    DEY                         ;$01CD0E    ||
CODE_01CD0F:                    ;           ||
    PLP                         ;$01CD0F    ||
    ADC.w $151C,X               ;$01CD10    ||
    STA.w $151C,X               ;$01CD13    ||
    TYA                         ;$01CD16    ||
    ADC.w $1528,X               ;$01CD17    ||
    STA.w $1528,X               ;$01CD1A    |/
    RTS                         ;$01CD1D    |



Empty01CD1E:
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$FF,$FF





PipeKoopaKids:                  ;-----------| Wendy/Lemmy redirect
    JSL CODE_03CC09             ;$01CD2A    |
    RTS                         ;$01CD2E    |




    
    
InitKoopaKid:                   ;-----------| Koopa Kid INIT
    LDA $D8,X                   ;$01CD2F    |\ 
    LSR                         ;$01CD31    ||
    LSR                         ;$01CD32    || Store Y position as boss type.
    LSR                         ;$01CD33    ||
    LSR                         ;$01CD34    ||
    STA $C2,X                   ;$01CD35    |/
    CMP.b #$05                  ;$01CD37    |\ Wendy/Lemmy only.
    BCC CODE_01CD4E             ;$01CD39    ||
    LDA.b #$78                  ;$01CD3B    ||\ Initial X position.
    STA $E4,X                   ;$01CD3D    ||/
    LDA.b #$40                  ;$01CD3F    ||\ 
    STA $D8,X                   ;$01CD41    ||| Initial Y position.
    LDA.b #$01                  ;$01CD43    |||
    STA.w $14D4,X               ;$01CD45    ||/
    LDA.b #$80                  ;$01CD48    ||\ How long before the boss rises out of the pipe for the first time.
    STA.w $1540,X               ;$01CD4A    ||/
    RTS                         ;$01CD4D    |/

CODE_01CD4E:                    ;```````````| Not Wendy/Lemmy.
    LDY.b #$90                  ;$01CD4E    | Y low byte of starting position for Morton/Ludwig/Roy/Iggy/Larry.
    STY $D8,X                   ;$01CD50    |
    CMP.b #$03                  ;$01CD52    |\ Iggy/Larry only.
    BCC CODE_01CD5E             ;$01CD54    ||
    JSL CODE_00FCF5             ;$01CD56    || Set initial position and face Mario.
    JSR FaceMario               ;$01CD5A    ||
    RTS                         ;$01CD5D    |/

CODE_01CD5E:                    ;```````````| Morton/Roy/Ludwig.
    LDA.b #$01                  ;$01CD5E    |\ Set to face left initially.
    STA.w $157C,X               ;$01CD60    |/
    LDA.b #$20                  ;$01CD63    |\ 
    STA $38                     ;$01CD65    || Set initial scaling.
    STA $39                     ;$01CD67    |/
    JSL CODE_03DD7D             ;$01CD69    | Load palette/GFX files.
    LDY $C2,X                   ;$01CD6D    |\ 
    LDA.w DATA_01CD92,Y         ;$01CD6F    || Set boss room to load.
    STA.w $187B,X               ;$01CD72    |/
    CMP.b #$01                  ;$01CD75    |\ Branch if loading Morton/Roy.
    BEQ CODE_01CD87             ;$01CD77    |/
    CMP.b #$00                  ;$01CD79    |\ 
    BNE CODE_01CD81             ;$01CD7B    ||
    LDA.b #$70                  ;$01CD7D    ||| X low byte of starting position for Ludwig.
    STA $E4,X                   ;$01CD7F    ||
CODE_01CD81:                    ;           ||
    LDA.b #$01                  ;$01CD81    ||| X high byte of starting position for Ludwig.
    STA.w $14E0,X               ;$01CD83    |/
    RTS                         ;$01CD86    |

CODE_01CD87:                    ;```````````| Morton/Roy.
    LDA.b #$26                  ;$01CD87    |\\ Initial X position of the left wall.
    STA.w $1534,X               ;$01CD89    |/
    LDA.b #$D8                  ;$01CD8C    |\\ Initial X position of the right wall.
    STA.w $160E,X               ;$01CD8E    |/
    RTS                         ;$01CD91    |



DATA_01CD92:                    ;$01CD92    | Mode 7 room to load. Only actually use for Ludwig/Morton/Roy?
    db $01,$01,$00,$02,$02,$03,$03          ; 0 = Lud, 1 = Mor/Roy, 2 = Igg/Lar, 3 = Lem/Wen

DATA_01CD99:                    ;$01CD99    | Mode 7 animation base indices for Morton, Roy, and Ludwig respectively.
    db $00,$09,$12

DATA_01CD9C:                    ;$01CD9C    | Additional Mode 7 animation values for the frames of Ludwig/Morton/Roy (indexed by $1602).
    db $00,$01,$02,$03,$04,$05,$06,$07      ; Though they could have just directly added the index...
    db $08

DATA_01CDA5:                    ;$01CDA5    | X flip values for Morton/Roy/Ludwig's direction.
    db $00,$80

    ; Morton/Roy/Ludwig misc RAM:
    ; $C2   - Which boss the sprite is running.
    ;          0 = Morton, 1 = Roy, 2 = Ludwig
    ; $151C - Main routine pointer.
    ;          0 = stationary (spawn / Ludwig waiting for Mario), 1 = stationary (walls dropping / starting Ludwig)
    ;          2 = normal movement, 3 = hurt, 4 = dying, 5 = dead (wait for level end)
    ; $1528 - Morton/Roy: Attack routine pointer. 0 = walking, 1 = dropping.
    ;           Ludwig: Attack routine pointer. 0 = fire, 1 = shell, 2 = jump.
    ; $1534 - X position of the left wall in Morton/Roy's. Starts at #$26.
    ; $1540 - Various phase timers. Set to #$80 for the hurt animation, to #$14 when dying (for the part where the boss grows in size),
    ;           and to #$30 after the boss has died (to wait for level end).
    ;           Morton/Roy: Set to #$26 when hitting the ground after dropping, to wait before starting to move.
    ;           Ludwig: Set to #$FF when starting fire/shell phases, and #$30 for waiting before jumping.
    ; $1558 - Timer set to #$60 when jumping, for starting Ludwig's rotation. This value only actually has to be greater than $1540.
    ; $157C - Morton/Roy: Rotational direction the boss is moving. 0 = counterclockwise, 1 = clockwise.
    ;          Ludwig: Direction of movement. 0 = right, 1 = left
    ; $1594 - Relative direction Morton/Roy is moving. 0 = left, 1 = up, 2 = right, 3 = down.
    ; $15AC - Turn timer. Set to #$0A whenever turning; Morton/Roy set after dropping from the ceiling.
    ; $1602 - Animation frame.
    ;          0/1/2 = walking, 3/4 = fireballs, 5 = turning, 6 = falling/jumping, 6/7 = hurt, 8 = unused hurt frame, 1B-1D = spinning shell (ludwig)
    ; $160E - Roy/Morton: X position of the right wall. Starts at #$D8.
    ;           Ludwig: Jump X speed; #$14 when jumping right, #$EC when jumping left. 
    ; $1626 - Number of hits the boss has taken. Dies if jumped on at 3+, or fireballed at 12+.
    ; $163E - Timer for shooting Ludwig's fireball. Set to #$30 when the fireball is spawned.
    ; $164A - Timer used to move the walls inwards in Roy's. Only decrements when the walls actually move.
    ; $187B - Mode 7 room to load. 0 = Ludwig, 1 = Morton/Roy
    ; $1FE2 - Disable contact with Mario. Set to 8 when touched.
    
CODE_01CDA7:                    ;-----------| Container for GetDrawInfo (for the offscreen forced return).
    JSR GetDrawInfoBnk1         ;$01CDA7    |
    RTS                         ;$01CDAA    |

WallKoopaKids:                  ;-----------| Ludwig/Morton/Roy MAIN
    STZ.w $13FB                 ;$01CDAB    | Clear player frozen timer by default.
    LDA.w $1602,X               ;$01CDAE    |\\ 
    CMP.b #$1B                  ;$01CDB1    ||| If spinning in a shell, don't X flip.
    BCS CODE_01CDD5             ;$01CDB3    ||/
    LDA.w $15AC,X               ;$01CDB5    ||\ 
    CMP.b #$08                  ;$01CDB8    |||
    LDY.w $157C,X               ;$01CDBA    |||
    LDA.w DATA_01CDA5,Y         ;$01CDBD    ||| Get X flip.
    BCS CODE_01CDC4             ;$01CDC0    |||
    EOR.b #$80                  ;$01CDC2    |||
CODE_01CDC4:                    ;           |||
    STA $00                     ;$01CDC4    ||/
    LDY $C2,X                   ;$01CDC6    ||\ 
    LDA.w DATA_01CD99,Y         ;$01CDC8    |||
    LDY.w $1602,X               ;$01CDCB    |||
    CLC                         ;$01CDCE    ||| Get Mode 7 animation index and add X flip to it.
    ADC.w DATA_01CD9C,Y         ;$01CDCF    |||  End result is stored to $1BA2.
    CLC                         ;$01CDD2    |||
    ADC $00                     ;$01CDD3    |||
CODE_01CDD5:                    ;           |||
    STA.w $1BA2                 ;$01CDD5    |//
    JSL CODE_03DEDF             ;$01CDD8    | Handle the Mode 7 tilemap.
    JSR CODE_01CDA7             ;$01CDDC    | Run GetDrawInfo.
    LDA $9D                     ;$01CDDF    |\ Return if game frozen.
    BNE Return01CE3D            ;$01CDE1    |/
    JSR CODE_01D2A8             ;$01CDE3    | Handle player interaction.
    JSR CODE_01D3B1             ;$01CDE6    | Handle fireball interaction.
    LDA.w $187B,X               ;$01CDE9    |\ 
    CMP.b #$01                  ;$01CDEC    ||
    BEQ CODE_01CE0B             ;$01CDEE    ||
    LDA.w $163E,X               ;$01CDF0    ||
    BNE CODE_01CE0B             ;$01CDF3    ||
    LDA.w $157C,X               ;$01CDF5    ||
    PHA                         ;$01CDF8    || If running Ludwig and not currently shooting a fireball,
    JSR SubHorzPosBnk1          ;$01CDF9    ||  turn towards Mario.
    TYA                         ;$01CDFC    ||
    STA.w $157C,X               ;$01CDFD    ||
    PLA                         ;$01CE00    ||
    CMP.w $157C,X               ;$01CE01    ||
    BEQ CODE_01CE0B             ;$01CE04    ||
    LDA.b #$10                  ;$01CE06    ||
    STA.w $15AC,X               ;$01CE08    |/
CODE_01CE0B:                    ;           |
    LDA.w $151C,X               ;$01CE0B    |\ Execute boss phases.
    JSL ExecutePtr              ;$01CE0E    |/

MortonPtrs1:                    ;$01CE12    | Phases for Morton/Roy/Ludwig's movements.
    dw CODE_01CE1E              ; 0 - Stationary (spawn / ludwig waiting for Mario)
    dw CODE_01CE3E              ; 1 - Stationary (walls dropping / starting ludwig)
    dw CODE_01CE5F              ; 2 - Moving
    dw CODE_01CF7D              ; 3 - Hurt
    dw CODE_01CFE0              ; 4 - Dying
    dw CODE_01D043              ; 5 - Dead (end level)



CODE_01CE1E:                    ;-----------| Stationary (spawn / Ludwig waiting for Mario).
    LDA.w $187B,X               ;$01CE1E    |\ 
    CMP.b #$01                  ;$01CE21    || Branch if in Ludwig's room.
    BNE CODE_01CE34             ;$01CE23    |/
    STZ.w $1411                 ;$01CE25    | Disable horizontal scroll.
    INC.w $18A8                 ;$01CE28    |\ Make pillars fall.
    STZ.w $18AA                 ;$01CE2B    |/
    INC $9D                     ;$01CE2E    | Freeze sprites.
    INC.w $151C,X               ;$01CE30    | Move to next phase (walls falling).
    RTS                         ;$01CE33    |

CODE_01CE34:                    ;```````````| Ludwig waiting.
    LDA $1A                     ;$01CE34    |\ 
    CMP.b #$7E                  ;$01CE36    || Wait until the screen is all the way to the right,
    BCC Return01CE3D            ;$01CE38    ||  then move to next phase.
    INC.w $151C,X               ;$01CE3A    |/
Return01CE3D:                   ;           |
    RTS                         ;$01CE3D    |



CODE_01CE3E:                    ;-----------| Phase 1 - Stationary (walls dropping / starting Ludwig)
    STZ $7B                     ;$01CE3E    | Freeze Mario.
    JSR SubSprYPosNoGrvty       ;$01CE40    |\ 
    LDA $AA,X                   ;$01CE43    ||
    CMP.b #$40                  ;$01CE45    ||
    BPL CODE_01CE4C             ;$01CE47    || Handle ground interaction.
    CLC                         ;$01CE49    || Also apply gravity...?
    ADC.b #$03                  ;$01CE4A    ||
CODE_01CE4C:                    ;           ||
    STA $AA,X                   ;$01CE4C    ||
    JSR CODE_01D0C0             ;$01CE4E    ||
    BCC Return01CE3D            ;$01CE51    |/
    INC.w $151C,X               ;$01CE53    | Move to next phase.
    LDA $C2,X                   ;$01CE56    |\ 
    CMP.b #$02                  ;$01CE58    || Return if not running Ludwig.
    BCC Return01CE3D            ;$01CE5A    |/
    JMP CODE_01CEA8             ;$01CE5C    | Set timer for fireball attack.



CODE_01CE5F:                    ;-----------| Phase 2 - Boss is moving/attacking.
    LDA $C2,X                   ;$01CE5F    |
    JSL ExecutePtr              ;$01CE61    |

MortonPtrs2:                    ;$01CE65    | Morton/Roy/Ludwig routine pointers.
    dw CODE_01D116                          ; 0 - Morton
    dw CODE_01D116                          ; 1 - Roy
    dw CODE_01CE6B                          ; 2 - Ludwig





CODE_01CE6B:                    ;-----------| Ludwig's main routine.
    LDA.w $1528,X               ;$01CE6B    |
    JSL ExecutePtr              ;$01CE6E    |

Ptrs01CE72:                     ;$01CE72    | Ludwig's movement/attack pointers.
    dw CODE_01CE78              ; 0 - Shooting fireballs.
    dw CODE_01CEB6              ; 1 - Shell
    dw CODE_01CEFD              ; 2 - Jumping



CODE_01CE78:                    ;-----------| Ludwig attack phase 0 - Shooting fireballs.
    STZ $36                     ;$01CE78    |\ Clear rotation.
    STZ $37                     ;$01CE7A    |/
    LDA.w $1540,X               ;$01CE7C    |\ Branch if done phase.
    BEQ CODE_01CEA5             ;$01CE7F    |/
    LDY.b #$03                  ;$01CE81    |\ 
    AND.b #$30                  ;$01CE83    ||
    BNE CODE_01CE88             ;$01CE85    ||
    INY                         ;$01CE87    ||
CODE_01CE88:                    ;           || Set animation frame.
    TYA                         ;$01CE88    || 3/4 for firing animation, 5 for turning.
    LDY.w $15AC,X               ;$01CE89    ||
    BEQ CODE_01CE90             ;$01CE8C    ||
    LDA.b #$05                  ;$01CE8E    ||
CODE_01CE90:                    ;           ||
    STA.w $1602,X               ;$01CE90    |/
    LDA.w $1540,X               ;$01CE93    |\ 
    AND.b #$3F                  ;$01CE96    || Return if not time to spawn a fireball.
    CMP.b #$2E                  ;$01CE98    ||
    BNE Return01CEA4            ;$01CE9A    |/
    LDA.b #$30                  ;$01CE9C    |\ Set timer for shooting.
    STA.w $163E,X               ;$01CE9E    |/
    JSR CODE_01D059             ;$01CEA1    | Spawn the fireball.
Return01CEA4:                   ;           |
    RTS                         ;$01CEA4    |

CODE_01CEA5:                    ;```````````| Done with fireballs.
    INC.w $1528,X               ;$01CEA5    | Move to next phase.
CODE_01CEA8:                    ;           |
    LDA.b #$FF                  ;$01CEA8    |\ Set phase timer.
    STA.w $1540,X               ;$01CEAA    |/
    RTS                         ;$01CEAD    |



DATA_01CEAE:                    ;$01CEAE    | Maximum X speeds for Ludwig in his shell state.
    db $30,$D0

DATA_01CEB0:                    ;$01CEB0    | Animation frames for Ludwig while spinning in his shell.
    db $1B,$1C,$1D,$1B

DATA_01CEB4:                    ;$01CEB4    | Ludwig's horizontal jump X speeds.
    db $14,$EC

CODE_01CEB6:                    ;-----------| Ludwig attack phase 1 - Spinning in his shell.
    LDA.w $1540,X               ;$01CEB6    |\ Branch if not done with the phase.
    BNE CODE_01CEDC             ;$01CEB9    |/
    JSR SubHorzPosBnk1          ;$01CEBB    |\ 
    TYA                         ;$01CEBE    || Prevent Ludwig from jumping left when on screen 0, for some reason.
    CMP.w $14E0,X               ;$01CEBF    ||
    BNE CODE_01CEDC             ;$01CEC2    |/
    INC.w $1528,X               ;$01CEC4    |\ Increment attack phase (jumping).
    LDA.w DATA_01CEB4,Y         ;$01CEC7    ||\ Set Ludwig's jump X speed.
    STA.w $160E,X               ;$01CECA    ||/
    LDA.b #$30                  ;$01CECD    ||\ Set timer for waiting to jump.
    STA.w $1540,X               ;$01CECF    ||/
    LDA.b #$60                  ;$01CED2    ||\ Set timer for starting rotation during the jump.
    STA.w $1558,X               ;$01CED4    ||/
    LDA.b #$D8                  ;$01CED7    ||\\ Ludwig's jump Y speed.
    STA $AA,X                   ;$01CED9    |//
    RTS                         ;$01CEDB    |

CODE_01CEDC:                    ;```````````| Continue shell phase.
    JSR SubHorzPosBnk1          ;$01CEDC    |\ 
    LDA $B6,X                   ;$01CEDF    ||
    CMP.w DATA_01CEAE,Y         ;$01CEE1    ||
    BEQ CODE_01CEEC             ;$01CEE4    ||
    CLC                         ;$01CEE6    || Accelerate towards Mario.
    ADC.w DATA_01D4E7,Y         ;$01CEE7    ||
    STA $B6,X                   ;$01CEEA    ||
CODE_01CEEC:                    ;           ||
    JSR SubSprXPosNoGrvty       ;$01CEEC    |/
    LDA $14                     ;$01CEEF    |\ 
    LSR                         ;$01CEF1    ||
    LSR                         ;$01CEF2    ||
    AND.b #$03                  ;$01CEF3    || Animate the shell's spin.
    TAY                         ;$01CEF5    ||
    LDA.w DATA_01CEB0,Y         ;$01CEF6    ||
    STA.w $1602,X               ;$01CEF9    |/
    RTS                         ;$01CEFC    |



CODE_01CEFD:                    ;-----------| Ludwig's attack phase 2 - Jumping.
    LDA.w $1540,X               ;$01CEFD    |\ Branch if already jumping.
    BEQ CODE_01CF1C             ;$01CF00    |/
    DEC A                       ;$01CF02    |\ Branch if not time to actually jump.
    BNE CODE_01CF0F             ;$01CF03    ||
    LDA.w $160E,X               ;$01CF05    ||\ Set X speed.
    STA $B6,X                   ;$01CF08    ||/
    LDA.b #$08                  ;$01CF0A    ||\ SFX for Ludwig jumping.
    STA.w $1DFC                 ;$01CF0C    |//
CODE_01CF0F:                    ;           |
    LDA $B6,X                   ;$01CF0F    |\ 
    BEQ Return01CF1B            ;$01CF11    ||
    BPL CODE_01CF19             ;$01CF13    ||
    INC $B6,X                   ;$01CF15    || Decrease X speed? Pretty much unused since position is not updated.
    INC $B6,X                   ;$01CF17    ||
CODE_01CF19:                    ;           ||
    DEC $B6,X                   ;$01CF19    |/
Return01CF1B:                   ;           |
    RTS                         ;$01CF1B    |


CODE_01CF1C:                    ;```````````| Ludwig is jumping (i.e. in air).
    JSR CODE_01D0C0             ;$01CF1C    |\ Branch if not touching the ground.
    BCC CODE_01CF2F             ;$01CF1F    |/
    LDA $AA,X                   ;$01CF21    |\ Branch if moving upward (is already checked though, so unused).
    BMI CODE_01CF2F             ;$01CF23    |/
    STZ $B6,X                   ;$01CF25    |\ 
    STZ $AA,X                   ;$01CF27    || Clear X/Y speed, and return to attack phase 0 (firing).
    STZ.w $1528,X               ;$01CF29    |/
    JMP CODE_01CEA8             ;$01CF2C    | Set fireball phase timer.


CODE_01CF2F:                    ;```````````| Hasn't hit the ground.
    JSR SubSprXPosNoGrvty       ;$01CF2F    |\ Update position.
    JSR SubSprYPosNoGrvty       ;$01CF32    |/
    LDA $13                     ;$01CF35    |\ 
    LSR                         ;$01CF37    ||
    BCS CODE_01CF44             ;$01CF38    ||
    LDA $AA,X                   ;$01CF3A    ||
    BMI CODE_01CF42             ;$01CF3C    || Apply gravity, and cap Y speed at #$70.
    CMP.b #$70                  ;$01CF3E    ||
    BCS CODE_01CF44             ;$01CF40    ||
CODE_01CF42:                    ;           ||
    INC $AA,X                   ;$01CF42    |/
CODE_01CF44:                    ;           |
    LDA.w $1558,X               ;$01CF44    |\ 
    BNE CODE_01CF4F             ;$01CF47    ||
    LDA $36                     ;$01CF49    || Branch if Ludwig hasn't completed one full rotation yet.
    ORA $37                     ;$01CF4B    ||
    BEQ CODE_01CF67             ;$01CF4D    |/
CODE_01CF4F:                    ;           |
    LDA $B6,X                   ;$01CF4F    |\ 
    ASL                         ;$01CF51    ||
    LDA.b #$04                  ;$01CF52    ||
    LDY.b #$00                  ;$01CF54    ||
    BCC CODE_01CF5B             ;$01CF56    ||
    LDA.b #$FC                  ;$01CF58    ||
    DEY                         ;$01CF5A    || Rotate in the direction that Ludwig is moving.
CODE_01CF5B:                    ;           ||
    CLC                         ;$01CF5B    ||
    ADC $36                     ;$01CF5C    ||
    STA $36                     ;$01CF5E    ||
    TYA                         ;$01CF60    ||
    ADC $37                     ;$01CF61    ||
    AND.b #$01                  ;$01CF63    ||
    STA $37                     ;$01CF65    |/
CODE_01CF67:                    ;           |
    LDA.b #$06                  ;$01CF67    |\ 
    LDY $AA,X                   ;$01CF69    ||
    BMI CODE_01CF79             ;$01CF6B    ||
    CPY.b #$08                  ;$01CF6D    ||
    BCC CODE_01CF79             ;$01CF6F    || Set animation frame.
    LDA.b #$05                  ;$01CF71    || 6 if moving upwards or just starting to fall (Y speed < #$08)
    CPY.b #$10                  ;$01CF73    || 5 for a little bit after starting to fall (Y speed < #$10).
    BCC CODE_01CF79             ;$01CF75    || 2 after falling for a while (Y speed >= #$10).
    LDA.b #$02                  ;$01CF77    ||
CODE_01CF79:                    ;           ||
    STA.w $1602,X               ;$01CF79    |/
    RTS                         ;$01CF7C    |





CODE_01CF7D:                    ;-----------| Morton/Roy/Ludwig phase 3 - Hurt.
    JSR SubSprYPosNoGrvty       ;$01CF7D    |\ 
    INC $AA,X                   ;$01CF80    || Handle Y speed; fall towards the ground, stop when the boss hits it.
    JSR CODE_01D0C0             ;$01CF82    |/
    LDA.w $1540,X               ;$01CF85    |\ 
    BEQ CODE_01CFB7             ;$01CF88    || Branch A if done with hurt animation.
    CMP.b #$40                  ;$01CF8A    || Branch B if scaling back to normal.
    BCC CODE_01CF9E             ;$01CF8C    || Branch C if starting to scale (register damage, check if dead).
    BEQ CODE_01CFC6             ;$01CF8E    |/
    LDY.b #$06                  ;$01CF90    |\ 
    LDA $14                     ;$01CF92    ||
    AND.b #$04                  ;$01CF94    ||
    BEQ CODE_01CF99             ;$01CF96    || Set animation frame for the damage animation.
    INY                         ;$01CF98    || Both frames (6/7) are identical, though, so most of this code is unnecessary.
CODE_01CF99:                    ;           ||
    TYA                         ;$01CF99    ||
    STA.w $1602,X               ;$01CF9A    |/
    RTS                         ;$01CF9D    |


CODE_01CF9E:                    ;```````````| Scale the boss back to normal.
    LDY.w $18A6                 ;$01CF9E    | Unused.
    LDA $38                     ;$01CFA1    |\ 
    CMP.b #$20                  ;$01CFA3    ||
    BEQ CODE_01CFA9             ;$01CFA5    ||
    INC $38                     ;$01CFA7    ||
CODE_01CFA9:                    ;           || Increment X and Y scales until they're back to normal (#$20).
    LDA $39                     ;$01CFA9    ||
    CMP.b #$20                  ;$01CFAB    ||
    BEQ CODE_01CFB1             ;$01CFAD    ||
    DEC $39                     ;$01CFAF    |/
CODE_01CFB1:                    ;           |
    LDA.b #$07                  ;$01CFB1    |\ Set animation frame (7).
    STA.w $1602,X               ;$01CFB3    |/
    RTS                         ;$01CFB6    |


CODE_01CFB7:                    ;```````````| Done with hurt animation.
    LDA.b #$02                  ;$01CFB7    |\ Return to normal movement.
    STA.w $151C,X               ;$01CFB9    |/
    LDA $C2,X                   ;$01CFBC    |\ 
    BEQ Return01CFC5            ;$01CFBE    || Set timer for moving Roy's walls inward.
    LDA.b #$20                  ;$01CFC0    ||  Also gets set for Ludwig's battle, but is never used.
    STA.w $164A,X               ;$01CFC2    |/
Return01CFC5:                   ;           |
    RTS                         ;$01CFC5    |


CODE_01CFC6:                    ;```````````| Increase Morton/Roy/Ludwig's damage count, and check if time to kill the boss.
    INC.w $1626,X               ;$01CFC6    |\ 
    LDA.w $1626,X               ;$01CFC9    ||
    CMP.b #$03                  ;$01CFCC    ||| Ludwig, Morton, and Roy's HP, when being hit by Mario.
    BCC Return01CFDF            ;$01CFCE    |/
CODE_01CFD0:                    ;```````````| Kill Morton/Roy/Ludwig.
    LDA.b #$1F                  ;$01CFD0    |\ Ludwig, Morton, and Roy's death SFX.
    STA.w $1DF9                 ;$01CFD2    |/
    LDA.b #$04                  ;$01CFD5    |\ Change boss phase to 4 (dying).
    STA.w $151C,X               ;$01CFD7    |/
    LDA.b #$13                  ;$01CFDA    |\ Set timer for the death animation (specifically, the "boss is growing" part).
    STA.w $1540,X               ;$01CFDC    |/
Return01CFDF:                   ;           |
    RTS                         ;$01CFDF    |



CODE_01CFE0:                    ;-----------| Morton/Roy/Ludwig phase 4 - Dying.
    LDY.w $1540,X               ;$01CFE0    |\ Branch if shrinking the boss (not growing).
    BEQ CODE_01CFFC             ;$01CFE3    |/
    LDA $D8,X                   ;$01CFE5    |\ 
    SEC                         ;$01CFE7    ||
    SBC.b #$01                  ;$01CFE8    || Move the boss upwards (so he doesn't rotate into the ground).
    STA $D8,X                   ;$01CFEA    ||
    BCS CODE_01CFF1             ;$01CFEC    ||
    DEC.w $14D4,X               ;$01CFEE    |/
CODE_01CFF1:                    ;           |
    DEC $39                     ;$01CFF1    |\ 
    TYA                         ;$01CFF3    || Increase the boss's scaling.
    AND.b #$03                  ;$01CFF4    ||  Horizontal scaling occurs only 3 out of 4 frames, for some reason.
    BEQ CODE_01CFFA             ;$01CFF6    ||
    DEC $38                     ;$01CFF8    |/
CODE_01CFFA:                    ;           |
    BRA CODE_01D00F             ;$01CFFA    |

CODE_01CFFC:                    ;```````````| Shrink and spin the boss.
    LDA $36                     ;$01CFFC    |\ 
    CLC                         ;$01CFFE    ||
    ADC.b #$06                  ;$01CFFF    ||| Morton/Roy/Ludwig death animation rotation speed.
    STA $36                     ;$01D001    ||
    LDA $37                     ;$01D003    ||
    ADC.b #$00                  ;$01D005    ||
    AND.b #$01                  ;$01D007    ||
    STA $37                     ;$01D009    |/
    INC $38                     ;$01D00B    |\ Shrink the boss.
    INC $39                     ;$01D00D    |/
CODE_01D00F:                    ;           |
    LDA $39                     ;$01D00F    |\ 
    CMP.b #$A0                  ;$01D011    || Return if the boss hasn't shrunk enough yet.
    BCC Return01D042            ;$01D013    |/
    LDA.w $15A0,X               ;$01D015    |\ 
    BNE CODE_01D032             ;$01D018    ||
    LDA.b #$01                  ;$01D01A    ||
    STA.w $17C0                 ;$01D01C    ||
    LDA $E4,X                   ;$01D01F    ||
    SBC.b #$08                  ;$01D021    || Spawn a cloud of smoke, unless the boss is offscreen (for Ludwig).
    STA.w $17C8                 ;$01D023    ||
    LDA $D8,X                   ;$01D026    ||
    ADC.b #$08                  ;$01D028    ||
    STA.w $17C4                 ;$01D02A    ||
    LDA.b #$1B                  ;$01D02D    ||
    STA.w $17CC                 ;$01D02F    |/
CODE_01D032:                    ;           |
    LDA.b #$D0                  ;$01D032    |\ Hide the boss offscreen.
    STA $D8,X                   ;$01D034    |/
    JSL CODE_03DEDF             ;$01D036    | Handle the Mode 7 tilemap.
    INC.w $151C,X               ;$01D03A    | Increase boss pointer (death cloud).
    LDA.b #$30                  ;$01D03D    |\ Set timer for waiting to end the level.
    STA.w $1540,X               ;$01D03F    |/
Return01D042:                   ;           |
    RTS                         ;$01D042    |



CODE_01D043:                    ;-----------| Morton/Roy/Ludwig phase 5 - Dead (end level).
    LDA.w $1540,X               ;$01D043    |\ Return if not time to end the level.
    BNE Return01D056            ;$01D046    |/
    INC.w $13C6                 ;$01D048    | Set cutscene flag.
    DEC.w $1493                 ;$01D04B    | Set end level timer.
    LDA.b #$0B                  ;$01D04E    |\ Song played after defeating Morton/Ludwig/Roy.
    STA.w $1DFB                 ;$01D050    |/
    STZ.w $14C8,X               ;$01D053    | Erase the boss.
Return01D056:                   ;           |
    RTS                         ;$01D056    |





DATA_01D057:                    ;$01D057    | X position offsets for Ludwig's fireballs.
    db $FF,$F1

CODE_01D059:                    ;-----------| Spawn Ludwig's fireball.
    LDA.b #$17                  ;$01D059    |\ Ludwig's fireball SFX.
    STA.w $1DFC                 ;$01D05B    |/
    LDY.b #$04                  ;$01D05E    |\ 
CODE_01D060:                    ;           ||
    LDA.w $14C8,Y               ;$01D060    || Find an empty sprite slot; return if none found.
    BEQ CODE_01D069             ;$01D063    ||
    DEY                         ;$01D065    ||
    BPL CODE_01D060             ;$01D066    ||
    RTS                         ;$01D068    |/

CODE_01D069:
    LDA.b #$08                  ;$01D069    |\ 
    STA.w $14C8,Y               ;$01D06B    ||
    LDA.b #$34                  ;$01D06E    ||| Sprite spawned by Ludwig (fireball).
    STA.w $009E,Y               ;$01D070    |/
    LDA $E4,X                   ;$01D073    |
    STA $00                     ;$01D075    |
    LDA.w $14E0,X               ;$01D077    |
    STA $01                     ;$01D07A    |
    LDA $D8,X                   ;$01D07C    |\ 
    CLC                         ;$01D07E    || Set Y position.
    ADC.b #$03                  ;$01D07F    ||| Height of Ludwig's fireball relative to him.
    STA.w $00D8,Y               ;$01D081    ||
    LDA.w $14D4,X               ;$01D084    ||
    ADC.b #$00                  ;$01D087    ||
    STA.w $14D4,Y               ;$01D089    |/
    LDA.w $157C,X               ;$01D08C    |\ 
    PHX                         ;$01D08F    ||
    TAX                         ;$01D090    ||
    LDA $00                     ;$01D091    ||
    CLC                         ;$01D093    || Set X position, accounting for direction.
    ADC.w DATA_01D057,X         ;$01D094    ||
    STA.w $00E4,Y               ;$01D097    ||
    LDA $01                     ;$01D09A    ||
    ADC.b #$FF                  ;$01D09C    ||
    STA.w $14E0,Y               ;$01D09E    |/
    PLX                         ;$01D0A1    |
    PHX                         ;$01D0A2    |
    TYX                         ;$01D0A3    |
    JSL InitSpriteTables        ;$01D0A4    |
    PLX                         ;$01D0A8    |
    PHX                         ;$01D0A9    |
    LDA.w $157C,X               ;$01D0AA    |\ Set direction to be the same as Ludwig's.
    STA.w $157C,Y               ;$01D0AD    |/
    TAX                         ;$01D0B0    |
    LDA.w DATA_01D0BE,X         ;$01D0B1    |\ Set X speed.
    STA.w $00B6,Y               ;$01D0B4    |/
    LDA.b #$30                  ;$01D0B7    |\\ How long fireballs stay in Ludwig's mouth before being fired.
    STA.w $1540,Y               ;$01D0B9    |/
    PLX                         ;$01D0BC    |
    RTS                         ;$01D0BD    |

DATA_01D0BE:                    ; Speed of Ludwig's fireballs.
    db $20,$E0



CODE_01D0C0:                    ;-----------| Subroutine to handle Morton/Roy/Ludwig touching the ground. Returns carry set if so, clear if not.
    LDA $AA,X                   ;$01D0C0    |\ 
    BMI CODE_01D0DC             ;$01D0C2    ||
    LDA.w $14D4,X               ;$01D0C4    ||
    BNE CODE_01D0DC             ;$01D0C7    || Return carry clear if the boss is:
    LDA $39                     ;$01D0C9    ||  - Not on the ground.
    LSR                         ;$01D0CB    ||  - Moving upwards.
    TAY                         ;$01D0CC    ||  - Y position too low (non-zero high byte).
    LDA $D8,X                   ;$01D0CD    ||
    CMP.w DATA_01D0DE-8,Y       ;$01D0CF    ||
    BCC CODE_01D0DC             ;$01D0D2    |/
    LDA DATA_01D0DE-8,Y         ;$01D0D4    |\ Adjust Y position to account for scaling.
    STA $D8,X                   ;$01D0D7    |/
    STZ $AA,X                   ;$01D0D9    | Stop the boss from falling.
    RTS                         ;$01D0DB    |

CODE_01D0DC:                    ;           |
    CLC                         ;$01D0DC    |
    RTS                         ;$01D0DD    |



DATA_01D0DE:                    ;$01D0DE    | Y position of the ground for Morton/Roy/Ludwig, accounting for vertical stretch.
    db $80,$83,$85,$88,$8A,$8B,$8D,$8F      ; Indexed by the current Y scaling ($39) divided by 2, minus 8.
    db $90,$91,$91,$92,$92,$93,$93,$94
    db $94,$95,$95,$96,$96,$97,$97,$98
    db $98,$98,$99,$99,$9A,$9A,$9B,$9B
    db $9C,$9C,$9C,$9C,$9D,$9D,$9D,$9D
    db $9E,$9E,$9E,$9E,$9E,$9F,$9F,$9F
    db $9F,$9F,$9F,$9F,$9F,$9F,$9F,$9F





CODE_01D116:                    ;-----------| Morton/Roy's main routine.
    LDA.w $1528,X               ;$01D116    |
    JSL ExecutePtr              ;$01D119    |

MortonPtrs3:                    ;$01D11D    | Morton/Roy movement/attack pointers.
    dw CODE_01D146              ; 0 - Walking
    dw CODE_01D23F              ; 1 - Dropping from ceiling.



    RTS                         ;$01D121    | Rip.



DATA_01D122:                    ; Morton and Roy X speeds. Indexed by number of hits received and direction. Second bytes are up/down.
    db $F0,$00                  ; 0 - left
    db $10,$00                  ; 0 - right
    db $F0,$00                  ; 1 - left
    db $10,$00                  ; 1 - right
    db $E8,$00                  ; 2 - left
    db $18,$00                  ; 2 - right

DATA_01D12E:                    ;$01D12E    | Morton and Roy Y speeds. Indexed by number of hits received and direction. First bytes are left/right.
    db $00,$F0                  ; 0 - up
    db $00,$10                  ; 0 - down
    db $00,$F0                  ; 1 - up
    db $00,$10                  ; 1 - down
    db $00,$E8                  ; 2 - up
    db $00,$18                  ; 2 - down

    db $26,$26                  ; Unused values.
    db $D8,$D8                  ;

DATA_01D13E:                    ;$01D13E    | Positions of the ceiling and floor for Morton/Roy.
    db $90,$30,$30,$90          ; Only the second (ceiling) and third (floor) bytes are used.

DATA_01D142:                    ;$01D142    | Frames for Morton/Roy's walking animations.
    db $00,$01,$02,$01

CODE_01D146:                    ;-----------| Morton/Roy movement phase 0 - Walking.
    LDA $14                     ;$01D146    |\ 
    LSR                         ;$01D148    ||
    LDY.w $1626,X               ;$01D149    ||\ 
    CPY.b #$02                  ;$01D14C    ||| Double walking speed after two hits.
    BCS CODE_01D151             ;$01D14E    |||
    LSR                         ;$01D150    ||/
CODE_01D151:                    ;           ||
    AND.b #$03                  ;$01D151    ||\ 
    TAY                         ;$01D153    |||
    LDA.w DATA_01D142,Y         ;$01D154    |||
    LDY.w $15AC,X               ;$01D157    ||| Handle walking and turning animations.
    BEQ CODE_01D15E             ;$01D15A    |||  0/1/2 - walking, 5 = turning.
    LDA.b #$05                  ;$01D15C    |||
CODE_01D15E:                    ;           |||
    STA.w $1602,X               ;$01D15E    |//
    LDA.w $164A,X               ;$01D161    |\ 
    BEQ CODE_01D17C             ;$01D164    ||
    LDY $E4,X                   ;$01D166    ||
    CPY.b #$50                  ;$01D168    || Move walls inwards if:
    BCC CODE_01D17C             ;$01D16A    ||  - The timer is set, with an even frame.
    CPY.b #$80                  ;$01D16C    ||  - Roy is near the center of the room (tiles 5-7).
    BCS CODE_01D17C             ;$01D16E    ||
    DEC.w $164A,X               ;$01D170    ||
    LSR                         ;$01D173    ||
    BCS CODE_01D17C             ;$01D174    ||
    INC.w $1534,X               ;$01D176    ||
    DEC.w $160E,X               ;$01D179    |/
CODE_01D17C:                    ;           |
    LDA.w $1534,X               ;$01D17C    |\ 
    STA $05                     ;$01D17F    ||
    STA $06                     ;$01D181    ||
    STA $0B                     ;$01D183    ||
    STA $0C                     ;$01D185    || Store the X positions for the wall's tiles.
    LDA.w $160E,X               ;$01D187    || Uses $05-0A.
    STA $07                     ;$01D18A    ||
    STA $08                     ;$01D18C    ||
    STA $09                     ;$01D18E    ||
    STA $0A                     ;$01D190    |/
    LDA $36                     ;$01D192    |\ 
    ASL                         ;$01D194    || Jump if the boss is in the process of turning on a corner.
    BEQ CODE_01D19A             ;$01D195    ||
    JMP CODE_01D224             ;$01D197    |/

CODE_01D19A:                    ;```````````| Morton/Roy is not turning on a corner.
    LDY.w $1594,X               ;$01D19A    |\ 
    TYA                         ;$01D19D    || Branch if walking vertically.
    LSR                         ;$01D19E    ||
    BCS CODE_01D1B5             ;$01D19F    |/
    LDA $E4,X                   ;$01D1A1    |\ 
    CPY.b #$00                  ;$01D1A3    ||
    BNE CODE_01D1AE             ;$01D1A5    ||
    CMP.w $1534,X               ;$01D1A7    ||
    BCC CODE_01D215             ;$01D1AA    || Branch down if walking into one of the walls, to start turning.
    BRA CODE_01D1D8             ;$01D1AC    || Else branch for walking forwards.
CODE_01D1AE:                    ;           ||
    CMP.w $160E,X               ;$01D1AE    ||
    BCS CODE_01D215             ;$01D1B1    ||
    BRA CODE_01D1D8             ;$01D1B3    |/
CODE_01D1B5:                    ;```````````| Walking vertically.
    LDA.w $157C,X               ;$01D1B5    |\ 
    BNE CODE_01D1BE             ;$01D1B8    ||
    INY                         ;$01D1BA    ||
    INY                         ;$01D1BB    ||
    INY                         ;$01D1BC    || Keep the boss on the wall they're walking on.
    INY                         ;$01D1BD    ||
CODE_01D1BE:                    ;           ||
    LDA.w $0005,Y               ;$01D1BE    ||
    STA $E4,X                   ;$01D1C1    |/
    LDY.w $1594,X               ;$01D1C3    |\ 
    LDA $D8,X                   ;$01D1C6    ||
    CPY.b #$03                  ;$01D1C8    ||
    BEQ CODE_01D1D3             ;$01D1CA    ||
    CMP.w DATA_01D13E,Y         ;$01D1CC    || Branch down if walking into the ceiling/floor, to start turning.
    BCC CODE_01D215             ;$01D1CF    || Else continue below for walking forwards.
    BRA CODE_01D1D8             ;$01D1D1    ||
CODE_01D1D3:                    ;           ||
    CMP.w DATA_01D13E,Y         ;$01D1D3    ||
    BCS CODE_01D215             ;$01D1D6    |/
CODE_01D1D8:                    ;```````````| Not time to start turning - walk forwards.
    LDA.w $1626,X               ;$01D1D8    |\ 
    CMP.b #$02                  ;$01D1DB    ||
    BCC CODE_01D1E1             ;$01D1DD    ||
    LDA.b #$02                  ;$01D1DF    ||
CODE_01D1E1:                    ;           ||
    ASL                         ;$01D1E1    ||
    ASL                         ;$01D1E2    || Set X/Y speed for the boss.
    ADC.w $1594,X               ;$01D1E3    ||
    TAY                         ;$01D1E6    ||
    LDA.w DATA_01D122,Y         ;$01D1E7    ||
    STA $B6,X                   ;$01D1EA    ||
    LDA.w DATA_01D12E,Y         ;$01D1EC    ||
    STA $AA,X                   ;$01D1EF    |/
    JSR SubSprXPosNoGrvty       ;$01D1F1    |\ Update position.
    JSR SubSprYPosNoGrvty       ;$01D1F4    |/
    LDA.w $1594,X               ;$01D1F7    |\\ 
    LDY.w $157C,X               ;$01D1FA    |||
    BNE CODE_01D201             ;$01D1FD    |||
    EOR.b #$02                  ;$01D1FF    ||| Return if not walking on the ceiling.
CODE_01D201:                    ;           |||
    CMP.b #$02                  ;$01D202    |||
    BNE Return01D214            ;$01D203    ||/
    JSR SubHorzPosBnk1          ;$01D205    ||\ 
    LDA $0F                     ;$01D208    |||
    CLC                         ;$01D20A    |||
    ADC.b #$10                  ;$01D20B    ||| If Mario is within a tile of the boss, increase phase pointer (falling).
    CMP.b #$20                  ;$01D20D    |||
    BCS Return01D214            ;$01D20F    |||
    INC.w $1528,X               ;$01D211    |//
Return01D214:                   ;           |
    RTS                         ;$01D214    |


CODE_01D215:                    ;```````````| Walking into a corner - start turning.
    LDY.w $157C,X               ;$01D215    |\ 
    LDA.w $1594,X               ;$01D218    ||
    CLC                         ;$01D21B    || Increase/decrease relative movement direction.
    ADC.w DATA_01D23D,Y         ;$01D21C    ||
    AND.b #$03                  ;$01D21F    ||
    STA.w $1594,X               ;$01D221    |/
CODE_01D224:                    ;```````````| Boss is turning a corner.
    LDY.w $157C,X               ;$01D224    |\ 
    LDA $36                     ;$01D227    ||
    CLC                         ;$01D229    ||
    ADC.w DATA_01D239,Y         ;$01D22A    ||
    STA $36                     ;$01D22D    || Rotate the boss, based on direction of movement.
    LDA $37                     ;$01D22F    ||
    ADC.w DATA_01D23B,Y         ;$01D231    ||
    AND.b #$01                  ;$01D234    ||
    STA $37                     ;$01D236    |/
    RTS                         ;$01D238    |

DATA_01D239:                    ;$01D239    | Rotation speeds (lo) when Roy and Morton are turning a corner.
    db $FC,$04

DATA_01D23B:                    ;$01D23B    | Rotation speeds (hi) when Roy and Morton are turning a corner.
    db $FF,$00

DATA_01D23D:                    ;$01D23D    | Values to increase/decrease relative movement direction, indexed by the boss's rotational direction.
    db $FF,$01



CODE_01D23F:                    ;-----------| Morton/Roy movement phase 1 - Dropping from the ceiling.
    LDA.w $1540,X               ;$01D23F    |\ Branch if the ground hasn't been hit yet.
    BEQ CODE_01D25E             ;$01D242    |/
    CMP.b #$01                  ;$01D244    |\ Return if not time to resume normal movement.
    BNE Return01D2A7            ;$01D246    |/
    STZ.w $1528,X               ;$01D248    | Return to normal movement routine.
    JSR SubHorzPosBnk1          ;$01D24B    |\ 
    TYA                         ;$01D24E    ||
    STA.w $157C,X               ;$01D24F    || Move towards Mario.
    ASL                         ;$01D252    ||
    EOR.b #$02                  ;$01D253    ||
    STA.w $1594,X               ;$01D255    |/
    LDA.b #$0A                  ;$01D258    |\ Set turn timer.
    STA.w $15AC,X               ;$01D25A    |/
    RTS                         ;$01D25D    |

CODE_01D25E:                    ;```````````| Haven't hit the ground.
    LDA.b #$06                  ;$01D25E    |\ Set falling animation frame (6).
    STA.w $1602,X               ;$01D260    |/
    JSR SubSprYPosNoGrvty       ;$01D263    |\ 
    LDA $AA,X                   ;$01D266    ||
    CMP.b #$70                  ;$01D268    ||
    BCS CODE_01D271             ;$01D26A    || Update Y position and apply gravity, cap Y speed at #$70.
    CLC                         ;$01D26C    ||
    ADC.b #$04                  ;$01D26D    ||
    STA $AA,X                   ;$01D26F    |/
CODE_01D271:                    ;           |
    LDA $36                     ;$01D271    |\ 
    ORA $37                     ;$01D273    ||
    BEQ CODE_01D286             ;$01D275    ||
    LDA $36                     ;$01D277    || Rotate clockwise until the boss faces upright again.
    CLC                         ;$01D279    ||
    ADC.b #$08                  ;$01D27A    ||| Falling rotation speed.
    STA $36                     ;$01D27C    ||
    LDA $37                     ;$01D27E    ||
    ADC.b #$00                  ;$01D280    ||
    AND.b #$01                  ;$01D282    ||
    STA $37                     ;$01D284    |/
CODE_01D286:                    ;           |
    JSR CODE_01D0C0             ;$01D286    |\ Return if it hasn't hit the ground.
    BCC Return01D2A7            ;$01D289    |/
    LDA.b #$20                  ;$01D28B    |\\ Time to shake the screen after Morton/Roy hit the ground.
    STA.w $1887                 ;$01D28D    ||
    LDA $72                     ;$01D290    ||
    BNE CODE_01D299             ;$01D292    ||
    LDA.b #$28                  ;$01D294    ||| Time to freeze Mario if he's on the ground when Morton/Roy hit it.
    STA.w $18BD                 ;$01D296    |/
CODE_01D299:                    ;           |
    LDA.b #$09                  ;$01D299    |\ SFX for Morton/Roy smashing the ground/
    STA.w $1DFC                 ;$01D29B    |/
    LDA.b #$28                  ;$01D29E    |\\ Time until the boss waits before returning to normal movement.
    STA.w $1540,X               ;$01D2A0    |/
    STZ $36                     ;$01D2A3    |\ Reset rotation if not zero already.
    STZ $37                     ;$01D2A5    |/
Return01D2A7:                   ;           |
    RTS                         ;$01D2A7    |



CODE_01D2A8:                    ;-----------| Morton/Roy/Ludwig interaction routine.
    LDA.w $151C,X               ;$01D2A8    |\ 
    CMP.b #$03                  ;$01D2AB    || Return if the boss is in its hurt state.
    BCS Return01D318            ;$01D2AD    |/
    LDA.w $187B,X               ;$01D2AF    |\ 
    CMP.b #$03                  ;$01D2B2    ||
    BNE CODE_01D2BD             ;$01D2B4    || Unused?
    LDA.w $1528,X               ;$01D2B6    ||
    CMP.b #$03                  ;$01D2B9    ||
    BCS Return01D318            ;$01D2BB    |/
CODE_01D2BD:                    ;           |
    JSL GetMarioClipping        ;$01D2BD    |\ 
    JSR CODE_01D40B             ;$01D2C1    || Return if player not in contact.
    JSL CheckForContact         ;$01D2C4    ||
    BCC Return01D318            ;$01D2C8    |/
    LDA.w $1FE2,X               ;$01D2CA    |\ Return if player contact is disabled.
    BNE Return01D318            ;$01D2CD    |/
    LDA.b #$08                  ;$01D2CF    |\ Disable contact for 8 frames.
    STA.w $1FE2,X               ;$01D2D1    |/
    LDA $72                     ;$01D2D4    |\ Branch to just hurt Mario if he's on the ground.
    BEQ CODE_01D319             ;$01D2D6    |/
    LDA.w $1602,X               ;$01D2D8    |\ 
    CMP.b #$10                  ;$01D2DB    ||
    BCS CODE_01D2E3             ;$01D2DD    || Branch if falling from the ceiling.
    CMP.b #$06                  ;$01D2DF    ||
    BCS CODE_01D31E             ;$01D2E1    |/
CODE_01D2E3:                    ;           |
    LDA $96                     ;$01D2E3    |\ 
    CLC                         ;$01D2E5    ||
    ADC.b #$08                  ;$01D2E6    || Branch to just bump Mario off if not hitting the top of the boss.
    CMP $D8,X                   ;$01D2E8    ||
    BCS CODE_01D31E             ;$01D2EA    |/
    LDA.w $1594,X               ;$01D2EC    |\ 
    LSR                         ;$01D2EF    || Branch if the boss is currently moving vertically, not horizontally.
    BCS CODE_01D334             ;$01D2F0    |/
    LDA $7D                     ;$01D2F2    |\ Return if Mario is moving upwards.
    BMI Return01D31D            ;$01D2F4    |/
    JSR CODE_01D351             ;$01D2F6    | Display a contact sprite.
    LDA.b #$D0                  ;$01D2F9    |\\ Y speed to give Mario after bouncing on Morton/Roy/Ludwig.
    STA $7D                     ;$01D2FB    |/
    LDA.b #$02                  ;$01D2FD    |\ SFX for bouncing on Morton/Roy/Ludwig.
    STA.w $1DF9                 ;$01D2FF    |/
    LDA.w $1602,X               ;$01D302    |\ 
    CMP.b #$1B                  ;$01D305    || Branch if not Ludwig in his spinning form (i.e. the boss should be hurt).
    BCC CODE_01D379             ;$01D307    |/
CODE_01D309:                    ;```````````| Bouncing on Ludwig in his shell, or downwards onto any boss when falling.
    LDY.b #$20                  ;$01D309    |\\ X speed to give when hitting the right side of Ludwig's shell.
    LDA $E4,X                   ;$01D30B    ||
    SEC                         ;$01D30D    ||
    SBC.b #$08                  ;$01D30E    ||
    CMP $94                     ;$01D310    ||
    BMI CODE_01D316             ;$01D312    ||
    LDY.b #$E0                  ;$01D314    ||| X speed to give when hitting the left side of Ludwig's shell.
CODE_01D316:                    ;           ||
    STY $7B                     ;$01D316    |/
Return01D318:                   ;           |
    RTS                         ;$01D318    |

CODE_01D319:                    ;```````````| Touching the boss while on the ground; hurt Mario.
    JSL HurtMario               ;$01D319    |
Return01D31D:                   ;           |
    RTS                         ;$01D31D    |

CODE_01D31E:                    ;```````````| Boss is falling or Mario is touching the lower half of the boss (e.g. while it's falling).
    LDA.b #$01                  ;$01D31E    |\ SFX for the "bump".
    STA.w $1DF9                 ;$01D320    |/
    LDA $7D                     ;$01D323    |\ 
    BPL CODE_01D32C             ;$01D325    ||
    LDA.b #$10                  ;$01D327    ||| Y speed to give when moving upwards and hitting the boss.
    STA $7D                     ;$01D329    ||
    RTS                         ;$01D32B    ||
CODE_01D32C:                    ;           ||
    JSR CODE_01D309             ;$01D32C    ||
    LDA.b #$D0                  ;$01D32F    ||| Y speed to give when moving downwards and hitting the boss.
    STA $7D                     ;$01D331    |/
    RTS                         ;$01D333    |

CODE_01D334:                    ;```````````| Boss is moving vertically up/down the wall.
    LDA.b #$01                  ;$01D334    |\ SFX for the "bump".
    STA.w $1DF9                 ;$01D336    |/
    LDA $7D                     ;$01D339    |\ 
    BPL CODE_01D342             ;$01D33B    ||
    LDA.b #$20                  ;$01D33D    ||| Y speed to give when hitting the boss while moving upwards.
    STA $7D                     ;$01D33F    ||
    RTS                         ;$01D341    ||
CODE_01D342:                    ;           ||
    LDY.b #$20                  ;$01D342    ||| X speed to give when hitting the right side of the boss while moving downwards.
    LDA $E4,X                   ;$01D344    ||
    BPL CODE_01D34A             ;$01D346    ||
    LDY.b #$E0                  ;$01D348    ||| X speed to give when hitting the left side of the boss while moving downwards.
CODE_01D34A:                    ;           ||
    STY $7B                     ;$01D34A    ||
    LDA.b #$B0                  ;$01D34C    ||| Y speed to give when hitting the boss while moving downwards.
    STA $7D                     ;$01D34E    |/
    RTS                         ;$01D350    |


CODE_01D351:                    ;-----------| Subroutine to display a contact sprite for hitting Morton/Roy/Ludwig.
    LDA $E4,X                   ;$01D351    |\ 
    PHA                         ;$01D353    ||
    SEC                         ;$01D354    ||
    SBC.b #$08                  ;$01D355    ||
    STA $E4,X                   ;$01D357    || Shift 8 pixels left.
    LDA.w $14E0,X               ;$01D359    ||
    PHA                         ;$01D35C    ||
    SBC.b #$00                  ;$01D35D    ||
    STA.w $14E0,X               ;$01D35F    |/
    LDA $D8,X                   ;$01D362    |\ 
    PHA                         ;$01D364    ||
    CLC                         ;$01D365    || Shift 8 pixels down.
    ADC.b #$08                  ;$01D366    ||
    STA $D8,X                   ;$01D368    |/
    JSL DispContactMario        ;$01D36A    | Display the sprite.
    PLA                         ;$01D36E    |\ 
    STA $D8,X                   ;$01D36F    ||
    PLA                         ;$01D371    || Restore position.
    STA.w $14E0,X               ;$01D372    ||
    PLA                         ;$01D375    ||
    STA $E4,X                   ;$01D376    |/
    RTS                         ;$01D378    |


CODE_01D379:                    ;-----------| Subroutine to hurt Morton/Roy/Ludwig.
    LDA.b #$18                  ;$01D379    |\ 
    STA $38                     ;$01D37B    ||
    PHX                         ;$01D37D    ||
    LDA $39                     ;$01D37E    || Stretch the boss.
    LSR                         ;$01D380    ||
    TAX                         ;$01D381    ||
    LDA.b #$28                  ;$01D382    ||
    STA $39                     ;$01D384    |/
    LSR                         ;$01D386    |\ 
    TAY                         ;$01D387    ||
    LDA.w DATA_01D0DE-8,Y       ;$01D388    ||
    SEC                         ;$01D38B    ||
    SBC.w DATA_01D0DE-8,X       ;$01D38C    ||
    PLX                         ;$01D38F    || Shift the boss's position to account for the vertical scaling.
    CLC                         ;$01D390    ||
    ADC $D8,X                   ;$01D391    ||
    STA $D8,X                   ;$01D393    ||
    LDA.w $14D4,X               ;$01D395    ||
    ADC.b #$00                  ;$01D398    ||
    STA.w $14D4,X               ;$01D39A    |/
    STZ $B6,X                   ;$01D39D    |\ Clear X/Y speed.
    STZ $AA,X                   ;$01D39F    |/
    LDA.b #$80                  ;$01D3A1    |\ Set timer for the hit animation.
    STA.w $1540,X               ;$01D3A3    |/
    LDA.b #$03                  ;$01D3A6    |\ Set phase to hurt.
    STA.w $151C,X               ;$01D3A8    |/
    LDA.b #$28                  ;$01D3AB    |\ SFX for hurting Morton/Roy/Ludwig.
    STA.w $1DFC                 ;$01D3AD    |/
    RTS                         ;$01D3B0    |



CODE_01D3B1:                    ;-----------| Subroutine to handle fireball interaction for Morton/Roy/Ludwig.
    LDA.w $151C,X               ;$01D3B1    |\ 
    CMP.b #$03                  ;$01D3B4    || Return if already hurt or dying.
    BCS Return01D40A            ;$01D3B6    |/
    LDY.b #$0A                  ;$01D3B8    |\ 
CODE_01D3BA:                    ;           ||
    STY.w $1695                 ;$01D3BA    || Look for Mario's fireballs.
    LDA.w $170B,Y               ;$01D3BD    ||
    CMP.b #$05                  ;$01D3C0    ||
    BNE CODE_01D405             ;$01D3C2    |/
    LDA.w $171F,Y               ;$01D3C4    |\ 
    STA $00                     ;$01D3C7    ||
    LDA.w $1733,Y               ;$01D3C9    ||
    STA $08                     ;$01D3CC    ||
    LDA.w $1715,Y               ;$01D3CE    ||
    STA $01                     ;$01D3D1    ||
    LDA.w $1729,Y               ;$01D3D3    ||
    STA $09                     ;$01D3D6    || Check if it's in contact with the boss.
    LDA.b #$08                  ;$01D3D8    ||
    STA $02                     ;$01D3DA    ||
    STA $03                     ;$01D3DC    ||
    PHY                         ;$01D3DE    ||
    JSR CODE_01D40B             ;$01D3DF    ||
    PLY                         ;$01D3E2    ||
    JSL CheckForContact         ;$01D3E3    ||
    BCC CODE_01D405             ;$01D3E7    |/
    LDA.b #$01                  ;$01D3E9    |\\ 
    STA.w $170B,Y               ;$01D3EB    ||| Turn fireball into a puff of smoke.
    LDA.b #$0F                  ;$01D3EE    |||
    STA.w $176F,Y               ;$01D3F0    ||/
    LDA.b #$01                  ;$01D3F3    ||\ SFX for hurting Morton/Roy/Ludwig with a fireball.
    STA.w $1DF9                 ;$01D3F5    ||/
    INC.w $1626,X               ;$01D3F8    ||\ 
    LDA.w $1626,X               ;$01D3FB    |||
    CMP.b #$0C                  ;$01D3FE    |||| How many fireballs it takes to kill Morton/Ludwig/Roy.
    BCC CODE_01D405             ;$01D400    |||
    JSR CODE_01CFD0             ;$01D402    |//
CODE_01D405:                    ;           |
    DEY                         ;$01D405    |\ 
    CPY.b #$07                  ;$01D406    || Continue to next extended sprite. Only check slots 07-0A.
    BNE CODE_01D3BA             ;$01D408    |/
Return01D40A:                   ;           |
    RTS                         ;$01D40A    |



CODE_01D40B:                    ;-----------| Subroutine to get clipping data for Morton/Ludwig/Roy, in place of GetSpriteClippingA.
    LDA $E4,X                   ;$01D40B    |\ 
    SEC                         ;$01D40D    ||
    SBC.b #$08                  ;$01D40E    ||
    STA $04                     ;$01D410    || X position
    LDA.w $14E0,X               ;$01D412    ||
    SBC.b #$00                  ;$01D415    ||
    STA $0A                     ;$01D417    |/
    LDA.b #$10                  ;$01D419    |\ Width
    STA $06                     ;$01D41B    |/
    LDA.b #$10                  ;$01D41D    |\ Height
    STA $07                     ;$01D41F    |/
    LDA.w $1602,X               ;$01D421    |\ 
    CMP.b #$69                  ;$01D424    ||
    LDA.b #$08                  ;$01D426    ||
    BCC CODE_01D42C             ;$01D428    ||
    ADC.b #$0A                  ;$01D42A    ||
CODE_01D42C:                    ;           || Y position
    CLC                         ;$01D42C    ||  (branch unused?...)
    ADC $D8,X                   ;$01D42D    ||
    STA $05                     ;$01D42F    ||
    LDA.w $14D4,X               ;$01D431    ||
    ADC.b #$00                  ;$01D434    ||
    STA $0B                     ;$01D436    |/
    RTS                         ;$01D438    |





DATA_01D439:                    ;$01D439    | Fireball sprite indexes; hardcoded because of the sprite BG in boss rooms.
    db $A8,$B0,$B8,$C0,$C8

ADDR_01D43E:                    ;-----------| Unused erase routine.
    STZ.w $14C8,X               ;$01D43E    |
    RTS                         ;$01D441    |

DATA_01D442:                    ;$01D442    | X offsets for Ludwig's fireballs. First two are facing right, second are left.
    db $00,$F0,$00,$10

LudwigFireTiles:                ;$01D446    | Tiles for Ludwig's fireball animation. Two tiles per frame.
    db $4A,$4C,$6A,$6C

DATA_01D44A:                    ;$01D44A    | YXPPCCCT for Ludwig's fileball animation.
    db $45,$45,$05,$05

    ; Boss fireball misc RAM:
    ; $1540 - Timer for preparing to fire from Ludwig's mouth. Set to #$30 initially.
    ; $157C - Horizontal direction the sprite is facing.
    ; $1602 - Animation frame. 00 = round fireball, 01 = thin fireball

BossFireball:                   ;-----------| Boss fireball MAIN.
    LDA $9D                     ;$01D44E    |\ 
    ORA.w $13FB                 ;$01D450    || Skip to graphics if:
    BNE CODE_01D487             ;$01D453    || - Sprites frozen
    LDA.w $1540,X               ;$01D455    || - Player frozen
    CMP.b #$10                  ;$01D458    || - Waiting inside Ludwig's mouth.
    BCS CODE_01D487             ;$01D45A    |/
    TAY                         ;$01D45C    |\ 
    BNE CODE_01D468             ;$01D45D    || If done firing from Ludwig's mouth,
    JSR SetAnimationFrame       ;$01D45F    ||  process interaction with Mario and animate.
    JSR SetAnimationFrame       ;$01D462    ||
    JSR MarioSprInteractRt      ;$01D465    |/
CODE_01D468:                    ;           |
    JSR SubSprXPosNoGrvty       ;$01D468    |\ 
    LDA $E4,X                   ;$01D46B    ||
    CLC                         ;$01D46D    ||
    ADC.b #$20                  ;$01D46E    ||
    STA $00                     ;$01D470    ||
    LDA.w $14E0,X               ;$01D472    || Update X position.
    ADC.b #$00                  ;$01D475    || Erase if off the side of Ludwig's room.
    STA $01                     ;$01D477    ||
    REP #$20                    ;$01D479    ||
    LDA $00                     ;$01D47B    ||
    CMP.w #$0230                ;$01D47D    ||
    SEP #$20                    ;$01D480    ||
    BCC CODE_01D487             ;$01D482    ||
    STZ.w $14C8,X               ;$01D484    |/
CODE_01D487:                    ;           |
    JSR GetDrawInfoBnk1         ;$01D487    |\ 
    LDA.w $1602,X               ;$01D48A    ||
    ASL                         ;$01D48D    ||
    STA $03                     ;$01D48E    ||
    LDA.w $157C,X               ;$01D490    || Get various OAM-related data.
    ASL                         ;$01D493    ||
    STA $02                     ;$01D494    ||
    LDA.w DATA_01D439,X         ;$01D496    ||
    STA.w $15EA,X               ;$01D499    ||
    TAY                         ;$01D49C    |/
    PHX                         ;$01D49D    |
    LDA.w $1540,X               ;$01D49E    |\ 
    LDX.b #$01                  ;$01D4A1    ||
    CMP.b #$08                  ;$01D4A3    || Draw two tiles, or only one tile if waiting in Ludwig's mouth.
    BCC CODE_01D4A8             ;$01D4A5    ||
    DEX                         ;$01D4A7    |/
CODE_01D4A8:                    ;           |
    PHX                         ;$01D4A8    |
    PHX                         ;$01D4A9    |
    TXA                         ;$01D4AA    |\ 
    CLC                         ;$01D4AB    ||
    ADC $02                     ;$01D4AC    ||
    TAX                         ;$01D4AE    || Set X position, accounting for direction.
    LDA $00                     ;$01D4AF    ||
    CLC                         ;$01D4B1    ||
    ADC.w DATA_01D442,X         ;$01D4B2    ||
    STA.w $0300,Y               ;$01D4B5    |/
    LDA $14                     ;$01D4B8    |\ 
    LSR                         ;$01D4BA    ||
    LSR                         ;$01D4BB    ||
    ROR                         ;$01D4BC    || Set YXPPCCCT. Flip vertically every 4 frames.
    AND.b #$80                  ;$01D4BD    ||
    ORA.w DATA_01D44A,X         ;$01D4BF    ||
    STA.w $0303,Y               ;$01D4C2    |/
    LDA $01                     ;$01D4C5    |\ 
    INC A                       ;$01D4C7    || Set Y position.
    INC A                       ;$01D4C8    ||
    STA.w $0301,Y               ;$01D4C9    |/
    PLA                         ;$01D4CC    |\ 
    CLC                         ;$01D4CD    ||
    ADC $03                     ;$01D4CE    || Set tile number.
    TAX                         ;$01D4D0    ||
    LDA.w LudwigFireTiles,X     ;$01D4D1    ||
    STA.w $0302,Y               ;$01D4D4    |/
    PLX                         ;$01D4D7    |
    INY                         ;$01D4D8    |\ 
    INY                         ;$01D4D9    ||
    INY                         ;$01D4DA    || Repeat for the second tile, if applicable.
    INY                         ;$01D4DB    ||
    DEX                         ;$01D4DC    ||
    BPL CODE_01D4A8             ;$01D4DD    |/
    PLX                         ;$01D4DF    |
    LDY.b #$02                  ;$01D4E0    |\ 
    LDA.b #$01                  ;$01D4E2    || Draw 2 16x16s.
    JMP FinishOAMWriteRt        ;$01D4E4    |/





DATA_01D4E7:                    ;$01D4E7    | Increment/decrement values, used for the parachute sprite's angles and Ludwig's shell speed.
    db $01,$FF

DATA_01D4E9:                    ;$01D4E9    | Max/min angle values for the parachute sprite.
    db $0F,$00

DATA_01D4EB:                    ;$01D4EB    | X speeds for each angular value (00-0F). Inverted when moving left.
    db $00,$02,$04,$06,$08,$0A,$0C,$0E
    db $0E,$0C,$0A,$08,$06,$04,$02,$00

    ; Para-Goomba/Bomb misc RAM:
    ; $C2   - Swing direction (odd = left, even = right)
    ; $151C - Flag for having hit the side of a block. When set, the sprite locks its animation and sinks straight down.
    ; $1540 - Timer after landing for the parachute to decend.
    ; $1570 - Current "angle" (max #$0F)
    ; $157C - Horizontal direction the sprite is facing.
    ; $1602 - Current animation frame for the parachute. 0 = normal, 1 = tilt left, 2 = tilt right
    ;          For the parachute's subroutine, values are C (normal) and D (tilted).
    
ParachuteSprites:               ;-----------| Para-Goomba MAIN / Para-Bomb MAIN
    LDA.w $14C8,X               ;$01D4FB    |\ 
    CMP.b #$08                  ;$01D4FE    || Skip to graphics if dead.
    BEQ CODE_01D505             ;$01D500    ||
    JMP CODE_01D671             ;$01D502    |/

CODE_01D505:
    LDA $9D                     ;$01D505    |\ 
    BNE CODE_01D558             ;$01D507    || Skip movement if game frozen or landing on the ground.
    LDA.w $1540,X               ;$01D509    ||
    BNE CODE_01D558             ;$01D50C    |/
    LDA $13                     ;$01D50E    |\ 
    LSR                         ;$01D510    ||
    BCC CODE_01D51A             ;$01D511    || Move downwards one pixel every two frames.
    INC $D8,X                   ;$01D513    ||
    BNE CODE_01D51A             ;$01D515    ||
    INC.w $14D4,X               ;$01D517    |/
CODE_01D51A:                    ;           |
    LDA.w $151C,X               ;$01D51A    |\ Skip horizontal movement if the sprite hit a wall.
    BNE CODE_01D558             ;$01D51D    |/
    LDA $13                     ;$01D51F    |\ 
    LSR                         ;$01D521    ||
    BCC CODE_01D53A             ;$01D522    ||
    LDA $C2,X                   ;$01D524    ||
    AND.b #$01                  ;$01D526    ||
    TAY                         ;$01D528    || Every two frames, increase/decrease the current angle.
    LDA.w $1570,X               ;$01D529    || If at the maximum, invert direction of movement.
    CLC                         ;$01D52C    ||
    ADC.w DATA_01D4E7,Y         ;$01D52D    ||
    STA.w $1570,X               ;$01D530    ||
    CMP.w DATA_01D4E9,Y         ;$01D533    ||
    BNE CODE_01D53A             ;$01D536    ||
    INC $C2,X                   ;$01D538    |/
CODE_01D53A:                    ;           |
    LDA $B6,X                   ;$01D53A    |\ 
    PHA                         ;$01D53C    ||
    LDY.w $1570,X               ;$01D53D    ||
    LDA $C2,X                   ;$01D540    ||
    LSR                         ;$01D542    ||
    LDA.w DATA_01D4EB,Y         ;$01D543    ||
    BCC CODE_01D54B             ;$01D546    ||
    EOR.b #$FF                  ;$01D548    || Update X position, using the angle and current direction to find the X speed.
    INC A                       ;$01D54A    ||
CODE_01D54B:                    ;           ||
    CLC                         ;$01D54B    ||
    ADC $B6,X                   ;$01D54C    ||
    STA $B6,X                   ;$01D54E    ||
    JSR SubSprXPosNoGrvty       ;$01D550    ||
    PLA                         ;$01D553    ||
    STA $B6,X                   ;$01D554    |/
    BRA CODE_01D558             ;$01D556    |

CODE_01D558:                    ;```````````| Handle the parachute's graphics.
    JSR SubOffscreen0Bnk1       ;$01D558    | Process offscreen from -$40 to +$30.
    JMP CODE_01D5B3             ;$01D55B    | Draw GFX and interact with Mario.


DATA_01D55E:                    ;$01D55E    | Animation frames for the parachute, indexed by the sprite's angle ($1570).
    db $0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C
    db $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D

DATA_01D56E:                    ;$01D56E    | Horizontal directions for the frames designated above.
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $01,$01,$01,$01,$01,$01,$01,$01
    
DATA_01D57E:                    ;$01D57E    | X offsets (low) for the Goomba/Bob-omb.
    db $F8,$F8,$FA,$FA,$FC,$FC,$FE,$FE
    db $02,$02,$04,$04,$06,$06,$08,$08
DATA_01D58E:                    ;$01D58E    | X offsets (high) for the Goomba/Bob-omb.
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $00,$00,$00,$00,$00,$00,$00,$00

DATA_01D59E:                    ;$01D59E    | Y offsets for the Goomba/Bob-omb from the parachute.
    db $0E,$0E,$0F,$0F,$10,$10,$10,$10
    db $10,$10,$10,$10,$0F,$0F,$0E,$0E

DATA_01D5AE:                    ;$01D5AE    | Sprite numbers for the parachute sprites to turn into.
    db $0F,$0D

DATA_01D5B0:                    ;$01D5B0    | YXPPCCCT data indexes of each frame for the Goomba/Bob-omb's draw call.
    db $01,$05,$00

CODE_01D5B3:                    ;-----------| Parachute sprite GFX routine.
    STZ.w $185E                 ;$01D5B3    |\\ 
    LDY.b #$F0                  ;$01D5B6    |||
    LDA.w $1540,X               ;$01D5B8    |||
    BEQ CODE_01D5C7             ;$01D5BB    |||
    LSR                         ;$01D5BD    |||
    EOR.b #$0F                  ;$01D5BE    |||
    STA.w $185E                 ;$01D5C0    |||
    CLC                         ;$01D5C3    |||
    ADC.b #$F0                  ;$01D5C4    ||| Get vertical position for the parachute.
    TAY                         ;$01D5C6    ||| Normally one tile above the sprite;
CODE_01D5C7:                    ;           |||  when landing, sinks into it instead.
    STY $00                     ;$01D5C7    |||
    LDA $D8,X                   ;$01D5C9    |||
    PHA                         ;$01D5CB    |||
    CLC                         ;$01D5CC    |||
    ADC $00                     ;$01D5CD    |||
    STA $D8,X                   ;$01D5CF    |||
    LDA.w $14D4,X               ;$01D5D1    |||
    PHA                         ;$01D5D4    |||
    ADC.b #$FF                  ;$01D5D5    |||
    STA.w $14D4,X               ;$01D5D7    ||/
    LDA.w $15F6,X               ;$01D5DA    ||\ 
    PHA                         ;$01D5DD    ||| Set the parachute's palette.
    AND.b #$F1                  ;$01D5DE    |||
    ORA.b #$06                  ;$01D5E0    |||| Palette to use.
    STA.w $15F6,X               ;$01D5E2    ||/
    LDY.w $1570,X               ;$01D5E5    ||\ 
    LDA.w DATA_01D55E,Y         ;$01D5E8    ||| Get animation frame/direction for the parachute.
    STA.w $1602,X               ;$01D5EB    |||  0C = normal, 0D = tilted.
    LDA.w DATA_01D56E,Y         ;$01D5EE    |||
    STA.w $157C,X               ;$01D5F1    ||/
    JSR SubSprGfx2Entry1        ;$01D5F4    ||] Draw a 16x16 tile.
    PLA                         ;$01D5F7    ||
    STA.w $15F6,X               ;$01D5F8    |/
    LDA.w $15EA,X               ;$01D5FB    |
    CLC                         ;$01D5FE    |
    ADC.b #$04                  ;$01D5FF    |
    STA.w $15EA,X               ;$01D601    |
    LDY.w $1570,X               ;$01D604    |\ 
    LDA $E4,X                   ;$01D607    ||\ 
    PHA                         ;$01D609    |||
    CLC                         ;$01D60A    |||
    ADC.w DATA_01D57E,Y         ;$01D60B    |||
    STA $E4,X                   ;$01D60E    ||| Get horizontal position for the Goomba/Bob-omb.
    LDA.w $14E0,X               ;$01D610    |||
    PHA                         ;$01D613    |||
    ADC.w DATA_01D58E,Y         ;$01D614    |||
    STA.w $14E0,X               ;$01D617    ||/
    STZ $00                     ;$01D61A    ||\ 
    LDA.w DATA_01D59E,Y         ;$01D61C    |||
    SEC                         ;$01D61F    |||
    SBC.w $185E                 ;$01D620    |||
    BPL CODE_01D627             ;$01D623    |||
    DEC $00                     ;$01D625    |||
CODE_01D627:                    ;           ||| Get vertical position for the Goomba/Bob-omb, offset from the parachute.
    CLC                         ;$01D627    ||| 
    ADC $D8,X                   ;$01D628    |||
    STA $D8,X                   ;$01D62A    |||
    LDA.w $14D4,X               ;$01D62C    |||
    ADC $00                     ;$01D62F    |||
    STA.w $14D4,X               ;$01D631    ||/
    LDA.w $1602,X               ;$01D634    ||\ 
    SEC                         ;$01D637    |||
    SBC.b #$0C                  ;$01D638    |||
    CMP.b #$01                  ;$01D63A    |||
    BNE CODE_01D642             ;$01D63C    ||| Get animation frame for the Goomba/Bob-omb.
    CLC                         ;$01D63E    |||  00 = normal, 01 = tilted left, 02 = tilted right.
    ADC.w $157C,X               ;$01D63F    |||
CODE_01D642:                    ;           |||
    STA.w $1602,X               ;$01D642    ||/
    LDA.w $1540,X               ;$01D645    ||\ 
    BEQ CODE_01D64D             ;$01D648    ||| If it landed on the ground, clear the animation frame.
    STZ.w $1602,X               ;$01D64A    ||/
CODE_01D64D:                    ;           ||
    LDY.w $1602,X               ;$01D64D    ||\ 
    LDA.w DATA_01D5B0,Y         ;$01D650    ||| Draw four 8x8s.
    JSR SubSprGfx0Entry0        ;$01D653    |//
    JSR SubSprSprPMarioSpr      ;$01D656    | Process interaction with Mario and other sprites.
    LDA.w $1540,X               ;$01D659    |\ 
    BEQ CODE_01D693             ;$01D65C    || Branch depending on whether the sprite has landed or in the process of landing.
    DEC A                       ;$01D65E    ||
    BNE CODE_01D681             ;$01D65F    |/
    STZ $AA,X                   ;$01D661    |\ 
    PLA                         ;$01D663    ||
    PLA                         ;$01D664    ||
    PLA                         ;$01D665    ||
    STA.w $14D4,X               ;$01D666    ||
    PLA                         ;$01D669    ||
    STA $D8,X                   ;$01D66A    ||
    LDA.b #$80                  ;$01D66C    ||
    STA.w $1540,X               ;$01D66E    || Turn the sprite into a Bob-omb/Goomba, and set its stun timer.
CODE_01D671:                    ;           ||
    LDA $9E,X                   ;$01D671    ||
    SEC                         ;$01D673    ||
    SBC.b #$3F                  ;$01D674    ||
    TAY                         ;$01D676    ||
    LDA.w DATA_01D5AE,Y         ;$01D677    ||
    STA $9E,X                   ;$01D67A    ||
    JSL LoadSpriteTables        ;$01D67C    |/
    RTS                         ;$01D680    |

CODE_01D681:                    ;```````````| Landed on the ground, waiting for parachute to fall.
    JSR CODE_019140             ;$01D681    |\ 
    JSR IsOnGround              ;$01D684    ||
    BEQ CODE_01D68C             ;$01D687    ||
    JSR SetSomeYSpeed           ;$01D689    || Useless. (likely leftover from an older version)
CODE_01D68C:                    ;           ||
    JSR SubSprYPosNoGrvty       ;$01D68C    ||
    INC $AA,X                   ;$01D68F    |/
    BRA CODE_01D6B5             ;$01D691    | Restore position values.

CODE_01D693:                    ;```````````| Hasn't landed.
    TXA                         ;$01D693    |\ 
    EOR $13                     ;$01D694    ||
    LSR                         ;$01D696    || Process object interaction every other frame.
    BCC CODE_01D6B5             ;$01D697    ||
    JSR CODE_019140             ;$01D699    ||
    JSR IsTouchingObjSide       ;$01D69C    ||\ 
    BEQ CODE_01D6AB             ;$01D69F    |||
    LDA.b #$01                  ;$01D6A1    ||| If it hits the side of a block, lock its angle at #$07.
    STA.w $151C,X               ;$01D6A3    |||
    LDA.b #$07                  ;$01D6A6    |||
    STA.w $1570,X               ;$01D6A8    ||/
CODE_01D6AB:                    ;           ||
    JSR IsOnGround              ;$01D6AB    ||\ 
    BEQ CODE_01D6B5             ;$01D6AE    ||| If it hits the ground, start the "falling parachute" timer.
    LDA.b #$20                  ;$01D6B0    |||
    STA.w $1540,X               ;$01D6B2    |//
CODE_01D6B5:                    ;           |
    PLA                         ;$01D6B5    |\ 
    STA.w $14E0,X               ;$01D6B6    ||
    PLA                         ;$01D6B9    ||
    STA $E4,X                   ;$01D6BA    || Restore position values.
    PLA                         ;$01D6BC    ||
    STA.w $14D4,X               ;$01D6BD    ||
    PLA                         ;$01D6C0    ||
    STA $D8,X                   ;$01D6C1    |/
Return01D6C3:                   ;           |
    RTS                         ;$01D6C3    |




    
InitLineRope:                   ;-----------| Line-guided rope INIT
    CPX.b #$06                  ;$01D6C4    |\ 
    BCC CODE_01D6E0             ;$01D6C6    || If in slot 06+
    LDA.w $1692                 ;$01D6C8    ||  and the sprite memory setting is 01,
    BEQ CODE_01D6E0             ;$01D6CB    ||  make the rope long.
    INC.w $1662,X               ;$01D6CD    |/
    BRA CODE_01D6E0             ;$01D6D0    |



InitLinePlat:                   ;-----------| Brown/checkered line-guided platform INIT
    LDA $E4,X                   ;$01D6D2    |\ 
    AND.b #$10                  ;$01D6D4    ||
    EOR.b #$10                  ;$01D6D6    || Change type depending on X position.
    STA.w $1602,X               ;$01D6D8    ||
    BEQ CODE_01D6E0             ;$01D6DB    ||
    INC.w $1662,X               ;$01D6DD    |/
CODE_01D6E0:                    ;           |
    INC.w $1540,X               ;$01D6E0    |
    JSR LineFuzzyPPlats         ;$01D6E3    |\ Run MAIN routine, twice for some reason.
    JSR LineFuzzyPPlats         ;$01D6E6    |/
    INC.w $1626,X               ;$01D6E9    | Make stationary.
Return01D6EC:                   ;           |
    RTS                         ;$01D6EC    |



InitLineGuidedSpr:              ;-----------| Chainsaw, Grinder, and Fuzzy INIT
    INC.w $187B,X               ;$01D6ED    | Make move 1.5 times as fast.
    LDA $E4,X                   ;$01D6F0    |\ 
    AND.b #$10                  ;$01D6F2    ||
    BNE CODE_01D707             ;$01D6F4    ||
    LDA $E4,X                   ;$01D6F6    ||
    SEC                         ;$01D6F8    ||
    SBC.b #$40                  ;$01D6F9    ||
    STA $E4,X                   ;$01D6FB    ||
    LDA.w $14E0,X               ;$01D6FD    || If in an even X position,
    SBC.b #$01                  ;$01D700    ||  spawn 20 tiles to the left, and set it to go right/down.
    STA.w $14E0,X               ;$01D702    || Else,
    BRA InitLineBrwnPlat        ;$01D705    ||  spawn one tile to the right, and set to go left/up.
CODE_01D707:                    ;           ||
    INC.w $157C,X               ;$01D707    ||
    LDA $E4,X                   ;$01D70A    ||
    CLC                         ;$01D70C    ||
    ADC.b #$0F                  ;$01D70D    ||
    STA $E4,X                   ;$01D70F    |/
InitLineBrwnPlat:               ;-----------| Line-guided brown platform INIT
    LDA.b #$02                  ;$01D711    |
    STA.w $1540,X               ;$01D713    |
    RTS                         ;$01D716    |



DATA_01D717:                    ;$01D717    | X offsets of the smoke spawned by the rope/saw mechanisms.
    db $F8,$00

    ; Line-guided sprite misc RAM:
    ; $C2   - State of the sprite.
    ;          0 = end of tile, 1 = on rope, 2 = falling
    ; $151C - Base index to the current line guide's offset table at $07F9DB, low.
    ; $1528 - Base index to the current line guide's offset table at $07F9DB, high.
    ; $1534 - "Left" offset from the base index to $07F9DB. When moving D/R, increments each frame.
    ; $1540 - Timer to briefly prevent latching onto a rope after falling off one. Set to #$10 when starting to fall.
    ;          Also briefly set to #$01/#$02 during initialization.
    ; $154C - Disable interaction with Mario.
    ;          Set to #$08 for contact with enemies.
    ;          Set to #$10 when jumping off a rope.
    ; $1570 - "Right" offset from the base index to $07F9DB. When moving U/L, decrements each frame.
    ; $157C - Direction of movement. 0 = down/right, 1 = up/left.
    ; $1602 - Checker/brown platform: type of platform. 00 = brown, 10 = checkerboard.
    ; $160E - Current rope tile the sprite is touching, minus 76.
    ; $1626 - Stationary flag. When 0, the sprite is moving.
    ; $163E - In contact with Mario flag. Set to #$03 when true.
    ; $187B - When set, increases the sprite's speed by 1.5 times.

LineRopePChainsaw:              ;-----------| Line-guided rope MAIN / Chainsaw MAIN
    TXA                         ;$01D719    |\ 
    ASL                         ;$01D71A    ||
    ASL                         ;$01D71B    ||
    EOR $14                     ;$01D71C    ||
    STA $02                     ;$01D71E    ||
    AND.b #$07                  ;$01D720    ||
    ORA $9D                     ;$01D722    ||
    BNE LineGrinder             ;$01D724    ||
    LDA $02                     ;$01D726    || Draw smoke at the sprite's position every 8 frames.
    LSR                         ;$01D728    ||
    LSR                         ;$01D729    ||
    LSR                         ;$01D72A    ||
    AND.b #$01                  ;$01D72B    ||
    TAY                         ;$01D72D    ||
    LDA.w DATA_01D717,Y         ;$01D72E    ||
    STA $00                     ;$01D731    ||
    LDA.b #$F2                  ;$01D733    ||| Y offset of the smoke.
    STA $01                     ;$01D735    ||
    JSR CODE_018063             ;$01D737    |/
LineGrinder:                    ;-----------| Grinder MAIN
    LDA $13                     ;$01D73A    |\ 
    AND.b #$07                  ;$01D73C    ||
    ORA.w $1626,X               ;$01D73E    ||
    ORA $9D                     ;$01D741    || Play sound effect every 8 frames.
    BNE LineFuzzyPPlats         ;$01D743    ||
    LDA.b #$04                  ;$01D745    ||\ SFX for line-guided sprites.
    STA.w $1DFA                 ;$01D747    |//
LineFuzzyPPlats:                ;-----------| Fuzzy MAIN / line-guided platform MAIN
    JMP CODE_01D9A7             ;$01D74A    |



CODE_01D74D:                    ;-----------| Generic line-guidance routine.
    JSR SubOffscreen1Bnk1       ;$01D74D    | Process offscreen from -$40 to +$A0.
    LDA.w $1540,X               ;$01D750    |\ 
    BNE CODE_01D75C             ;$01D753    || Return if the sprite did not just fall off a rope
    LDA $9D                     ;$01D755    ||  and either the game is frozen or the sprite is stationary.
    ORA.w $1626,X               ;$01D757    ||
    BNE Return01D6EC            ;$01D75A    |/
CODE_01D75C:                    ;           |
    LDA $C2,X                   ;$01D75C    |
    JSL ExecutePtr              ;$01D75E    |

Ptrs01D762:                     ;$01D762    | Line-guided sprite state pointers.
    dw CODE_01D7F4              ; 0 - Reached end of tile
    dw CODE_01D768              ; 1 - On rope.
    dw CODE_01DB44              ; 2 - Falling



CODE_01D768:                    ;-----------| State 1: On rope.
    LDA $9D                     ;$01D768    |\ Return if the game is frozen.
    BNE Return01D791            ;$01D76A    |/
    LDA.w $157C,X               ;$01D76C    |\ Branch if moving up/left.
    BNE CODE_01D792             ;$01D76F    |/
    LDY.w $1534,X               ;$01D771    |\ 
    JSR CODE_01D7B0             ;$01D774    || Update position (D/R).
    INC.w $1534,X               ;$01D777    |/
    LDA.w $187B,X               ;$01D77A    |\ 
    BEQ CODE_01D787             ;$01D77D    ||
    LDA $13                     ;$01D77F    || Make fuzzies/grinders/chainsaws move 1.5 times faster.
    LSR                         ;$01D781    ||
    BCC CODE_01D787             ;$01D782    ||
    INC.w $1534,X               ;$01D784    |/
CODE_01D787:                    ;           |
    LDA.w $1534,X               ;$01D787    |\ 
    CMP.w $1570,X               ;$01D78A    || If at the end of the current tile, switch to state 0.
    BCC Return01D791            ;$01D78D    ||
    STZ $C2,X                   ;$01D78F    |/
Return01D791:                   ;           |
    RTS                         ;$01D791    |

CODE_01D792:                    ;```````````| Moving up/left.
    LDY.w $1570,X               ;$01D792    |\ 
    DEY                         ;$01D795    || Update position (U/L).
    JSR CODE_01D7B0             ;$01D796    ||
    DEC.w $1570,X               ;$01D799    |/
    BEQ CODE_01D7AD             ;$01D79C    |\ 
    LDA.w $187B,X               ;$01D79E    ||
    BEQ Return01D7AF            ;$01D7A1    ||
    LDA $13                     ;$01D7A3    ||
    LSR                         ;$01D7A5    || Make fuzzies/grinders/chainsaws move 1.5 times faster.
    BCC Return01D7AF            ;$01D7A6    ||  If at the end of the current tile, switch to state 0.
    DEC.w $1570,X               ;$01D7A8    ||
    BNE Return01D7AF            ;$01D7AB    ||
CODE_01D7AD:                    ;           ||
    STZ $C2,X                   ;$01D7AD    |/
Return01D7AF:                   ;           |
    RTS                         ;$01D7AF    |



CODE_01D7B0:                    ;-----------| Subroutine to update a line-guided sprite's position.
    PHB                         ;$01D7B0    | ; Load pointer offset to Y before running.
    LDA.b #$07                  ;$01D7B1    |\ 
    PHA                         ;$01D7B3    ||
    PLB                         ;$01D7B4    ||
    LDA.w $151C,X               ;$01D7B5    || Get base pointer to $07F9DB.
    STA $04                     ;$01D7B8    ||
    LDA.w $1528,X               ;$01D7BA    ||
    STA $05                     ;$01D7BD    |/
    LDA ($04),Y                 ;$01D7BF    |\ 
    AND.b #$0F                  ;$01D7C1    ||
    STA $06                     ;$01D7C3    ||
    LDA ($04),Y                 ;$01D7C5    ||
    PLB                         ;$01D7C7    || Get new X and Y offset for the current tile.
    LSR                         ;$01D7C8    ||
    LSR                         ;$01D7C9    ||
    LSR                         ;$01D7CA    ||
    LSR                         ;$01D7CB    ||
    STA $07                     ;$01D7CC    |/
    LDA $D8,X                   ;$01D7CE    |\ 
    AND.b #$F0                  ;$01D7D0    ||
    CLC                         ;$01D7D2    || Update Y position.
    ADC $07                     ;$01D7D3    ||
    STA $D8,X                   ;$01D7D5    |/
    LDA $E4,X                   ;$01D7D7    |\ 
    AND.b #$F0                  ;$01D7D9    ||
    CLC                         ;$01D7DB    || Update X position.
    ADC $06                     ;$01D7DC    ||
    STA $E4,X                   ;$01D7DE    |/
    RTS                         ;$01D7E0    |



DATA_01D7E1:                    ;$01D7E1    | Search X offsets for finding a line guide.
    db $FC,$04,$FC,$04                      ; Default order (backwards): v>, ^>, v<, ^<
DATA_01D7E5:                    ;$01D7E5    | Search X offsets, high byte.
    db $FF,$00,$FF,$00

DATA_01D7E9:                    ;$01D7E9    | Search Y offsets for finding a line guide.
    db $FC,$FC,$04,$04
DATA_01D7ED:                    ;$01D7ED    | Search Y offsets, high byte.
    db $FF,$FF,$00,$00

CODE_01D7F1:
    JMP CODE_01D89F             ;$01D7F1    |

CODE_01D7F4:                    ;-----------| State 0: Reached the end of tile. Search for next rope tile.
    LDY.b #$03                  ;$01D7F4    |\ 
CODE_01D7F6:                    ;           || Check if touching a line guide.
    STY.w $1695                 ;$01D7F6    ||
    LDA $E4,X                   ;$01D7F9    ||\ 
    CLC                         ;$01D7FB    |||
    ADC.w DATA_01D7E1,Y         ;$01D7FC    |||
    STA $02                     ;$01D7FF    ||| Get position to check for a rope tile.
    LDA.w $14E0,X               ;$01D801    ||| $00 = Tile Y pos (lo)
    ADC.w DATA_01D7E5,Y         ;$01D804    ||| $01 = Tile Y pos (hi)
    STA $03                     ;$01D807    ||| $02 = Tile X pos (lo)
    LDA $D8,X                   ;$01D809    ||| $03 = Tile X pos (hi)
    CLC                         ;$01D80B    |||
    ADC.w DATA_01D7E9,Y         ;$01D80C    |||
    STA $00                     ;$01D80F    |||
    LDA.w $14D4,X               ;$01D811    |||
    ADC.w DATA_01D7ED,Y         ;$01D814    |||
    STA $01                     ;$01D817    ||/
    LDA.w $1540,X               ;$01D819    ||\ 
    BNE CODE_01D83A             ;$01D81C    |||
    LDA $00                     ;$01D81E    |||
    AND.b #$F0                  ;$01D820    |||
    STA $04                     ;$01D822    |||
    LDA $D8,X                   ;$01D824    |||
    AND.b #$F0                  ;$01D826    ||| Check whether an actual new block is being looked at.
    CMP $04                     ;$01D828    |||  $04 = Y position of block being looked at.
    BNE CODE_01D83A             ;$01D82A    |||  $05 = X position of block being locked at, if not looking at a new row.
    LDA $02                     ;$01D82C    ||| If not looking at a new block, skip to the next search offset.
    AND.b #$F0                  ;$01D82E    |||
    STA $05                     ;$01D830    |||
    LDA $E4,X                   ;$01D832    |||
    AND.b #$F0                  ;$01D834    |||
    CMP $05                     ;$01D836    |||
    BEQ CODE_01D861             ;$01D838    ||/
CODE_01D83A:                    ;           ||
    JSR CODE_01D94D             ;$01D83A    ||\ Branch if the tile being touched is not on page 0.
    BNE CODE_01D7F1             ;$01D83D    ||/  (broken?)
    LDA.w $1693                 ;$01D83F    ||\ 
    CMP.b #$94                  ;$01D842    |||
    BEQ CODE_01D851             ;$01D844    |||
    CMP.b #$95                  ;$01D846    |||
    BNE CODE_01D856             ;$01D848    |||
    LDA.w $14AF                 ;$01D84A    ||| Decide whether the tile is a rope tile, and branch if so.
    BEQ CODE_01D861             ;$01D84D    |||  094: Rope tile if ON/OFF switch is on.
    BNE CODE_01D856             ;$01D84F    |||  095: Rope tile if ON/OFF switch is off.
CODE_01D851:                    ;           |||  076-093, 096-099: Rope tiles.
    LDA.w $14AF                 ;$01D851    |||  Anything else: Not a rope tile.
    BNE CODE_01D861             ;$01D854    |||
CODE_01D856:                    ;           |||
    LDA.w $1693                 ;$01D856    |||
    CMP.b #$76                  ;$01D859    |||
    BCC CODE_01D861             ;$01D85B    |||
    CMP.b #$9A                  ;$01D85D    |||
    BCC CODE_01D895             ;$01D85F    |//
CODE_01D861:                    ;```````````| Tile is not a rope tile.
    LDY.w $1695                 ;$01D861    |\ 
    DEY                         ;$01D864    || Repeat for all the search offsets.
    BPL CODE_01D7F6             ;$01D865    |/
    LDA $C2,X                   ;$01D867    |\ 
    CMP.b #$02                  ;$01D869    || If already falling, return.
    BEQ Return01D894            ;$01D86B    |/
    LDA.b #$02                  ;$01D86D    |\ 
    STA $C2,X                   ;$01D86F    ||
    LDY.w $160E,X               ;$01D871    ||
    LDA.w $157C,X               ;$01D874    ||
    BEQ CODE_01D87E             ;$01D877    ||
    TYA                         ;$01D879    ||
    CLC                         ;$01D87A    ||
    ADC.b #$20                  ;$01D87B    ||
    TAY                         ;$01D87D    ||
CODE_01D87E:                    ;           || Set X/Y speed for the sprite and set to falling.
    LDA.w DATA_01DD11,Y         ;$01D87E    ||
    BPL CODE_01D884             ;$01D881    ||
    ASL                         ;$01D883    ||
CODE_01D884:                    ;           ||
    PHY                         ;$01D884    ||
    ASL                         ;$01D885    ||
    STA $AA,X                   ;$01D886    ||
    PLY                         ;$01D888    ||
    LDA.w DATA_01DD51,Y         ;$01D889    ||
    ASL                         ;$01D88C    ||
    STA $B6,X                   ;$01D88D    |/
    LDA.b #$10                  ;$01D88F    |\\ How long to prevent grabbing onto a rope again.
    STA.w $1540,X               ;$01D891    |/
Return01D894:                   ;           |
    RTS                         ;$01D894    |


CODE_01D895:                    ;```````````| Tile is a rope tile (076-099).
    PHA                         ;$01D895    |\ 
    SEC                         ;$01D896    ||
    SBC.b #$76                  ;$01D897    || Normalize index.
    TAY                         ;$01D899    ||
    PLA                         ;$01D89A    |/
    CMP.b #$96                  ;$01D89B    |\ 
    BCC CODE_01D8A4             ;$01D89D    ||
CODE_01D89F:                    ;           || Don't move the sprite if running into tiles 096-099.
    LDY.w $160E,X               ;$01D89F    ||
    BRA CODE_01D8C8             ;$01D8A2    |/
CODE_01D8A4:                    ;           |
    LDA $D8,X                   ;$01D8A4    |\ 
    STA $08                     ;$01D8A6    ||
    LDA.w $14D4,X               ;$01D8A8    ||
    STA $09                     ;$01D8AB    ||
    LDA $E4,X                   ;$01D8AD    ||
    STA $0A                     ;$01D8AF    || Move the sprite onto the rope, and track some free RAM:
    LDA.w $14E0,X               ;$01D8B1    || $08 - Original Y pos (lo)
    STA $0B                     ;$01D8B4    || $09 - Original Y pos (hi)
    LDA $00                     ;$01D8B6    || $0A - Original X pos (lo)
    STA $D8,X                   ;$01D8B8    || $0B - Original X pos (hi)
    LDA $01                     ;$01D8BA    ||
    STA.w $14D4,X               ;$01D8BC    ||
    LDA $02                     ;$01D8BF    ||
    STA $E4,X                   ;$01D8C1    ||
    LDA $03                     ;$01D8C3    ||
    STA.w $14E0,X               ;$01D8C5    |/
CODE_01D8C8:                    ;           |
    PHB                         ;$01D8C8    |\ 
    LDA.b #$07                  ;$01D8C9    ||
    PHA                         ;$01D8CB    ||
    PLB                         ;$01D8CC    ||
    LDA.w DATA_07FBF3,Y         ;$01D8CD    || Set base index to $07F9DB for the tile.
    STA.w $151C,X               ;$01D8D0    || 
    LDA.w DATA_07FC13,Y         ;$01D8D3    ||
    STA.w $1528,X               ;$01D8D6    ||
    PLB                         ;$01D8D9    |/
    LDA.w DATA_01DCD1,Y         ;$01D8DA    |\ 
    STA.w $1570,X               ;$01D8DD    || Set start and end offsets.
    STZ.w $1534,X               ;$01D8E0    |/
    TYA                         ;$01D8E3    |\ Track the current tile number.
    STA.w $160E,X               ;$01D8E4    |/
    LDA.w $1540,X               ;$01D8E7    |\ Unused? I don't think this code can run with this set.
    BNE CODE_01D933             ;$01D8EA    |/
    STZ.w $157C,X               ;$01D8EC    |\ 
    LDA.w DATA_01DCF1,Y         ;$01D8EF    ||
    BEQ CODE_01D8FF             ;$01D8F2    ||
    TAY                         ;$01D8F4    ||
    LDA $D8,X                   ;$01D8F5    ||
    CPY.b #$01                  ;$01D8F7    ||
    BNE CODE_01D8FD             ;$01D8F9    ||
    EOR.b #$0F                  ;$01D8FB    ||
CODE_01D8FD:                    ;           || Decide whether to make the sprite move right or left on the rope.
    BRA CODE_01D901             ;$01D8FD    || Only moves left if:
CODE_01D8FF:                    ;           ||  - Meets condition decided by $01DCF1
    LDA $E4,X                   ;$01D8FF    ||  - Not coming from falling state (i.e. already on the rope).
CODE_01D901:                    ;           ||
    AND.b #$0F                  ;$01D901    ||
    CMP.b #$0A                  ;$01D903    ||
    BCC CODE_01D910             ;$01D905    ||
    LDA $C2,X                   ;$01D907    ||
    CMP.b #$02                  ;$01D909    ||
    BEQ CODE_01D910             ;$01D90B    ||
    INC.w $157C,X               ;$01D90D    |/
CODE_01D910:                    ;           |
    LDA $D8,X                   ;$01D910    |\ 
    STA $0C                     ;$01D912    ||
    LDA $E4,X                   ;$01D914    ||
    STA $0D                     ;$01D916    ||
    JSR CODE_01D768             ;$01D918    ||
    LDA $0C                     ;$01D91B    ||
    SEC                         ;$01D91D    ||
    SBC $D8,X                   ;$01D91E    ||
    CLC                         ;$01D920    ||
    ADC.b #$08                  ;$01D921    || If not in range of the rope's "start" position, skip it.
    CMP.b #$10                  ;$01D923    ||
    BCS CODE_01D938             ;$01D925    ||
    LDA $0D                     ;$01D927    ||
    SEC                         ;$01D929    ||
    SBC $E4,X                   ;$01D92A    ||
    CLC                         ;$01D92C    ||
    ADC.b #$08                  ;$01D92D    ||
    CMP.b #$10                  ;$01D92F    ||
    BCS CODE_01D938             ;$01D931    |/
CODE_01D933:                    ;```````````| Rope tile successfully found.
    LDA.b #$01                  ;$01D933    |\ Switch to on-rope state.
    STA $C2,X                   ;$01D935    |/
    RTS                         ;$01D937    |

CODE_01D938:                    ;```````````| Not touching the start of the rope.
    LDA $08                     ;$01D938    |\ 
    STA $D8,X                   ;$01D93A    ||
    LDA $09                     ;$01D93C    ||
    STA.w $14D4,X               ;$01D93E    || Restore original position.
    LDA $0A                     ;$01D941    ||
    STA $E4,X                   ;$01D943    ||
    LDA $0B                     ;$01D945    ||
    STA.w $14E0,X               ;$01D947    |/
    JMP CODE_01D861             ;$01D94A    |



CODE_01D94D:                    ;-----------| Line-guided sprite routine to find the tile the sprite is about to touch.
    LDA $00                     ;$01D94D    |\ 
    AND.b #$F0                  ;$01D94F    ||
    STA $06                     ;$01D951    ||
    LDA $02                     ;$01D953    ||
    LSR                         ;$01D955    || First push: $0X
    LSR                         ;$01D956    || Second push: $YX
    LSR                         ;$01D957    || (where Y/X are the tile's position)
    LSR                         ;$01D958    ||
    PHA                         ;$01D959    ||
    ORA $06                     ;$01D95A    ||
    PHA                         ;$01D95C    |/
    LDA $5B                     ;$01D95D    |
    AND.b #$01                  ;$01D95F    |
    BEQ CODE_01D977             ;$01D961    |
    PLA                         ;$01D963    |\ 
    LDX $01                     ;$01D964    ||
    CLC                         ;$01D966    ||
    ADC.l DATA_00BA80,X         ;$01D967    ||
    STA $05                     ;$01D96B    || Get tile pointer (vertical level).
    LDA.l DATA_00BABC,X         ;$01D96D    ||
    ADC $03                     ;$01D971    ||
    STA $06                     ;$01D973    ||
    BRA CODE_01D989             ;$01D975    |/
CODE_01D977:                    ;           |
    PLA                         ;$01D977    |\ 
    LDX $03                     ;$01D978    ||
    CLC                         ;$01D97A    ||
    ADC.l DATA_00BA60,X         ;$01D97B    || Get tile pointer (horizontal level).
    STA $05                     ;$01D97F    ||
    LDA.l DATA_00BA9C,X         ;$01D981    ||
    ADC $01                     ;$01D985    ||
    STA $06                     ;$01D987    |/
CODE_01D989:                    ;           |
    LDA.b #$7E                  ;$01D989    |\ 
    STA $07                     ;$01D98B    ||
    LDX.w $15E9                 ;$01D98D    ||
    LDA [$05]                   ;$01D990    ||
    STA.w $1693                 ;$01D992    ||
    INC $07                     ;$01D995    ||
    LDA [$05]                   ;$01D997    || Get tile number in $1693, high byte in A?
    PLY                         ;$01D999    ||  Seems to only work in certain X positions...?
    STY $05                     ;$01D99A    ||
    PHA                         ;$01D99C    ||
    LDA $05                     ;$01D99D    ||
    AND.b #$07                  ;$01D99F    ||
    TAY                         ;$01D9A1    ||
    PLA                         ;$01D9A2    ||
    AND.w DATA_018000,Y         ;$01D9A3    |/
    RTS                         ;$01D9A6    |



CODE_01D9A7:                    ;-----------| Various line-guided sprite routines.
    LDA $9E,X                   ;$01D9A7    |\ 
    CMP.b #$64                  ;$01D9A9    ||\ Branch if the rope mechanism.
    BEQ CODE_01D9D3             ;$01D9AB    ||/
    CMP.b #$65                  ;$01D9AD    ||\ Branch if a line-guided platform.
    BCC CODE_01D9D0             ;$01D9AF    ||/
    CMP.b #$68                  ;$01D9B1    ||\ Branch if not a fuzzy (grinder, chainsaw). 
    BNE CODE_01D9BA             ;$01D9B3    |//
CODE_01D9B5:                    ;```````````| Fuzzy.
    JSR CODE_01DBD4             ;$01D9B5    |] Draw GFX.
    BRA CODE_01D9C1             ;$01D9B8    |


CODE_01D9BA:
    CMP.b #$67                  ;$01D9BA    |\ Branch if not a grinder.
    BNE CODE_01D9C6             ;$01D9BC    |/
CODE_01D9BE:                    ;```````````| Grinder.
    JSR CODE_01DC0B             ;$01D9BE    |] Draw GFX.
CODE_01D9C1:                    ;```````````| Fuzzy rejoins here.
    JSR MarioSprInteractRt      ;$01D9C1    |] Interact with Mario.
    BRA CODE_01D9CD             ;$01D9C4    | Run line-guided routines.


CODE_01D9C6:                    ;```````````| Chainsaw.
    JSR MarioSprInteractRt      ;$01D9C6    |] Interact with Mario.
    JSL CODE_03C263             ;$01D9C9    |] Draw GFX.
CODE_01D9CD:                    ;           |
    JMP CODE_01D74D             ;$01D9CD    | Run line-guided routines.


CODE_01D9D0:                    ;```````````| Platform.
    JMP CODE_01DAA2             ;$01D9D0    | Jump to MAIN.


CODE_01D9D3:                    ;```````````| Actual rope mechanism MAIN.
    JSR CODE_01DC54             ;$01D9D3    |] Draw GFX.
    LDA $E4,X                   ;$01D9D6    |\ 
    PHA                         ;$01D9D8    ||
    LDA $D8,X                   ;$01D9D9    ||
    PHA                         ;$01D9DB    ||
    JSR CODE_01D74D             ;$01D9DC    ||] Run line-guided routines.
    PLA                         ;$01D9DF    ||
    SEC                         ;$01D9E0    ||
    SBC $D8,X                   ;$01D9E1    ||
    EOR.b #$FF                  ;$01D9E3    || Track number of pixels the rope moved vertically and horizontally.
    INC A                       ;$01D9E5    ||
    STA.w $185E                 ;$01D9E6    ||
    PLA                         ;$01D9E9    ||
    SEC                         ;$01D9EA    ||
    SBC $E4,X                   ;$01D9EB    ||
    EOR.b #$FF                  ;$01D9ED    ||
    INC A                       ;$01D9EF    ||
    STA.w $18B6                 ;$01D9F0    |/
    LDA $77                     ;$01D9F3    |\ 
    AND.b #$03                  ;$01D9F5    || Return if Mario is blocked on either side.
    BNE Return01DA09            ;$01D9F7    |/
    JSR CODE_01A80F             ;$01D9F9    |\ Branch if Mario and the rope are in contact.
    BCS CODE_01DA0A             ;$01D9FC    |/
CODE_01D9FE:                    ;```````````| Not in contact with Mario.
    LDA.w $163E,X               ;$01D9FE    |\ 
    BEQ Return01DA09            ;$01DA01    || Clear flag for being able to grab the rope.
    STZ.w $163E,X               ;$01DA03    ||
    STZ.w $18BE                 ;$01DA06    |/
Return01DA09:                   ;           |
    RTS                         ;$01DA09    |

CODE_01DA0A:                    ;```````````| In contact with Mario.
    LDA.w $14C8,X               ;$01DA0A    |\ Clear climbing flag if the rope is despawning...?
    BEQ CODE_01DA37             ;$01DA0D    |/
    LDA.w $1470                 ;$01DA0F    |\ 
    ORA.w $187A                 ;$01DA12    || Return not in contact if Mario is carrying something.
    BNE CODE_01D9FE             ;$01DA15    |/
    LDA.b #$03                  ;$01DA17    |\ Set flag for being in contact with the rope. 
    STA.w $163E,X               ;$01DA19    |/
    LDA.w $154C,X               ;$01DA1C    |\ 
    BNE Return01DA8F            ;$01DA1F    ||
    LDA.w $18BE                 ;$01DA21    || Return if:
    BNE CODE_01DA2F             ;$01DA24    ||  - "Prevent climbing" flag set.
    LDA $15                     ;$01DA26    ||  - Not already on the rope and up isn't being pressed.
    AND.b #$08                  ;$01DA28    ||
    BEQ Return01DA8F            ;$01DA2A    ||
    STA.w $18BE                 ;$01DA2C    |/
CODE_01DA2F:                    ;```````````| Rope is being climbed.
    BIT $16                     ;$01DA2F    |\ Check if B is pressed. 
    BPL CODE_01DA3F             ;$01DA31    |/
    LDA.b #$B0                  ;$01DA33    |\\ Y speed given when jumping off a rope mechanism.
    STA $7D                     ;$01DA35    |/
CODE_01DA37:                    ;           |
    STZ.w $18BE                 ;$01DA37    | Clear climbing flag.
    LDA.b #$10                  ;$01DA3A    |\ Briefly prevent regrabbing the rope.
    STA.w $154C,X               ;$01DA3C    |/
CODE_01DA3F:                    ;```````````| Not jumping off.
    LDY.b #$00                  ;$01DA3F    |\ 
    LDA.w $185E                 ;$01DA41    ||
    BPL CODE_01DA47             ;$01DA44    ||
    DEY                         ;$01DA46    ||
CODE_01DA47:                    ;           ||
    CLC                         ;$01DA47    ||
    ADC $96                     ;$01DA48    ||
    STA $96                     ;$01DA4A    ||
    TYA                         ;$01DA4C    ||
    ADC $97                     ;$01DA4D    ||
    STA $97                     ;$01DA4F    || Move Mario's Y position with the rope.
    LDA $D8,X                   ;$01DA51    ||  Also, if he's too high up on the rope, move him downwards.
    STA $00                     ;$01DA53    ||
    LDA.w $14D4,X               ;$01DA55    ||
    STA $01                     ;$01DA58    ||
    REP #$20                    ;$01DA5A    ||
    LDA $96                     ;$01DA5C    ||
    SEC                         ;$01DA5E    ||
    SBC $00                     ;$01DA5F    ||
    CMP.w #$0000                ;$01DA61    ||
    BPL CODE_01DA68             ;$01DA64    ||
    INC $96                     ;$01DA66    |/
CODE_01DA68:                    ;           |
    SEP #$20                    ;$01DA68    |
    LDA.w $18B6                 ;$01DA6A    |\ 
    JSR CODE_01DA90             ;$01DA6D    ||
    LDA $E4,X                   ;$01DA70    ||
    SEC                         ;$01DA72    ||
    SBC.b #$08                  ;$01DA73    ||
    CMP $94                     ;$01DA75    ||
    BEQ CODE_01DA84             ;$01DA77    || Move Mario's X position with the rope.
    BPL CODE_01DA7F             ;$01DA79    ||  Also, center him onto the rope.
    LDA.b #$FF                  ;$01DA7B    ||
    BRA CODE_01DA81             ;$01DA7D    ||
CODE_01DA7F:                    ;           ||
    LDA.b #$01                  ;$01DA7F    ||
CODE_01DA81:                    ;           ||
    JSR CODE_01DA90             ;$01DA81    |/
CODE_01DA84:                    ;           |
    LDA.w $1626,X               ;$01DA84    |\ 
    BEQ Return01DA8F            ;$01DA87    || Make the rope start moving if not already.
    STZ.w $1626,X               ;$01DA89    ||
    STZ.w $1540,X               ;$01DA8C    |/
Return01DA8F:                   ;           |
    RTS                         ;$01DA8F    |


CODE_01DA90:                    ;-----------| Subroutine to shift Mario's X position along the rope. A contains the number of pixels to move.
    LDY.b #$00                  ;$01DA90    |
    CMP.b #$00                  ;$01DA92    |
    BPL CODE_01DA97             ;$01DA94    |
    DEY                         ;$01DA96    |
CODE_01DA97:                    ;           |
    CLC                         ;$01DA97    |
    ADC $94                     ;$01DA98    |
    STA $94                     ;$01DA9A    |
    TYA                         ;$01DA9C    |
    ADC $95                     ;$01DA9D    |
    STA $95                     ;$01DA9F    |
    RTS                         ;$01DAA1    |





CODE_01DAA2:                    ;-----------| Actual line-guided platform MAIN.
    LDY.b #$18                  ;$01DAA2    |\ 
    LDA.w $1602,X               ;$01DAA4    || Get platform size.
    BEQ CODE_01DAAB             ;$01DAA7    ||  Brown: 3 tiles
    LDY.b #$28                  ;$01DAA9    ||  Checkered: 5 tiles.
CODE_01DAAB:                    ;           ||
    STY $00                     ;$01DAAB    |/
    LDA $E4,X                   ;$01DAAD    |\ 
    PHA                         ;$01DAAF    ||
    SEC                         ;$01DAB0    ||
    SBC $00                     ;$01DAB1    ||
    STA $E4,X                   ;$01DAB3    ||
    LDA.w $14E0,X               ;$01DAB5    ||
    PHA                         ;$01DAB8    ||
    SBC.b #$00                  ;$01DAB9    ||
    STA.w $14E0,X               ;$01DABB    ||
    LDA $D8,X                   ;$01DABE    ||
    PHA                         ;$01DAC0    || Center the platform's graphics and move up half a tile.
    SEC                         ;$01DAC1    ||
    SBC.b #$08                  ;$01DAC2    ||
    STA $D8,X                   ;$01DAC4    ||
    LDA.w $14D4,X               ;$01DAC6    ||
    PHA                         ;$01DAC9    ||
    SBC.b #$00                  ;$01DACA    ||
    STA.w $14D4,X               ;$01DACC    ||
    JSR CODE_01B2DF             ;$01DACF    ||] Draw GFX.
    PLA                         ;$01DAD2    ||
    STA.w $14D4,X               ;$01DAD3    ||
    PLA                         ;$01DAD6    ||
    STA $D8,X                   ;$01DAD7    ||
    PLA                         ;$01DAD9    ||
    STA.w $14E0,X               ;$01DADA    ||
    PLA                         ;$01DADD    ||
    STA $E4,X                   ;$01DADE    |/
    LDA $E4,X                   ;$01DAE0    |\ 
    PHA                         ;$01DAE2    ||
    JSR CODE_01D74D             ;$01DAE3    ||] Run line-guided routines.
    PLA                         ;$01DAE6    || 
    SEC                         ;$01DAE7    ||
    SBC $E4,X                   ;$01DAE8    || Track number of pixels moved horizontally and temporarily store over $1528.
    LDY.w $1528,X               ;$01DAEA    ||
    PHY                         ;$01DAED    ||
    EOR.b #$FF                  ;$01DAEE    ||
    INC A                       ;$01DAF0    ||
    STA.w $1528,X               ;$01DAF1    |/
    LDY.b #$18                  ;$01DAF4    |\ 
    LDA.w $1602,X               ;$01DAF6    || Get platform size (again).
    BEQ CODE_01DAFD             ;$01DAF9    ||  Brown: 3 tiles
    LDY.b #$28                  ;$01DAFB    ||  Checkered: 5 tiles.
CODE_01DAFD:                    ;           ||
    STY $00                     ;$01DAFD    |/
    LDA $E4,X                   ;$01DAFF    |\ 
    PHA                         ;$01DB01    ||
    SEC                         ;$01DB02    ||
    SBC $00                     ;$01DB03    ||
    STA $E4,X                   ;$01DB05    ||
    LDA.w $14E0,X               ;$01DB07    ||
    PHA                         ;$01DB0A    ||
    SBC.b #$00                  ;$01DB0B    ||
    STA.w $14E0,X               ;$01DB0D    || Center the platform and shift up half a tile **again**,
    LDA $D8,X                   ;$01DB10    ||  this time for interaction.
    PHA                         ;$01DB12    ||
    SEC                         ;$01DB13    ||
    SBC.b #$08                  ;$01DB14    ||
    STA $D8,X                   ;$01DB16    ||
    LDA.w $14D4,X               ;$01DB18    ||
    PHA                         ;$01DB1B    ||
    SBC.b #$00                  ;$01DB1C    ||
    STA.w $14D4,X               ;$01DB1E    ||
    JSR CODE_01B457             ;$01DB21    ||] Make platform solid. 
    BCC CODE_01DB31             ;$01DB24    ||\ 
    LDA.w $1626,X               ;$01DB26    |||
    BEQ CODE_01DB31             ;$01DB29    ||| If Mario is on the platform and it isn't already moving, make it start.
    STZ.w $1626,X               ;$01DB2B    |||
    STZ.w $1540,X               ;$01DB2E    ||/
CODE_01DB31:                    ;           ||
    PLA                         ;$01DB31    ||
    STA.w $14D4,X               ;$01DB32    ||
    PLA                         ;$01DB35    ||
    STA $D8,X                   ;$01DB36    ||
    PLA                         ;$01DB38    ||
    STA.w $14E0,X               ;$01DB39    ||
    PLA                         ;$01DB3C    ||
    STA $E4,X                   ;$01DB3D    |/
    PLA                         ;$01DB3F    |\ Restore original value for $1528.
    STA.w $1528,X               ;$01DB40    |/
    RTS                         ;$01DB43    |





CODE_01DB44:                    ;-----------| Line-guided state 2: Falling.
    LDA $9D                     ;$01DB44    |\ Return if frozen.
    BNE Return01DB59            ;$01DB46    |/
    JSR SubUpdateSprPos         ;$01DB48    | Update X/Y position, apply gravity, and process interaction with blocks.
    LDA.w $1540,X               ;$01DB4B    |\ 
    BNE Return01DB59            ;$01DB4E    || Check for other line guides if:
    LDA $AA,X                   ;$01DB50    || - Just fell off a rope and relatching temporarily disabled.
    CMP.b #$20                  ;$01DB52    || - Falling downward faster than #$20 (i.e. not moving upward or at peak of jump)
    BMI Return01DB59            ;$01DB54    ||
    JSR CODE_01D7F4             ;$01DB56    |/
Return01DB59:                   ;           |
    RTS                         ;$01DB59    |





    ; Ground grinder misc RAM:
    ; $157C - Direction the sprite is moving. 0 = right, 1 = left.
    
DATA_01DB5A:                    ;$01DB5A    | X speeds for the ground grinder.
    db $18,$E8

GroundGrinder:                  ;-----------| Ground Grinder MAIN
    JSR CODE_01DBA2             ;$01DB5C    | Draw GFX.
    LDA.w $14C8,X               ;$01DB5F    |\ 
    CMP.b #$08                  ;$01DB62    ||
    BNE Return01DB95            ;$01DB64    || Return if dead or sprites frozen.
    LDA $9D                     ;$01DB66    ||
    BNE Return01DB95            ;$01DB68    |/
    LDA $13                     ;$01DB6A    |\ 
    AND.b #$03                  ;$01DB6C    || Play grinder sound every 4 frames.
    BNE CODE_01DB75             ;$01DB6E    ||
    LDA.b #$04                  ;$01DB70    ||\ SFX for the ground grinder.
    STA.w $1DFA                 ;$01DB72    |//
CODE_01DB75:                    ;           |
    JSR SubOffscreen0Bnk1       ;$01DB75    | Process offscreen from -$40 to +$30.
    JSR MarioSprInteractRt      ;$01DB78    | Process interaction with Mario.
    LDY.w $157C,X               ;$01DB7B    |\ 
    LDA.w DATA_01DB5A,Y         ;$01DB7E    || Set X speed.
    STA $B6,X                   ;$01DB81    |/
    JSR SubUpdateSprPos         ;$01DB83    | Update X/Y position, apply gravity, and process interaction with blocks.
    JSR IsOnGround              ;$01DB86    |\ 
    BEQ CODE_01DB8D             ;$01DB89    || Clear Y speed if on the ground.
    STZ $AA,X                   ;$01DB8B    |/
CODE_01DB8D:                    ;           |
    JSR IsTouchingObjSide       ;$01DB8D    |\ 
    BEQ Return01DB95            ;$01DB90    || Turn around if it hits something.
    JSR FlipSpriteDir           ;$01DB92    |/
Return01DB95:                   ;           |
    RTS                         ;$01DB95    |





DATA_01DB96:                    ;$01DB96    | X position offsets for the ground grinder's tiles.
    db $F8,$08,$F8,$08

DATA_01DB9A:                    ;$01DB9A    | Y position offsets for the ground grinder's tiles.
    db $00,$00,$10,$10

DATA_01DB9E:                    ;$01DB9E    | YXPPCCCT for the ground grinder's tiles.
    db $03,$43,$83,$C3

CODE_01DBA2:                    ;-----------| Ground Grinder GFX routine.
    JSR GetDrawInfoBnk1         ;$01DBA2    |
    PHX                         ;$01DBA5    |
    LDX.b #$03                  ;$01DBA6    |\ 
CODE_01DBA8:                    ;           ||
    LDA $00                     ;$01DBA8    ||\ 
    CLC                         ;$01DBAA    ||| Set X position.
    ADC.w DATA_01DB96,X         ;$01DBAB    |||
    STA.w $0300,Y               ;$01DBAE    ||/
    LDA $01                     ;$01DBB1    ||\ 
    CLC                         ;$01DBB3    ||| Set Y position.
    ADC.w DATA_01DB9A,X         ;$01DBB4    |||
    STA.w $0301,Y               ;$01DBB7    ||/
    LDA $14                     ;$01DBBA    ||\ 
    AND.b #$02                  ;$01DBBC    ||| Set tile (6C/6E).
    ORA.b #$6C                  ;$01DBBE    |||
    STA.w $0302,Y               ;$01DBC0    ||/
    LDA.w DATA_01DB9E,X         ;$01DBC3    ||\ Set YXPPCCCT.
    STA.w $0303,Y               ;$01DBC6    ||/
    INY                         ;$01DBC9    ||\ 
    INY                         ;$01DBCA    |||
    INY                         ;$01DBCB    ||| Loop for 4 tiles.
    INY                         ;$01DBCC    |||
    DEX                         ;$01DBCD    |||
    BPL CODE_01DBA8             ;$01DBCE    |//
CODE_01DBD0:                    ;           |
    LDA.b #$03                  ;$01DBD0    |\ Draw 4 16x16s.
    BRA CODE_01DC03             ;$01DBD2    |/



CODE_01DBD4:                    ;-----------| Fuzzy GFX routine.
    JSR SubSprGfx2Entry1        ;$01DBD4    | Create a 16x16 tile.
    LDY.w $15EA,X               ;$01DBD7    |
    LDA.w $0300,Y               ;$01DBDA    |\ 
    SEC                         ;$01DBDD    ||
    SBC.b #$08                  ;$01DBDE    ||
    STA.w $0300,Y               ;$01DBE0    || Shift half a tile left and up.
    LDA.w $0301,Y               ;$01DBE3    ||
    SEC                         ;$01DBE6    ||
    SBC.b #$08                  ;$01DBE7    ||
    STA.w $0301,Y               ;$01DBE9    |/
    PHX                         ;$01DBEC    |
    LDA $14                     ;$01DBED    |\ 
    LSR                         ;$01DBEF    ||
    LSR                         ;$01DBF0    ||
    AND.b #$01                  ;$01DBF1    || Animate by X flipping every four frames.
    TAX                         ;$01DBF3    ||
    LDA.b #$C8                  ;$01DBF4    ||| Tile to use for the Fuzzy. 
    STA.w $0302,Y               ;$01DBF6    ||
    LDA.w DATA_01DC09,X         ;$01DBF9    ||
    ORA $64                     ;$01DBFC    ||
    STA.w $0303,Y               ;$01DBFE    |/
    LDA.b #$00                  ;$01DC01    |\ 
CODE_01DC03:                    ;           ||
    PLX                         ;$01DC03    || Draw a 16x16.
CODE_01DC04:                    ;           ||
    LDY.b #$02                  ;$01DC04    ||
    JMP FinishOAMWriteRt        ;$01DC06    |/

DATA_01DC09:                    ;$01DC09    | YXPPCCCT to use for the Fuzzy's animation.
    db $05,$45



CODE_01DC0B:                    ;-----------| Line-guided Grinder GFX routine.
    JSR GetDrawInfoBnk1         ;$01DC0B    |
    PHX                         ;$01DC0E    |
    LDX.b #$03                  ;$01DC0F    |\ 
CODE_01DC11:                    ;           ||
    LDA $00                     ;$01DC11    ||\ 
    CLC                         ;$01DC13    ||| Set X position.
    ADC.w DATA_01DC3B,X         ;$01DC14    |||
    STA.w $0300,Y               ;$01DC17    ||/
    LDA $01                     ;$01DC1A    ||\ 
    CLC                         ;$01DC1C    ||| Set Y position.
    ADC.w DATA_01DC3F,X         ;$01DC1D    |||
    STA.w $0301,Y               ;$01DC20    ||/
    LDA $14                     ;$01DC23    ||\ 
    AND.b #$02                  ;$01DC25    ||| Set tile (6C/6E).
    ORA.b #$6C                  ;$01DC27    |||
    STA.w $0302,Y               ;$01DC29    ||/
    LDA.w DATA_01DC43,X         ;$01DC2C    ||\ Set YXPPCCCT.
    STA.w $0303,Y               ;$01DC2F    ||/
    INY                         ;$01DC32    ||\ 
    INY                         ;$01DC33    |||
    INY                         ;$01DC34    ||| Loop for 4 tiles.
    INY                         ;$01DC35    |||
    DEX                         ;$01DC36    |||
    BPL CODE_01DC11             ;$01DC37    |//
    BRA CODE_01DBD0             ;$01DC39    | Draw 4 16x16s.

DATA_01DC3B:                    ;$01DC3B    | X position offsets for the line-guided grinder's tiles.
    db $F0,$00,$F0,$00

DATA_01DC3F:                    ;$01DC3F    | Y position offsets for the line-guided grinder's tiles.
    db $F0,$F0,$00,$00

DATA_01DC43:                    ;$01DC43    | YXPPCCCT for the line-guided grinder's tiles.
    db $33,$73,$B3,$F3



RopeMotorTiles:                 ;$01DC47    | Tile numbers for the rope mechanism's motor's animation.
    db $C0,$C2,$E0,$C2

LineGuideRopeTiles:             ;$01DC4B    | Tile numbers for the rope part of the rope mechanism.
    db $C0,$CE,$CE,$CE,$CE,$CE,$CE,$CE
    db $CE

CODE_01DC54:                    ;-----------| Rope mechanism GFX routine.
    JSR GetDrawInfoBnk1         ;$01DC54    |
    LDA $00                     ;$01DC57    |\ 
    SEC                         ;$01DC59    ||
    SBC.b #$08                  ;$01DC5A    ||
    STA $00                     ;$01DC5C    || Shift half a tile left and up.
    LDA $01                     ;$01DC5E    ||
    SEC                         ;$01DC60    ||
    SBC.b #$08                  ;$01DC61    ||
    STA $01                     ;$01DC63    |/
    TXA                         ;$01DC65    |\ 
    ASL                         ;$01DC66    ||
    ASL                         ;$01DC67    ||
    EOR $14                     ;$01DC68    || $02 = Animation index for the motor,
    LSR                         ;$01DC6A    ||  using the sprite's slot so that multiple
    LSR                         ;$01DC6B    ||  ropes onscreen at a time don't look identical.
    LSR                         ;$01DC6C    ||
    AND.b #$03                  ;$01DC6D    ||
    STA $02                     ;$01DC6F    |/
    LDA.b #$05                  ;$01DC71    |\ 
    CPX.b #$06                  ;$01DC73    || $03 = Length of the rope.
    BCC CODE_01DC7E             ;$01DC75    ||
    LDY.w $1692                 ;$01DC77    || Will by default have a length of 5 tiles, unless:
    BEQ CODE_01DC7E             ;$01DC7A    ||  - Sprite memory setting is 0.
    LDA.b #$09                  ;$01DC7C    ||  - Sprite is in slot 6+.
CODE_01DC7E:                    ;           || In which case the length will be 9 tiles.
    STA $03                     ;$01DC7E    |/
    LDY.w $15EA,X               ;$01DC80    |
    LDX.b #$00                  ;$01DC83    |\ 
CODE_01DC85:                    ;           ||
    LDA $00                     ;$01DC85    ||\ 
    STA.w $0300,Y               ;$01DC87    |||
    LDA $01                     ;$01DC8A    |||
    STA.w $0301,Y               ;$01DC8C    ||| Set X/Y position for the current tile.
    CLC                         ;$01DC8F    |||
    ADC.b #$10                  ;$01DC90    |||
    STA $01                     ;$01DC92    ||/
    LDA.w LineGuideRopeTiles,X  ;$01DC94    ||\ 
    CPX.b #$00                  ;$01DC97    |||
    BNE CODE_01DCA2             ;$01DC99    |||
    PHX                         ;$01DC9B    |||
    LDX $02                     ;$01DC9C    ||| Set tile number.
    LDA.w RopeMotorTiles,X      ;$01DC9E    |||
    PLX                         ;$01DCA1    |||
CODE_01DCA2:                    ;           |||
    STA.w $0302,Y               ;$01DCA2    ||/
    LDA.b #$37                  ;$01DCA5    ||\\ YXPPCCCT for the motor.
    CPX.b #$01                  ;$01DCA7    |||
    BCC CODE_01DCAD             ;$01DCA9    |||
    LDA.b #$31                  ;$01DCAB    |||| YXPPCCCT for the rope.
CODE_01DCAD:                    ;           |||
    STA.w $0303,Y               ;$01DCAD    ||/
    INY                         ;$01DCB0    ||\ 
    INY                         ;$01DCB1    |||
    INY                         ;$01DCB2    |||
    INY                         ;$01DCB3    ||| Loop for all tiles.
    INX                         ;$01DCB4    |||
    CPX $03                     ;$01DCB5    |||
    BNE CODE_01DC85             ;$01DCB7    |//
    LDA.b #$DE                  ;$01DCB9    |\\ Tile number for the last tile of the rope.
    STA.w $02FE,Y               ;$01DCBB    |/
    LDX.w $15E9                 ;$01DCBE    |
    LDA.b #$04                  ;$01DCC1    |\ 
    CPX.b #$06                  ;$01DCC3    ||
    BCC CODE_01DCCE             ;$01DCC5    ||
    LDY.w $1692                 ;$01DCC7    || Draw 5 or 9 16x16 tiles.
    BEQ CODE_01DCCE             ;$01DCCA    ||
    LDA.b #$08                  ;$01DCCC    ||
CODE_01DCCE:                    ;           ||
    JMP CODE_01DC04             ;$01DCCE    |/



DATA_01DCD1:                    ;$01DCD1    | Number of frames (and offsets) each lineguide takes to move across.
    db $15,$15,$15,$15,$0C,$10,$10,$10      ; Used as the "right index" for the movement.
    db $10,$0C,$0C,$10,$10,$10,$10,$0C
    db $15,$15,$10,$10,$10,$10,$10,$10
    db $10,$10,$10,$10,$10,$10,$15,$15

DATA_01DCF1:                    ;$01DCF1    | Used to determine how to direct an incoming line-guided sprite on a line guide.
    db $00,$00,$00,$00,$00,$00,$01,$02      ; #$00 = Horizontal; moves left if in X range of 0A-0F (right) of the rope.
    db $00,$00,$00,$00,$02,$01,$00,$00      ; #$01 = Vertical; moves left if in Y range 01-05 (bottom) of the rope.
    db $00,$00,$01,$02,$01,$02,$00,$00      ; #$02 = Vertical; moves left if in Y range 0A-0F (top) of the rope.
    db $00,$00,$02,$02,$00,$00,$00,$00

DATA_01DD11:                    ;$01DD11    | Y speeds to give a line-guided sprite when falling off the end.
    db $00,$10,$00,$F0,$F4,$FC,$F0,$10      ; First x20: R/D, second: U/L
    db $04,$0C,$0C,$00,$10,$F0,$FC,$F4
    db $F0,$10,$F0,$10,$F0,$10,$F8,$F8
    db $08,$08,$10,$10,$00,$00,$F0,$10
    db $10,$00,$F0,$F0,$0C,$04,$10,$F0
    db $00,$F4,$F4,$FC,$F0,$10,$00,$0C
    db $10,$F0,$10,$00,$10,$F0,$08,$08
    db $F8,$F8,$F0,$F0,$00,$00,$10,$F0

DATA_01DD51:                    ;$01DD51    | X speeds to give a line-guided sprite when falling off the end.
    db $10,$00,$10,$00,$0C,$10,$04,$00      ; First x20: R/D, second: U/L
    db $10,$0C,$0C,$10,$04,$00,$10,$0C
    db $10,$10,$08,$08,$08,$08,$10,$10
    db $10,$10,$00,$00,$10,$10,$10,$10
    db $00,$F0,$00,$F0,$F4,$F0,$00,$FC
    db $F0,$F4,$F4,$F0,$00,$FC,$F0,$F4
    db $F0,$F0,$F8,$F8,$F8,$F8,$F0,$F0
    db $F0,$F0,$00,$00,$F0,$F0,$F0,$F0





DATA_01DD91:                    ;$01DD91    | X positions for each bonus game box.
    db $50,$78,$A0,$A0,$A0,$78,$50,$50,$78

DATA_01DD9A:                    ;$01DD9A    | Y positions for each bonus game box.
    db $F0,$F0,$F0,$18,$40,$40,$40,$18,$18

DATA_01DDA3:                    ;$01DDA3    | Initial movement directions for each bonus game box.
    db $03,$00,$00,$01,$01,$02,$02,$03,$FF

InitBonusGame:                  ;-----------| Bonus Game INIT
    LDA.w $1B94                 ;$01DDAC    |\ 
    BEQ CODE_01DDB5             ;$01DDAF    || Erase sprite if all the boxes are already spawned.
    STZ.w $14C8,X               ;$01DDB1    ||
    RTS                         ;$01DDB4    |/

CODE_01DDB5:
    LDX.b #$09                  ;$01DDB5    |\ Create 8 more boxes.
CODE_01DDB7:                    ;           ||
    LDA.b #$08                  ;$01DDB7    ||\ 
    STA.w $14C8,X               ;$01DDB9    ||| Spawn another bonus game box.
    LDA.b #$82                  ;$01DDBC    |||
    STA.w $9E,X                 ;$01DDBE    ||/
    LDA.w DATA_01DD91-1,X       ;$01DDC1    ||\ 
    STA $E4,X                   ;$01DDC4    |||
    LDA.b #$00                  ;$01DDC6    |||
    STA.w $14E0,X               ;$01DDC8    |||
    LDA.w DATA_01DD9A-1,X       ;$01DDCB    |||
    STA $D8,X                   ;$01DDCE    ||| Set X/Y position for the box.
    ASL                         ;$01DDD0    |||
    LDA.b #$00                  ;$01DDD1    |||
    BCS CODE_01DDD6             ;$01DDD3    |||
    INC A                       ;$01DDD5    |||
CODE_01DDD6:                    ;           |||
    STA.w $14D4,X               ;$01DDD6    ||/
    JSL InitSpriteTables        ;$01DDD9    ||
    LDA.w DATA_01DDA3-1,X       ;$01DDDD    ||\ Set initial movement direction.
    STA.w $157C,X               ;$01DDE0    ||/
    TXA                         ;$01DDE3    ||\ 
    CLC                         ;$01DDE4    |||
    ADC $13                     ;$01DDE5    ||| Set initial item for the box.
    AND.b #$07                  ;$01DDE7    |||
    STA.w $1570,X               ;$01DDE9    ||/
    DEX                         ;$01DDEC    ||\ Loop for 8 boxes.
    BNE CODE_01DDB7             ;$01DDED    |//
    STZ.w $188F                 ;$01DDEF    |\ Clear bonus game beat flag and bonus 1up counter.
    STZ.w $1890                 ;$01DDF2    |/
    JSL GetRand                 ;$01DDF5    |\ 
    EOR $13                     ;$01DDF9    ||
    ADC $14                     ;$01DDFB    ||
    AND.b #$07                  ;$01DDFD    || Stick a random sprite in the central box.
    TAY                         ;$01DDFF    ||
    LDA.w DATA_01DE21,Y         ;$01DE00    ||
    STA.w $1579                 ;$01DE03    |/
    LDA.b #$01                  ;$01DE06    |\ Stop the central box from animating.
    STA $CB                     ;$01DE08    |/
    INC.w $1B94                 ;$01DE0A    |
    LDX.w $15E9                 ;$01DE0D    |
    RTS                         ;$01DE10    |



DATA_01DE11:                    ;$01DE11    | X speeds to give the box for each movement direction.
    db $10,$00,$F0,$00

DATA_01DE15:                    ;$01DE15    | Y speeds to give the box for each movement direction.
    db $00,$10,$00,$F0

DATA_01DE19:                    ;$01DE19    | X positions where the box should stop and change movement direction (the "corners").
    db $A0,$A0,$50,$50

DATA_01DE1D:                    ;$01DE1D    | Y positions where the box should stop and change movement direction (the "corners").
    db $F0,$40,$40,$F0

DATA_01DE21:                    ;$01DE21    | Contents to display in the box when the box is hit.
    db $01,$01,$01              ; Star
    db $04,$04,$04              ; Mushroom
    db $07,$07,$07              ; Fireflower

    ; Bonus game misc RAM:
    ; $C2   - Flag for whether the box is animating (0) or stopped (1).
    ; $1540 - Timer for the block's hit animation.
    ; $154C - Timer for flashing complete lines after the game ends.
    ; $1570 - Current animation frame. 0/1/2 = star, 3/4/5 = mushroom, 6/7/8 = fireflower.
    ; $157C - Direction of movement.
    ;          0 = right, 1 = down, 2 = left, 3 = up, FF = No movement (center item).
    
BonusGame:                      ;-----------| Bonus Game MAIN
    STZ.w $15A0,X               ;$01DE2A    | Clear offscreen flag?...
    CPX.b #$01                  ;$01DE2D    |\ 
    BNE CODE_01DE34             ;$01DE2F    || Handle spawning 1ups at the end of the game.
    JSR CODE_01E26A             ;$01DE31    |/
CODE_01DE34:                    ;           |
    JSR CODE_01DF19             ;$01DE34    | Draw GFX.
    LDA $9D                     ;$01DE37    |\ 
    BNE Return01DE40            ;$01DE39    ||
    LDA.w $188F                 ;$01DE3B    || Return if sprites frozen
    BEQ CODE_01DE41             ;$01DE3E    ||  or the game is over.
Return01DE40:                   ;           ||
    RTS                         ;$01DE40    |/

CODE_01DE41:                    ;```````````| Bonus game isn't over.
    LDA $C2,X                   ;$01DE41    |\ Branch if the box isn't animating its contents.
    BNE CODE_01DE8C             ;$01DE43    |/
    LDA $14                     ;$01DE45    |\ 
    AND.b #$03                  ;$01DE47    ||
    BNE CODE_01DE58             ;$01DE49    ||
    INC.w $1570,X               ;$01DE4B    || Increase animation index every 4 frames.
    LDA.w $1570,X               ;$01DE4E    ||
    CMP.b #$09                  ;$01DE51    ||
    BNE CODE_01DE58             ;$01DE53    ||
    STZ.w $1570,X               ;$01DE55    |/
CODE_01DE58:                    ;           |
    JSR MarioSprInteractRt      ;$01DE58    |\ 
    BCC CODE_01DE8C             ;$01DE5B    ||
    LDA $7D                     ;$01DE5D    ||
    BPL CODE_01DE8C             ;$01DE5F    ||
    LDA.b #$F4                  ;$01DE61    ||
    LDY $19                     ;$01DE63    || Branch if:
    BEQ CODE_01DE69             ;$01DE65    || - Not in contact with Mario.
    LDA.b #$00                  ;$01DE67    || - Mario isn't moving upwards.
CODE_01DE69:                    ;           || - Not being touched specifically by Mario's head.
    CLC                         ;$01DE69    ||
    ADC $D8,X                   ;$01DE6A    ||
    SEC                         ;$01DE6C    ||
    SBC $1C                     ;$01DE6D    ||
    CMP $80                     ;$01DE6F    ||
    BCS CODE_01DE8C             ;$01DE71    |/
    LDA.b #$10                  ;$01DE73    |\\ Y speed to give Mario when hitting the bottom of a bonus game box.
    STA $7D                     ;$01DE75    |/
    LDA.b #$0B                  ;$01DE77    |\ SFX for hitting a bonus game box.
    STA.w $1DF9                 ;$01DE79    |/
    INC $C2,X                   ;$01DE7C    | Stop the box from animating.
    LDY.w $1570,X               ;$01DE7E    |\ 
    LDA.w DATA_01DE21,Y         ;$01DE81    || "Round" the box's contents to a full item.
    STA.w $1570,X               ;$01DE84    |/
    LDA.b #$10                  ;$01DE87    |\ Set timer for the box's hit animation.
    STA.w $1540,X               ;$01DE89    |/
CODE_01DE8C:                    ;```````````| Move the box around the circle.
    LDY.w $157C,X               ;$01DE8C    |\ Return if the box shouldn't move (center box).
    BMI Return01DEAF            ;$01DE8F    |/
    LDA $E4,X                   ;$01DE91    |\ 
    CMP.w DATA_01DE19,Y         ;$01DE93    ||
    BNE CODE_01DE9F             ;$01DE96    || Branch if the box has hit a "corner" of the game.
    LDA $D8,X                   ;$01DE98    ||
    CMP.w DATA_01DE1D,Y         ;$01DE9A    ||
    BEQ CODE_01DEB0             ;$01DE9D    |/
CODE_01DE9F:                    ;           |
    LDA.w DATA_01DE11,Y         ;$01DE9F    |\ 
    STA $B6,X                   ;$01DEA2    || Update X/Y speed.
    LDA.w DATA_01DE15,Y         ;$01DEA4    ||
    STA $AA,X                   ;$01DEA7    |/
    JSR SubSprXPosNoGrvty       ;$01DEA9    |\ Update position.
    JSR SubSprYPosNoGrvty       ;$01DEAC    |/
Return01DEAF:                   ;           |
    RTS                         ;$01DEAF    |


CODE_01DEB0:                    ;```````````| Time to change the box's direction at a corner.
    LDY.b #$09                  ;$01DEB0    |\ 
CODE_01DEB2:                    ;           ||
    LDA.w $C2,Y                 ;$01DEB2    ||
    BEQ CODE_01DED7             ;$01DEB5    ||
    LDA.w $00D8,Y               ;$01DEB7    ||
    CLC                         ;$01DEBA    ||
    ADC.b #$04                  ;$01DEBB    || Check if all the boxes have been hit.
    AND.b #$F8                  ;$01DEBD    ||  Clip their positions while at it.
    STA.w $00D8,Y               ;$01DEBF    ||
    LDA.w $00E4,Y               ;$01DEC2    ||
    CLC                         ;$01DEC5    ||
    ADC.b #$04                  ;$01DEC6    ||
    AND.b #$F8                  ;$01DEC8    ||
    STA.w $00E4,Y               ;$01DECA    ||
    DEY                         ;$01DECD    ||
    BNE CODE_01DEB2             ;$01DECE    |/
    INC.w $188F                 ;$01DED0    |\ If all boxes have been hit, end the game.
    JSR CODE_01DFD9             ;$01DED3    |/
    RTS                         ;$01DED6    |

CODE_01DED7:                    ;```````````| Not all boxes have been hit.
    LDA.w $157C,X               ;$01DED7    |\ 
    INC A                       ;$01DEDA    ||
    AND.b #$03                  ;$01DEDB    || Increase movement direction.
    TAY                         ;$01DEDD    ||
    STA.w $157C,X               ;$01DEDE    |/
    BRA CODE_01DE9F             ;$01DEE1    | Update speed and position, then return.



DATA_01DEE3:                    ;$01DEE3    | Tiles for the Bonus Game item box animation.
    db $58,$59,$83,$83          ; 0 - Star (bottom)
    db $48,$49,$58,$59          ; 1 - Star
    db $83,$83,$48,$49          ; 2 - Star (top)
    db $34,$35,$83,$83          ; 3 - Mushroom (bottom)
    db $24,$25,$34,$35          ; 4 - Mushroom
    db $83,$83,$24,$25          ; 5 - Mushroom (top)
    db $36,$37,$83,$83          ; 6 - Fireflower (bottom)
    db $26,$27,$36,$37          ; 7 - Fireflower
    db $83,$83,$26,$27          ; 8 - Fireflower (top)

DATA_01DF07:                    ;$01DF07    | YXPPCCCT for the items inside the Bonus Game's item box.
    db $04,$04,$04              ; Star
    db $08,$08,$08              ; Mushroom
    db $0A,$0A,$0A              ; Fireflower

DATA_01DF10:                    ;$01DF10    | Y position offsets for the block's hit animation.
    db $00,$03,$05,$07,$08,$08,$07,$05,$03

CODE_01DF19:                    ;-----------| Bonus game item box GFX routine
    LDA.w $1540,X               ;$01DF19    |\ 
    LSR                         ;$01DF1C    ||
    TAY                         ;$01DF1D    || Get vertical offset for the block's hit animation, if applicable.
    LDA.w DATA_01DF10,Y         ;$01DF1E    ||
    STA $00                     ;$01DF21    |/
    LDY.w $15EA,X               ;$01DF23    |
    LDA $E4,X                   ;$01DF26    |\ 
    SEC                         ;$01DF28    ||
    SBC $1A                     ;$01DF29    ||
    STA.w $0310,Y               ;$01DF2B    ||
    STA.w $0300,Y               ;$01DF2E    || Set the X positions for all 5 tiles.
    STA.w $0308,Y               ;$01DF31    || (16x16 white box + 4 8x8s for the item).
    CLC                         ;$01DF34    ||
    ADC.b #$08                  ;$01DF35    ||
    STA.w $0304,Y               ;$01DF37    ||
    STA.w $030C,Y               ;$01DF3A    |/
    LDA.w $154C,X               ;$01DF3D    |\ 
    CLC                         ;$01DF40    ||
    BEQ CODE_01DF4E             ;$01DF41    ||
    LSR                         ;$01DF43    || Handle flashing the item in the box
    LSR                         ;$01DF44    ||  after the game ends.
    LSR                         ;$01DF45    ||
    LSR                         ;$01DF46    ||
    BRA CODE_01DF4D             ;$01DF47    |/

    CLC                         ;$01DF49    |\ Unused code; would make items alternate flashing.
    ADC.w $15E9                 ;$01DF4A    |/
CODE_01DF4D:                    ;           |
    LSR                         ;$01DF4D    |
CODE_01DF4E:                    ;           |
    PHP                         ;$01DF4E    |
    LDA $D8,X                   ;$01DF4F    |\ 
    SEC                         ;$01DF51    ||
    SBC $00                     ;$01DF52    ||
    SEC                         ;$01DF54    || Set Y position for the box.
    SBC $1C                     ;$01DF55    ||
    STA.w $0311,Y               ;$01DF57    ||
    PLP                         ;$01DF5A    ||\ 
    BCS CODE_01DF6C             ;$01DF5B    |||
    STA.w $0301,Y               ;$01DF5D    |||
    STA.w $0305,Y               ;$01DF60    ||| If not currently flashing the item,
    CLC                         ;$01DF63    |||  set its Y position too.
    ADC.b #$08                  ;$01DF64    |||
    STA.w $0309,Y               ;$01DF66    |||
    STA.w $030D,Y               ;$01DF69    |//
CODE_01DF6C:                    ;           |
    LDA.w $1570,X               ;$01DF6C    |\ 
    PHX                         ;$01DF6F    ||
    PHA                         ;$01DF70    ||
    ASL                         ;$01DF71    ||
    ASL                         ;$01DF72    ||
    TAX                         ;$01DF73    ||
    LDA.w DATA_01DEE3,X         ;$01DF74    || Set tiles for the item inside the box.
    STA.w $0302,Y               ;$01DF77    ||
    LDA.w DATA_01DEE3+1,X       ;$01DF7A    ||
    STA.w $0306,Y               ;$01DF7D    ||
    LDA.w DATA_01DEE3+2,X       ;$01DF80    ||
    STA.w $030A,Y               ;$01DF83    ||
    LDA.w DATA_01DEE3+3,X       ;$01DF86    ||
    STA.w $030E,Y               ;$01DF89    |/
    LDA.b #$E4                  ;$01DF8C    |\\ Tile for the white box.
    STA.w $0312,Y               ;$01DF8E    |/
    PLX                         ;$01DF91    |
    LDA $64                     ;$01DF92    |\ 
    ORA.w DATA_01DF07,X         ;$01DF94    ||
    STA.w $0303,Y               ;$01DF97    || Set YXPPCCCT for the item inside the box.
    STA.w $0307,Y               ;$01DF9A    ||
    STA.w $030B,Y               ;$01DF9D    ||
    STA.w $030F,Y               ;$01DFA0    |/
    ORA.b #$01                  ;$01DFA3    |\\ YXPPCCCT for the white box.
    STA.w $0313,Y               ;$01DFA5    |/
    PLX                         ;$01DFA8    |
    TYA                         ;$01DFA9    |
    LSR                         ;$01DFAA    |
    LSR                         ;$01DFAB    |
    TAY                         ;$01DFAC    |
    LDA.b #$00                  ;$01DFAD    |\ 
    STA.w $0460,Y               ;$01DFAF    ||
    STA.w $0461,Y               ;$01DFB2    ||
    STA.w $0462,Y               ;$01DFB5    || Set sizes for all five tiles.
    STA.w $0463,Y               ;$01DFB8    ||  (4 8x8s, 1 16x16)
    LDA.b #$02                  ;$01DFBB    ||
    STA.w $0464,Y               ;$01DFBD    |/
    RTS                         ;$01DFC0    |



DATA_01DFC1:                    ;$01DFC1    | Indices for the block position tables in each row/column.
    db $00,$01,$02              ; 0 - Top row
    db $02,$03,$04              ; 1 - Right column
    db $04,$05,$06              ; 2 - Bottom row
    db $06,$07,$00              ; 3 - Left column
    db $00,$08,$04              ; 4 - \ diagonal
    db $02,$08,$06              ; 5 - / diagonal
    db $03,$08,$07              ; 6 - Middle row
    db $01,$08,$05              ; 7 - Middle column

CODE_01DFD9:                    ;-----------| Routine to end the bonus game.
    LDA.b #$07                  ;$01DFD9    |
    STA $00                     ;$01DFDB    |
CODE_01DFDD:                    ;```````````| Outer loop ($00); loop for each line (8 lines).
    LDX.b #$02                  ;$01DFDD    | 
CODE_01DFDF:                    ;```````````| Inner loop ($01); loop for each block in the row (3 blocks).
    STX $01                     ;$01DFDF    | 
    LDA $00                     ;$01DFE1    |\ 
    ASL                         ;$01DFE3    ||
    ADC $00                     ;$01DFE4    ||
    CLC                         ;$01DFE6    ||
    ADC $01                     ;$01DFE7    ||
    TAY                         ;$01DFE9    || Get the X/Y position of the box to check.
    LDA.w DATA_01DFC1,Y         ;$01DFEA    || Store them in $02/$03.
    TAY                         ;$01DFED    ||
    LDA.w DATA_01DD9A,Y         ;$01DFEE    ||
    STA $02                     ;$01DFF1    ||
    LDA.w DATA_01DD91,Y         ;$01DFF3    ||
    STA $03                     ;$01DFF6    |/
    LDY.b #$09                  ;$01DFF8    |\ 
CODE_01DFFA:                    ;           ||
    LDA.w $00D8,Y               ;$01DFFA    ||
    CMP $02                     ;$01DFFD    ||
    BNE CODE_01E008             ;$01DFFF    ||
    LDA.w $00E4,Y               ;$01E001    || Loop through the boxes until the one in question is found.
    CMP $03                     ;$01E004    ||
    BEQ CODE_01E00D             ;$01E006    ||
CODE_01E008:                    ;           ||
    DEY                         ;$01E008    ||
    CPY.b #$01                  ;$01E009    ||
    BNE CODE_01DFFA             ;$01E00B    |/
CODE_01E00D:                    ;           |
    LDA.w $1570,Y               ;$01E00D    |\ Store the box's contents to $04-$06
    STA $04,X                   ;$01E010    ||  and its sprite index to $07-$09.
    STY $07,X                   ;$01E012    |/
    DEX                         ;$01E014    |\ Loop for all boxes in the line.
    BPL CODE_01DFDF             ;$01E015    |/
    LDA $04                     ;$01E017    |\\ 
    CMP $05                     ;$01E019    |||
    BNE CODE_01E035             ;$01E01B    ||| Move to next line if all three box's contents aren't the same.
    CMP $06                     ;$01E01D    |||
    BNE CODE_01E035             ;$01E01F    ||/
    INC.w $1890                 ;$01E021    || Count a life.
    LDA.b #$70                  ;$01E024    ||\ 
    LDY $07                     ;$01E026    |||
    STA.w $154C,Y               ;$01E028    |||
    LDY $08                     ;$01E02B    ||| Set the flashing timer for all three boxes.
    STA.w $154C,Y               ;$01E02D    |||
    LDY $09                     ;$01E030    |||
    STA.w $154C,Y               ;$01E032    |//
CODE_01E035:                    ;           |
    DEC $00                     ;$01E035    |\ Loop for all the lines.
    BPL CODE_01DFDD             ;$01E037    |/
    LDX.w $15E9                 ;$01E039    |
    LDY.b #$29                  ;$01E03C    |\ SFX for getting at least one line. SFX for none is this +1.
    LDA.w $1890                 ;$01E03E    ||\  
    STA.w $1920                 ;$01E041    |||
    BNE CODE_01E04C             ;$01E044    ||| If no 1ups were gotten, set game end timer.
    LDA.b #$58                  ;$01E046    |||
    STA.w $14AB                 ;$01E048    ||/
    INY                         ;$01E04B    ||
CODE_01E04C:                    ;           ||
    STY.w $1DFC                 ;$01E04C    |/
    RTS                         ;$01E04F    |





InitPodoboo:                    ;-----------| Podoboo INIT
    LDA $D8,X                   ;$01E050    |\ 
    STA.w $1528,X               ;$01E052    || Track the spawn Y position.
    LDA.w $14D4,X               ;$01E055    ||
    STA.w $151C,X               ;$01E058    |/
CODE_01E05B:                    ;           |
    LDA $D8,X                   ;$01E05B    |\ 
    CLC                         ;$01E05D    ||
    ADC.b #$10                  ;$01E05E    ||
    STA $D8,X                   ;$01E060    ||
    LDA.w $14D4,X               ;$01E062    || Scan below the Podoboo for water/lava.
    ADC.b #$00                  ;$01E065    || Loop never terminates if there is none, hence the buoyancy crash bug.
    STA.w $14D4,X               ;$01E067    ||
    JSR CODE_019140             ;$01E06A    ||
    LDA.w $164A,X               ;$01E06D    ||
    BEQ CODE_01E05B             ;$01E070    |/
    JSR CODE_01E0E2             ;$01E072    |
    LDA.b #$20                  ;$01E075    |
    STA.w $1540,X               ;$01E077    |
    RTS                         ;$01E07A    |



DATA_01E07B:                    ;$01E07B    | Y speeds to give the Podoboo when jumping, in order to reach its spawn position.
    db $F0,$DC,$D0,$C8,$C0,$B8,$B2,$AC      ;  If the value is positive (#$00-#$7F), the game instead gives the Podoboo the max of #$80
    db $A6,$A0,$9A,$96,$92,$8C,$88,$84      ;  and stores that value to $1564. However, this doesn't work correctly,
    db $80,$04,$08,$0C,$10,$14              ;  and essentially has no effect.

DATA_01E091:                    ;$01E091    | Maximum downwards Y speeds for the Podoboo.
    db $70,$20                              ; Second value is used when acting as Bowser's flame.

    ; Podoboo misc RAM:
    ; $C2   - Flag for whether the sprite is a podoboo (0) or Bowser fireball (1).
    ; $151C - Spawn Y position (high); used for maximum jump distance.
    ; $1528 - Spawn Y position (low); used for maximum jump distance.
    ; $1540 - Timer for waiting in the lava. Set to a random value between #$60 and #$9F.
    ; $1558 - Timer for the Bowser fireballs, for when to disappear.
    ; $1564 - Timer to retain Y speed if the jump distance is too far to reach with the normal max speed of #$80.
    ;          However, doesn't work correctly, and as a result has no effect on the sprite.
    ;          (unless the vertical distance is so great that a value greater than $1540 gets accidentally stored)
    ; $1570 - Frame counter for animation.
    ; $15D0 - Mirror of $1540. Seems unused, though?
    ; $1602 - Animation frame.
    ;          0/1 = facing upwards, 2/3 = facing downwards
    
Podoboo:                        ;-----------| Podoboo MAIN (and also Bowser fireball)
    STZ.w $15D0,X               ;$01E093    |
    LDA.w $1540,X               ;$01E096    |\ Branch if lava timer is 0 (time to jump / already in air).
    BEQ CODE_01E0A7             ;$01E099    |/
    STA.w $15D0,X               ;$01E09B    |
    DEC A                       ;$01E09E    |\ 
    BNE Return01E0A6            ;$01E09F    || If about to jump, play the sound effect for doing so.
    LDA.b #$27                  ;$01E0A1    ||\ SFX for the podoboo leaping out of the lava.
    STA.w $1DFC                 ;$01E0A3    |//
Return01E0A6:                   ;           |
    RTS                         ;$01E0A6    |

CODE_01E0A7:                    ;```````````| Time to jump / Podoboo is in midair.
    LDA $9D                     ;$01E0A7    |\ 
    BEQ CODE_01E0AE             ;$01E0A9    || Skip down to just draw graphics if the game is frozen.
    JMP CODE_01E12D             ;$01E0AB    |/
CODE_01E0AE:                    ;           |
    JSR MarioSprInteractRt      ;$01E0AE    | Interact with Mario.
    JSR SetAnimationFrame       ;$01E0B1    |\ Change animation every 4 frames.
    JSR SetAnimationFrame       ;$01E0B4    |/
    LDA.w $15F6,X               ;$01E0B7    |\ 
    AND.b #$7F                  ;$01E0BA    ||
    LDY $AA,X                   ;$01E0BC    ||
    BMI CODE_01E0C8             ;$01E0BE    || If moving downwards,
    INC.w $1602,X               ;$01E0C0    ||  increase animation frame by 2
    INC.w $1602,X               ;$01E0C3    ||  and vertically flip the sprite.
    ORA.b #$80                  ;$01E0C6    ||
CODE_01E0C8:                    ;           ||
    STA.w $15F6,X               ;$01E0C8    |/
    JSR CODE_019140             ;$01E0CB    |\ 
    LDA.w $164A,X               ;$01E0CE    ||
    BEQ CODE_01E106             ;$01E0D1    || Branch if not in contact with water or if moving upwards.
    LDA $AA,X                   ;$01E0D3    ||
    BMI CODE_01E106             ;$01E0D5    |/
    JSL GetRand                 ;$01E0D7    |\ 
    AND.b #$3F                  ;$01E0DB    || Set time to wait within the lava.
    ADC.b #$60                  ;$01E0DD    ||  Time is a random value between #$60 and #$9F.
    STA.w $1540,X               ;$01E0DF    |/
CODE_01E0E2:                    ;           |
    LDA $D8,X                   ;$01E0E2    |\ 
    SEC                         ;$01E0E4    ||
    SBC.w $1528,X               ;$01E0E5    ||
    STA $00                     ;$01E0E8    ||
    LDA.w $14D4,X               ;$01E0EA    ||
    SBC.w $151C,X               ;$01E0ED    ||
    LSR                         ;$01E0F0    || Determine the number of blocks between the Podoboo and
    ROR $00                     ;$01E0F1    ||  its spawn position, then use that to get the Y speed
    LDA $00                     ;$01E0F3    ||  necessary to reach it.
    LSR                         ;$01E0F5    ||
    LSR                         ;$01E0F6    || If the distance is too far to reach even with max speed,
    LSR                         ;$01E0F7    ||  this will instead set a timer to disable gravity temporarily.
    TAY                         ;$01E0F8    ||  ...Or it would, but that function doesn't work.
    LDA.w DATA_01E07B,Y         ;$01E0F9    ||  (the timer is only set once, so it runs out before jumping)
    BMI CODE_01E103             ;$01E0FC    ||
    STA.w $1564,X               ;$01E0FE    ||
    LDA.b #$80                  ;$01E101    ||
CODE_01E103:                    ;           ||
    STA $AA,X                   ;$01E103    |/
    RTS                         ;$01E105    |

CODE_01E106:                    ;```````````| Podoboo is in the process of jumping.
    JSR SubSprYPosNoGrvty       ;$01E106    | Update Y position.
    LDA $14                     ;$01E109    |\ 
    AND.b #$07                  ;$01E10B    ||
    ORA $C2,X                   ;$01E10D    || If the sprite is specifically a Podoboo (not a Bowser fireball),
    BNE CODE_01E115             ;$01E10F    ||  spawn lava particles every 8 frames.
    JSL CODE_0285DF             ;$01E111    |/
CODE_01E115:                    ;           |
    LDA.w $1564,X               ;$01E115    |\ 
    BNE CODE_01E12A             ;$01E118    ||
    LDA $AA,X                   ;$01E11A    || Apply downwards acceleration,
    BMI CODE_01E125             ;$01E11C    ||  and limit Y speed based on whether the sprite
    LDY $C2,X                   ;$01E11E    ||  is acting as a Podoboo or Bowser's flame.
    CMP.w DATA_01E091,Y         ;$01E120    ||
    BCS CODE_01E12A             ;$01E123    || $1564 is used here, but it ends up
CODE_01E125:                    ;           ||  being #$00 by the time this gets run,
    CLC                         ;$01E125    ||  so it has no effect.
    ADC.b #$02                  ;$01E126    ||
    STA $AA,X                   ;$01E128    |/
CODE_01E12A:                    ;           |
    JSR SubOffscreen0Bnk1       ;$01E12A    | Process offscreen from -$40 to +$30.
CODE_01E12D:                    ;```````````| Physics routines end.
    LDA $C2,X                   ;$01E12D    |\ Branch for the Podoboo's graphics; if running Bowser's fire, continue below.
    BEQ CODE_01E198             ;$01E12F    |/
    LDY $9D                     ;$01E131    |\ Branch to just do the fire's graphics if the game is frozen.
    BNE CODE_01E164             ;$01E133    |/
    LDA.w $1588,X               ;$01E135    |\ 
    AND.b #$04                  ;$01E138    || Branch if not on the ground.
    BEQ CODE_01E151             ;$01E13A    |/
    STZ $AA,X                   ;$01E13C    | Clear Y speed.
    LDA.w $1558,X               ;$01E13E    |\ 
    BEQ CODE_01E14A             ;$01E141    ||
    CMP.b #$01                  ;$01E143    || If the timer hasn't been set yet, set it.
    BNE CODE_01E14F             ;$01E145    || If it's about to run out, erase the fire in a cloud of smoke.
    JMP CODE_019ACB             ;$01E147    ||
CODE_01E14A:                    ;           ||
    LDA.b #$80                  ;$01E14A    ||| How long the Bowser fireballs sit on the floor of Bowser's battle before disappearing.
    STA.w $1558,X               ;$01E14C    ||
CODE_01E14F:                    ;           ||
    BRA CODE_01E164             ;$01E14F    |/

CODE_01E151:                    ;```````````| Fire is still falling.
    TXA                         ;$01E151    |\ 
    ASL                         ;$01E152    ||
    ASL                         ;$01E153    || Wiggle the sprite left and right.
    CLC                         ;$01E154    ||
    ADC $13                     ;$01E155    ||
    LDY.b #$F0                  ;$01E157    ||| Leftwards X speed.
    AND.b #$04                  ;$01E159    ||
    BEQ CODE_01E15F             ;$01E15B    ||
    LDY.b #$10                  ;$01E15D    ||| Rightwards X speed.
CODE_01E15F:                    ;           ||
    STY $B6,X                   ;$01E15F    ||
    JSR SubSprXPosNoGrvty       ;$01E161    |/
CODE_01E164:                    ;```````````| Game is frozen; draw the Bowser fire's graphics.
    LDA $D8,X                   ;$01E164    |\ 
    CMP.b #$F0                  ;$01E166    || Erase if it manages to fall offscreen.
    BCC CODE_01E16D             ;$01E168    ||
    STZ.w $14C8,X               ;$01E16A    |/
CODE_01E16D:                    ;           |
    JSR SubSprGfx2Entry1        ;$01E16D    | Draw a 16x16.
    LDY.w $15EA,X               ;$01E170    |
    PHX                         ;$01E173    |
    LDA $14                     ;$01E174    |\ 
    AND.b #$0C                  ;$01E176    ||
    LSR                         ;$01E178    ||
    ADC.w $15E9                 ;$01E179    ||
    LSR                         ;$01E17C    || Change the tile used.
    AND.b #$03                  ;$01E17D    ||
    TAX                         ;$01E17F    ||
    LDA.w BowserFlameTiles,X    ;$01E180    ||
    STA.w $0302,Y               ;$01E183    |/
    LDA.w DATA_01E194,X         ;$01E186    |\ 
    ORA $64                     ;$01E189    || Change YXPPCCCT.
    STA.w $0303,Y               ;$01E18B    |/
    PLX                         ;$01E18E    |
    RTS                         ;$01E18F    |

BowserFlameTiles:               ;$01E190    | Tile numbers for the Bowser fire's animation.
    db $2A,$2C,$2A,$2C

DATA_01E194:                    ;$01E194    | YXPPCCCT for the Bowser fire's animation.
    db $05,$05,$45,$45


CODE_01E198:                    ;-----------| Podoboo GFX routine.
    LDA.b #$01                  ;$01E198    |\ Draw a 16x16.
    JSR SubSprGfx0Entry0        ;$01E19A    |/
    REP #$20                    ;$01E19D    |
    LDA.w #$0008                ;$01E19F    |\ 
    ASL                         ;$01E1A2    ||
    ASL                         ;$01E1A3    ||
    ASL                         ;$01E1A4    ||
    ASL                         ;$01E1A5    || Store the pointer for the Podoboo's graphics for DMA upload.
    ASL                         ;$01E1A6    ||  ($7E8600; tile 0x548)
    CLC                         ;$01E1A7    || All the math on A here is kinda pointless, can just directly load #$8600.
    ADC.w #$8500                ;$01E1A8    ||
    STA.w $0D8B                 ;$01E1AB    ||
    CLC                         ;$01E1AE    ||
    ADC.w #$0200                ;$01E1AF    ||
    STA.w $0D95                 ;$01E1B2    |/
    SEP #$20                    ;$01E1B5    |
    RTS                         ;$01E1B7    |





InitKeyHole:                    ;-----------| Keyhole INIT
    LDA $E4,X                   ;$01E1B8    |\ 
    CLC                         ;$01E1BA    ||
    ADC.b #$08                  ;$01E1BB    ||
    STA $E4,X                   ;$01E1BD    || Shift 8 pixels right.
    LDA.w $14E0,X               ;$01E1BF    ||
    ADC.b #$00                  ;$01E1C2    ||
    STA.w $14E0,X               ;$01E1C4    |/
    RTS                         ;$01E1C7    |



    ; Keyhole misc RAM:
    ; $151C - Highest sprite slot with a key.
    ; $154C - Flag for the keyhole animation having already been activated.

Keyhole:                        ;-----------| Keyhole MAIN
    LDY.b #$0B                  ;$01E1C7    |\ 
CODE_01E1CA:                    ;           ||
    LDA.w $14C8,Y               ;$01E1CA    ||
    CMP.b #$08                  ;$01E1CD    ||
    BCC CODE_01E1D8             ;$01E1CF    ||
    LDA.w $009E,Y               ;$01E1D1    || Find the highest sprite slot with a key in it.
    CMP.b #$80                  ;$01E1D4    ||
    BEQ CODE_01E1DB             ;$01E1D6    ||
CODE_01E1D8:                    ;           ||
    DEY                         ;$01E1D8    ||
    BPL CODE_01E1CA             ;$01E1D9    |/
CODE_01E1DB:                    ;           |
    LDA.w $187A                 ;$01E1DB    |\ 
    BEQ CODE_01E1E5             ;$01E1DE    || If Yoshi has a key in his mouth, use that instead.
    LDA.w $191C                 ;$01E1E0    ||
    BNE CODE_01E1ED             ;$01E1E3    |/
CODE_01E1E5:                    ;           |
    TYA                         ;$01E1E5    |\ 
    STA.w $151C,X               ;$01E1E6    || If no key is found, branch to just do GFX.
    BMI CODE_01E23A             ;$01E1E9    ||  Else, track that slot.
    BRA CODE_01E1F3             ;$01E1EB    |/

CODE_01E1ED:                    ;```````````| Key in Yoshi's mouth.
    JSL GetMarioClipping        ;$01E1ED    |
    BRA CODE_01E201             ;$01E1F1    |

CODE_01E1F3:                    ;```````````| There is a key free in the level.
    LDA.w $14C8,Y               ;$01E1F3    |\ 
    CMP.b #$0B                  ;$01E1F6    || Skip to just draw graphics if not held by Mario.
    BNE CODE_01E23A             ;$01E1F8    |/
    PHX                         ;$01E1FA    |
    TYX                         ;$01E1FB    |
    JSL GetSpriteClippingB      ;$01E1FC    |
    PLX                         ;$01E200    |
CODE_01E201:                    ;```````````| Check if key is touching the keyhole.
    JSL GetSpriteClippingA      ;$01E201    |\ 
    JSL CheckForContact         ;$01E205    || Skip to just draw graphics if not in contact
    BCC CODE_01E23A             ;$01E209    ||  or if the keyhole animation was already activated.
    LDA.w $154C,X               ;$01E20B    ||
    BNE CODE_01E23A             ;$01E20E    |/
    LDA.b #$30                  ;$01E210    |\ Set keyhole timer.
    STA.w $1434                 ;$01E212    |/
    LDA.b #$10                  ;$01E215    |\ SFX for the keyhole animation.
    STA.w $1DFB                 ;$01E217    |/
    INC.w $13FB                 ;$01E21A    | Freeze player.
    INC $9D                     ;$01E21D    | Freeze sprites.
    LDA.w $14E0,X               ;$01E21F    |\ 
    STA.w $1437                 ;$01E222    ||
    LDA $E4,X                   ;$01E225    ||
    STA.w $1436                 ;$01E227    || Track position for the keyhole window.
    LDA.w $14D4,X               ;$01E22A    ||
    STA.w $1439                 ;$01E22D    ||
    LDA $D8,X                   ;$01E230    ||
    STA.w $1438                 ;$01E232    |/
    LDA.b #$30                  ;$01E235    |\ Set flag to not restart the animation.
    STA.w $154C,X               ;$01E237    |/
CODE_01E23A:                    ;```````````| Keyhole GFX routine.
    JSR GetDrawInfoBnk1         ;$01E23A    |
    LDA $00                     ;$01E23D    |\ 
    STA.w $0300,Y               ;$01E23F    ||
    STA.w $0304,Y               ;$01E242    ||
    LDA $01                     ;$01E245    || Set X/Y position.
    STA.w $0301,Y               ;$01E247    ||
    CLC                         ;$01E24A    ||
    ADC.b #$08                  ;$01E24B    ||
    STA.w $0305,Y               ;$01E24D    |/
    LDA.b #$EB                  ;$01E250    |\ 
    STA.w $0302,Y               ;$01E252    || Set tiles.
    LDA.b #$FB                  ;$01E255    ||
    STA.w $0306,Y               ;$01E257    |/
    LDA.b #$30                  ;$01E25A    |\ 
    STA.w $0303,Y               ;$01E25C    || Set YXPPCCCT.
    STA.w $0307,Y               ;$01E25F    |/
    LDY.b #$00                  ;$01E262    |\ 
    LDA.b #$01                  ;$01E264    || Upload 2 8x8 tiles.
    JSR FinishOAMWriteRt        ;$01E266    |/
    RTS                         ;$01E269    |





CODE_01E26A:                    ;-----------| Subroutine to handle spawning 1ups at the end of the bonus game.
    LDA $13                     ;$01E26A    |\ 
    AND.b #$3F                  ;$01E26C    ||| How often to spawn 1ups after the bonus game.
    BNE CODE_01E27B             ;$01E26E    |/
    LDA.w $1890                 ;$01E270    |\ 
    BEQ CODE_01E27B             ;$01E273    || If there are still 1ups to spawn, spawn one.
    DEC.w $1890                 ;$01E275    ||
    JSR CODE_01E281             ;$01E278    |/
CODE_01E27B:                    ;           |
    LDA.b #$01                  ;$01E27B    |\ Activate the cluster sprite routines.
    STA.w $18B8                 ;$01E27D    |/
    RTS                         ;$01E280    |

CODE_01E281:                    ;```````````| Spawn a bonus game 1up.
    LDY.b #$07                  ;$01E281    |\ 
CODE_01E283:                    ;           ||
    LDA.w $1892,Y               ;$01E283    ||
    BEQ CODE_01E28C             ;$01E286    || Search for an empty cluster sprite slot.
    DEY                         ;$01E288    ||
    BPL CODE_01E283             ;$01E289    ||
    RTS                         ;$01E28B    |/

CODE_01E28C:
    LDA.b #$01                  ;$01E28C    |\\ Cluster sprite number (1up).
    STA.w $1892,Y               ;$01E28E    |/
    LDA.b #$00                  ;$01E291    |\\ Y position (low)
    STA.w $1E02,Y               ;$01E293    ||
    LDA.b #$01                  ;$01E296    ||| Y position (high)
    STA.w $1E2A,Y               ;$01E298    ||
    LDA.b #$18                  ;$01E29B    ||| X position (low)
    STA.w $1E16,Y               ;$01E29D    ||
    LDA.b #$00                  ;$01E2A0    ||| X position (high)
    STA.w $1E3E,Y               ;$01E2A2    |/
    LDA.b #$01                  ;$01E2A5    |\ Initial X speed.
    STA.w $1E66,Y               ;$01E2A7    |/
    LDA.b #$10                  ;$01E2AA    |\ Initial Y speed.
    STA.w $1E52,Y               ;$01E2AC    |/
    RTS                         ;$01E2AF    |





Empty01E2B0:                    ;$01E2B0    | 
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    
DATA_01E2C8:                    ;$01E2C8    | Abandoned data? Not used by anything.
    db $13,$14,$15,$16,$17,$18,$19





    ; Monty Mole misc RAM:
    ; $C2   - Current phase.
    ;          0 = invisible, 1 = dirt animation, 2 = jumping out, 3 = walking
    ; $151C - Flag for whether the mole follows Mario (00) or walks straight and hops (10).
    ; $1540 - Timer for waiting in the ground before jumping out.
    ; $1558 - Timer for the hopping mole's hops.
    ; $1570 - Frame counter for animation.
    ; $157C - Direction the sprite is moving. 0 = right, 1 = left.
    ; $15D0 - Prevents the dirt from animating if set.
    ; $1602 - Animation frame.
    ;          Mole form: 0/1 = walking, 2 = jumping out.
    ;          In dirt: 0 = invisible, 1/2 = ground dirt, 3 = ledge dirt
    
MontyMole:                      ;-----------| Monty Mole MAIN
    JSR SubOffscreen0Bnk1       ;$01E2CF    | Process offscreen from -$40 to +$30.
    LDA $C2,X                   ;$01E2D2    |
    JSL ExecutePtr              ;$01E2D4    |

Ptrs01E2D8:                     ;$01E2D8    | Phase pointers for the Monty Mole.
    dw CODE_01E2E0              ; 0 - Invisible (Mario isn't close)
    dw CODE_01E309              ; 1 - Dirt animation, waiting to jump out
    dw CODE_01E37F              ; 2 - Jumping out
    dw CODE_01E393              ; 3 - Walking



CODE_01E2E0:                    ;-----------| Monty Mole phase 0 - Invisible (Mario isn't close)
    JSR SubHorzPosBnk1          ;$01E2E0    |\ 
    LDA $0F                     ;$01E2E3    ||
    CLC                         ;$01E2E5    ||
    ADC.b #$60                  ;$01E2E6    || Return if Mario isn't within 6 tiles of the sprite on either side,
    CMP.b #$C0                  ;$01E2E8    ||  or if the sprite is horizontally offscreen.
    BCS CODE_01E305             ;$01E2EA    ||
    LDA.w $15A0,X               ;$01E2EC    ||
    BNE CODE_01E305             ;$01E2EF    |/
    INC $C2,X                   ;$01E2F1    | Move to next phase (dirt animation).
    LDY.w $0DB3                 ;$01E2F3    |\ 
    LDA.w $1F11,Y               ;$01E2F6    || Set timer for the dirt animation, based on the current submap.
    TAY                         ;$01E2F9    ||
    LDA.b #$68                  ;$01E2FA    ||| How many frames the Monty Moles wait before jumping out in Yoshi's Island.
    CPY.b #$01                  ;$01E2FC    ||| Map in which the Moles jump out slower on (Yoshi's Island).
    BEQ CODE_01E302             ;$01E2FE    ||
    LDA.b #$20                  ;$01E300    ||| How many frames the Monty Moles wait before jumping out elsewhere.
CODE_01E302:                    ;           ||
    STA.w $1540,X               ;$01E302    |/
CODE_01E305:                    ;           |
    JSR GetDrawInfoBnk1         ;$01E305    | Set up offscreen flags for the next run.
    RTS                         ;$01E308    |



CODE_01E309:                    ;-----------| Monty Mole phase 1 - Dirt animation (waiting to jump out)
    LDA.w $1540,X               ;$01E309    |\ 
    ORA.w $15D0,X               ;$01E30C    || Branch if not time to jump out, or on Yoshi's tongue.
    BNE CODE_01E343             ;$01E30F    |/
    INC $C2,X                   ;$01E311    | Move to next phase (jumping out)
    LDA.b #$B0                  ;$01E313    |\\ Y speed for the Monty mole jumping out of the ground. 
    STA $AA,X                   ;$01E315    |/
    JSR IsSprOffScreen          ;$01E317    |\ 
    BNE CODE_01E320             ;$01E31A    || If not offscreen, spawn dirt particles.
    TAY                         ;$01E31C    ||  (can actually just run the routine directly, no branch necessary)
    JSR CODE_0199E1             ;$01E31D    |/
CODE_01E320:                    ;           |
    JSR FaceMario               ;$01E320    |
    LDA $9E,X                   ;$01E323    |\ 
    CMP.b #$4E                  ;$01E325    ||
    BNE CODE_01E343             ;$01E327    ||
    LDA $E4,X                   ;$01E329    ||
    STA $9A                     ;$01E32B    ||
    LDA.w $14E0,X               ;$01E32D    ||
    STA $9B                     ;$01E330    || Spawn the Monty Mole's hole tile if the sprite is the ledge-dwelling mole.
    LDA $D8,X                   ;$01E332    ||
    STA $98                     ;$01E334    ||
    LDA.w $14D4,X               ;$01E336    ||
    STA $99                     ;$01E339    ||
    LDA.b #$08                  ;$01E33B    ||
    STA $9C                     ;$01E33D    ||
    JSL GenerateTile            ;$01E33F    |/
CODE_01E343:                    ;```````````| Not time to jump out.
    LDA $9E,X                   ;$01E343    |\ 
    CMP.b #$4D                  ;$01E345    || Branch if running the ledge-dwelling mole.
    BNE CODE_01E363             ;$01E347    |/
    LDA $14                     ;$01E349    |\ 
    LSR                         ;$01E34B    ||
    LSR                         ;$01E34C    ||
    LSR                         ;$01E34D    ||
    LSR                         ;$01E34E    || Set animation frame (1/2) for the ground-dwelling mole's dirt.
    AND.b #$01                  ;$01E34F    ||
    TAY                         ;$01E351    ||
    LDA.w DATA_01E35F,Y         ;$01E352    ||
    STA.w $1602,X               ;$01E355    |/
    LDA.w DATA_01E361,Y         ;$01E358    |\ Draw 4 8x8s.
    JSR SubSprGfx0Entry0        ;$01E35B    |/
    RTS                         ;$01E35E    |

DATA_01E35F:                    ;$01E35F    | Animation frames for the ground-dwelling mole while in the dirt.
    db $01,$02

DATA_01E361:                    ;$01E361    | 8x8 YXPPCCCT indices for the ground-dwelling mole's animation.
    db $00,$05

CODE_01E363:                    ;```````````| Ledge-dwelling mole animation.
    LDA $14                     ;$01E363    |\ 
    ASL                         ;$01E365    ||
    ASL                         ;$01E366    || Set X/Y flip for the tile.
    AND.b #$C0                  ;$01E367    ||
    ORA.b #$31                  ;$01E369    ||
    STA.w $15F6,X               ;$01E36B    |/
    LDA.b #$03                  ;$01E36E    |\ Set animation frame (3) for the ledge-dwelling mole's dirt.
    STA.w $1602,X               ;$01E370    |/
    JSR SubSprGfx2Entry1        ;$01E373    | Draw a 16x16.
    LDA.w $15F6,X               ;$01E376    |\ 
    AND.b #$3F                  ;$01E379    || Restore original X/Y flip.
    STA.w $15F6,X               ;$01E37B    |/
    RTS                         ;$01E37E    |



CODE_01E37F:                    ;-----------| Monty Mole phase 2 - Jumping out.
    JSR CODE_01E3EF             ;$01E37F    | Run general routines (GFX, interaction, etc).
    LDA.b #$02                  ;$01E382    |\ Set aniamtion frame (2).
    STA.w $1602,X               ;$01E384    |/
    JSR IsOnGround              ;$01E387    |\ 
    BEQ Return01E38E            ;$01E38A    || If the mole has hit the ground, move to next phase (normal movement).
    INC $C2,X                   ;$01E38C    |/
Return01E38E:                   ;           |
    RTS                         ;$01E38E    |



DATA_01E38F:                    ;$01E38F    | X speeds for the Monty Mole that walks straight.
    db $10,$F0

DATA_01E391:                    ;$01E391    | Maximum X speeds for the Mario-following Monty Mole.
    db $18,$E8

CODE_01E393:                    ;-----------| Monty Mole phase 3 - Walking.
    JSR CODE_01E3EF             ;$01E393    | Run general routines (GFX, interaction, etc).
    LDA.w $151C,X               ;$01E396    |\ Branch if the mole walks straight and hops (as opposed to following Mario).
    BNE CODE_01E3C7             ;$01E399    |/
    JSR SetAnimationFrame       ;$01E39B    |\ Set animation frame (0/1); change every 4 frames.
    JSR SetAnimationFrame       ;$01E39E    |/
    JSL GetRand                 ;$01E3A1    |\ 
    AND.b #$01                  ;$01E3A5    || Return if not time to check direction.
    BNE Return01E3C6            ;$01E3A7    |/
    JSR FaceMario               ;$01E3A9    | Face Mario.
    LDA $B6,X                   ;$01E3AC    |\\ 
    CMP.w DATA_01E391,Y         ;$01E3AE    ||| Return if already at the max speed for that direction.
    BEQ Return01E3C6            ;$01E3B1    ||/
    CLC                         ;$01E3B3    ||\ 
    ADC.w DATA_01EBB4,Y         ;$01E3B4    ||| Else, accelerate horizontally.
    STA $B6,X                   ;$01E3B7    ||/
    TYA                         ;$01E3B9    ||\ 
    LSR                         ;$01E3BA    |||
    ROR                         ;$01E3BB    |||
    EOR $B6,X                   ;$01E3BC    ||| If reversing direction, spawn smoke clouds and animate twice as fast.
    BPL Return01E3C6            ;$01E3BE    |||
    JSR CODE_01804E             ;$01E3C0    |||
    JSR SetAnimationFrame       ;$01E3C3    |//
Return01E3C6:                   ;           |
    RTS                         ;$01E3C6    |


CODE_01E3C7:                    ;```````````| Mole that moves straight and hops.
    JSR IsOnGround              ;$01E3C7    |\ Freeze animation frame and speed if falling.
    BEQ CODE_01E3E9             ;$01E3CA    |/
    JSR SetAnimationFrame       ;$01E3CC    |\ Set animation frame (0/1); change every 4 frames.
    JSR SetAnimationFrame       ;$01E3CF    |/
    LDY.w $157C,X               ;$01E3D2    |\ 
    LDA.w DATA_01E38F,Y         ;$01E3D5    || Set X speed based on direction.
    STA $B6,X                   ;$01E3D8    |/
    LDA.w $1558,X               ;$01E3DA    |\ 
    BNE Return01E3E8            ;$01E3DD    || Handle hopping.
    LDA.b #$50                  ;$01E3DF    ||| Frames between hops.
    STA.w $1558,X               ;$01E3E1    ||
    LDA.b #$D8                  ;$01E3E4    ||| Y speed to hop with.
    STA $AA,X                   ;$01E3E6    |/
Return01E3E8:                   ;           |
    RTS                         ;$01E3E8    |

CODE_01E3E9:                    ;```````````| Mole is falling.
    LDA.b #$01                  ;$01E3E9    |\ Freeze animation frame (1).
    STA.w $1602,X               ;$01E3EB    |/
    RTS                         ;$01E3EE    |



CODE_01E3EF:                    ;-----------| General Monty Mole subroutine (GFX, Mario/sprite/object interaction).
    LDA $64                     ;$01E3EF    |\ 
    PHA                         ;$01E3F1    ||
    LDA.w $1540,X               ;$01E3F2    || Send behind other sprites if currently in the ground.
    BEQ CODE_01E3FB             ;$01E3F5    ||
    LDA.b #$10                  ;$01E3F7    ||
    STA $64                     ;$01E3F9    |/
CODE_01E3FB:                    ;           |
    JSR SubSprGfx2Entry1        ;$01E3FB    | Draw a 16x16 sprite.
    PLA                         ;$01E3FE    |
    STA $64                     ;$01E3FF    |
    LDA $9D                     ;$01E401    |\ Return if game frozen.
    BNE CODE_01E41C             ;$01E403    |/
    JSR SubSprSprPMarioSpr      ;$01E405    | Process Mario and sprite interaction.
    JSR SubUpdateSprPos         ;$01E408    | Update X/Y position, apply gravity, and process interaction with blocks.
    JSR IsOnGround              ;$01E40B    |\ 
    BEQ CODE_01E413             ;$01E40E    || If on the ground, clear Y speed.
    JSR SetSomeYSpeed           ;$01E410    |/
CODE_01E413:                    ;           |
    JSR IsTouchingObjSide       ;$01E413    |\ 
    BEQ Return01E41B            ;$01E416    || If hitting the side of a block, change direction.
    JSR FlipSpriteDir           ;$01E418    |/
Return01E41B:                   ;           |
    RTS                         ;$01E41B    |

CODE_01E41C:
    PLA                         ;$01E41C    |
    PLA                         ;$01E41D    |
    RTS                         ;$01E41E    |





DATA_01E41F:                    ;$01E41F    | X speeds for the Dry Bones / Bony Beetle.
    db $08,$F8

DATA_01E421:                    ;$01E421    | Unused?
    db $02,$03,$04,$04,$04,$04
    db $04,$04,$04,$04
    
    ; Dry Bones and Bony Beetle misc RAM:
    ; $C2   - Used as a flag by the ledge Dry Bones to indicate it just walked off a ledge.
    ; $1528 - Timer for the Bony Beetle, to hide in its shell. Increments constantly.
    ; $1534 - Flag for the sprite being collapsed.
    ; $1540 - Timer for pausing the sprite at various times.
    ;          Dry Bones: Set to #$3F when throwing a bone.
    ;          Bony Beetle: Set to #$A0 when hiding in its shell.
    ;          Collapsed: Set to #$FF for waiting to repair itself.
    ; $1570 - Frame counter for animation.
    ; $157C - Direction the sprite is facing. 0 = right, 1 = left.
    ; $15AC - Turn timer, only used by the ledge Dry Bones. Set to #$08 when turning at the edge of a ledge.
    ; $1602 - Animation frame. 0/1 = walking, 2 = dry bones throwing, 2/3 bony beetle hiding
    ; $163E - Freezes the sprite in place and prevents it from attacking, but interaction with Mario is unaffected. Seems to be unused.

DryBonesAndBeetle:              ;-----------| Dry Bones MAIN and Bony Beetle MAIN
    LDA.w $14C8,X               ;$01E42B    |\ 
    CMP.b #$08                  ;$01E42E    ||
    BEQ CODE_01E43E             ;$01E430    || If dying, skip down to handle graphics.
    ASL.w $15F6,X               ;$01E432    ||  And flip the Bony Beetle upside down, too.
    SEC                         ;$01E435    ||
    ROR.w $15F6,X               ;$01E436    ||
    JMP CODE_01E5BF             ;$01E439    |/


DATA_01E43C:                    ;$01E43C    | X offsets for the second (head) tile of the Dry Bones / Bony Beetle's collapsed graphic.
    db $08,$F8

CODE_01E43E:
    LDA.w $1534,X               ;$01E43E    |\ Branch if the sprite is not collapsed.
    BEQ CODE_01E4C0             ;$01E441    |/
    JSR SubSprGfx2Entry1        ;$01E443    | Draw a 16x16.
    LDY.w $1540,X               ;$01E446    |\ 
    BNE CODE_01E453             ;$01E449    ||
    STZ.w $1534,X               ;$01E44B    || If the timer has run out, return to normal movement and face Mario.
    PHY                         ;$01E44E    ||
    JSR FaceMario               ;$01E44F    ||
    PLY                         ;$01E452    |/
CODE_01E453:                    ;           |
    LDA.b #$48                  ;$01E453    |\\ Tile to use mid-collpase tile.
    CPY.b #$10                  ;$01E455    ||
    BCC CODE_01E45F             ;$01E457    ||
    CPY.b #$F0                  ;$01E459    || Change tile.
    BCS CODE_01E45F             ;$01E45B    ||
    LDA.b #$2E                  ;$01E45D    ||| Tile to use when fully collapsed.
CODE_01E45F:                    ;           ||
    LDY.w $15EA,X               ;$01E45F    ||
    STA.w $0302,Y               ;$01E462    |/
    TYA                         ;$01E465    |
    CLC                         ;$01E466    |
    ADC.b #$04                  ;$01E467    |
    STA.w $15EA,X               ;$01E469    |
    PHX                         ;$01E46C    |
    LDA.w $157C,X               ;$01E46D    |\ 
    TAX                         ;$01E470    ||
    LDA.w $0300,Y               ;$01E471    ||
    CLC                         ;$01E474    ||
    ADC.w DATA_01E43C,X         ;$01E475    ||
    PLX                         ;$01E478    ||
    STA.w $0304,Y               ;$01E479    || Draw the second 16x16 tile,
    LDA.w $0301,Y               ;$01E47C    ||  located one tile to the left of the 16x16 tile from before.
    STA.w $0305,Y               ;$01E47F    ||
    LDA.w $0303,Y               ;$01E482    ||
    STA.w $0307,Y               ;$01E485    ||
    LDA.w $0302,Y               ;$01E488    ||
    DEC A                       ;$01E48B    ||
    STA.w $0306,Y               ;$01E48C    |/
    LDA.w $1540,X               ;$01E48F    |\ 
    BEQ CODE_01E4AC             ;$01E492    ||
    CMP.b #$40                  ;$01E494    ||| Time at which to start shaking.
    BCS CODE_01E4AC             ;$01E496    ||
    LSR                         ;$01E498    ||
    LSR                         ;$01E499    ||
    PHP                         ;$01E49A    || Shake the sprite side to side when about to fix itself.
    LDA.w $0300,Y               ;$01E49B    ||
    ADC.b #$00                  ;$01E49E    ||
    STA.w $0300,Y               ;$01E4A0    ||
    PLP                         ;$01E4A3    ||
    LDA.w $0304,Y               ;$01E4A4    ||
    ADC.b #$00                  ;$01E4A7    ||
    STA.w $0304,Y               ;$01E4A9    |/
CODE_01E4AC:                    ;           |
    LDY.b #$02                  ;$01E4AC    |\ 
    LDA.b #$01                  ;$01E4AE    || Draw two 16x16s.
    JSR FinishOAMWriteRt        ;$01E4B0    |/
    JSR SubUpdateSprPos         ;$01E4B3    | Update X/Y position, apply gravity, and process interaction with blocks.
    JSR IsOnGround              ;$01E4B6    |\ 
    BEQ Return01E4BF            ;$01E4B9    || If on the ground, clear X/Y speed.
    STZ $AA,X                   ;$01E4BB    ||
    STZ $B6,X                   ;$01E4BD    |/
Return01E4BF:                   ;           |
    RTS                         ;$01E4BF    |


CODE_01E4C0:                    ;```````````| Dry Bones / Bony Beetle is not collapsed.
    LDA $9D                     ;$01E4C0    |\ 
    ORA.w $163E,X               ;$01E4C2    || Skip down to graphics/interaction if game is frozen. (or an unused condition?)
    BEQ CODE_01E4CA             ;$01E4C5    ||
    JMP CODE_01E5B6             ;$01E4C7    |/

CODE_01E4CA:                    ;```````````| Game isn't frozen.
    LDY.w $157C,X               ;$01E4CA    |\ 
    LDA.w DATA_01E41F,Y         ;$01E4CD    ||
    EOR.w $15B8,X               ;$01E4D0    ||
    ASL                         ;$01E4D3    ||
    LDA.w DATA_01E41F,Y         ;$01E4D4    || Set walking X speed.
    BCC CODE_01E4DD             ;$01E4D7    || Decelerate depending on the slope it's on.
    CLC                         ;$01E4D9    ||
    ADC.w $15B8,X               ;$01E4DA    ||
CODE_01E4DD:                    ;           ||
    STA $B6,X                   ;$01E4DD    |/
    LDA.w $1540,X               ;$01E4DF    |\ 
    BNE CODE_01E4ED             ;$01E4E2    ||
    TYA                         ;$01E4E4    ||
    INC A                       ;$01E4E5    || Clear X speed if collapsed
    AND.w $1588,X               ;$01E4E6    ||  or trying to walk up/down a conveyor
    AND.b #$03                  ;$01E4E9    ||  moving the opposite direction.
    BEQ CODE_01E4EF             ;$01E4EB    ||
CODE_01E4ED:                    ;           ||
    STZ $B6,X                   ;$01E4ED    |/
CODE_01E4EF:                    ;           |
    JSR IsTouchingCeiling       ;$01E4EF    |\ 
    BEQ CODE_01E4F6             ;$01E4F2    || Clear Y speed if it touches a ceiling.
    STZ $AA,X                   ;$01E4F4    |/
CODE_01E4F6:                    ;           |
    JSR SubOffscreen0Bnk1       ;$01E4F6    | Process offscreen from -$40 to +$30.
    JSR SubUpdateSprPos         ;$01E4F9    | Update X/Y position, apply gravity, and process interaction with blocks.
    LDA $9E,X                   ;$01E4FC    |\ 
    CMP.b #$31                  ;$01E4FE    || Branch if not the Bony Beetle.
    BNE CODE_01E51E             ;$01E500    |/
    LDA.w $1540,X               ;$01E502    |\ Branch if not hiding in its shell.
    BEQ CODE_01E542             ;$01E505    |/
    LDY.b #$00                  ;$01E507    |\ 
    CMP.b #$70                  ;$01E509    ||
    BCS CODE_01E518             ;$01E50B    ||
    INY                         ;$01E50D    ||
    INY                         ;$01E50E    ||
    CMP.b #$08                  ;$01E50F    ||
    BCC CODE_01E518             ;$01E511    || Handle the animation for hiding the beetle in its shell.
    CMP.b #$68                  ;$01E513    ||
    BCS CODE_01E518             ;$01E515    ||
    INY                         ;$01E517    ||
CODE_01E518:                    ;           ||
    TYA                         ;$01E518    ||
    STA.w $1602,X               ;$01E519    |/
    BRA CODE_01E563             ;$01E51C    | Skip down.

CODE_01E51E:                    ;```````````| Dry Bones (not Bony Beetle).
    CMP.b #$30                  ;$01E51E    |\ 
    BEQ CODE_01E52D             ;$01E520    ||
    CMP.b #$32                  ;$01E522    ||
    BNE CODE_01E542             ;$01E524    ||
    LDA.w $13BF                 ;$01E526    ||
    CMP.b #$31                  ;$01E529    ||| Translevel that sprite 32 throws bones in. (modify $01E5A3 too)
    BNE CODE_01E542             ;$01E52B    ||
CODE_01E52D:                    ;           || If sprite 30 (dry bones, throws), make it throw bones.
    LDA.w $1540,X               ;$01E52D    || If sprite 32 (dry bones, ledges) and in level 10D, make it also throw bones.
    BEQ CODE_01E542             ;$01E530    ||
    CMP.b #$01                  ;$01E532    ||
    BNE CODE_01E53A             ;$01E534    ||
    JSL CODE_03C44E             ;$01E536    ||
CODE_01E53A:                    ;           ||
    LDA.b #$02                  ;$01E53A    ||
    STA.w $1602,X               ;$01E53C    ||
    JMP CODE_01E5B6             ;$01E53F    |/

CODE_01E542:                    ;```````````| Not throwing a bone / hiding in the beetle's shell.
    JSR IsOnGround              ;$01E542    |\ Branch if in midair.
    BEQ CODE_01E563             ;$01E545    |/
    JSR SetSomeYSpeed           ;$01E547    | Clear Y speed.
    JSR SetAnimationFrame       ;$01E54A    | Animate walking (0/1).
    LDA $9E,X                   ;$01E54D    |\ 
    CMP.b #$32                  ;$01E54F    ||
    BNE CODE_01E557             ;$01E551    || Clear the ledge Dry Bones' turn flag.
    STZ $C2,X                   ;$01E553    ||
    BRA CODE_01E561             ;$01E555    |/

CODE_01E557:
    LDA.w $1570,X               ;$01E557    |\ 
    AND.b #$7F                  ;$01E55A    || Turn the throwing Dry Bones and Bony Beetle towards Mario every so often.
    BNE CODE_01E561             ;$01E55C    ||
    JSR FaceMario               ;$01E55E    |/
CODE_01E561:                    ;           |
    BRA CODE_01E57B             ;$01E561    |

CODE_01E563:                    ;```````````| Sprite is not walking (i.e. in midair or bony beetle hiding)
    STZ.w $1570,X               ;$01E563    |
    LDA $9E,X                   ;$01E566    |\ 
    CMP.b #$32                  ;$01E568    ||
    BNE CODE_01E57B             ;$01E56A    ||
    LDA $C2,X                   ;$01E56C    ||
    BNE CODE_01E57B             ;$01E56E    || Stay on ledges if sprite 32 (dry bones, ledges).
    INC $C2,X                   ;$01E570    ||
    JSR FlipSpriteDir           ;$01E572    ||
    JSR SubSprXPosNoGrvty       ;$01E575    ||
    JSR SubSprXPosNoGrvty       ;$01E578    |/
CODE_01E57B:                    ;```````````| Code reconvenes.
    LDA $9E,X                   ;$01E57B    |\ 
    CMP.b #$31                  ;$01E57D    ||
    BNE CODE_01E598             ;$01E57F    ||
    LDA $13                     ;$01E581    ||
    LSR                         ;$01E583    ||
    BCC CODE_01E589             ;$01E584    || Handle the Bony Beetle's "waiting to hide" timer.
    INC.w $1528,X               ;$01E586    ||
CODE_01E589:                    ;           ||
    LDA.w $1528,X               ;$01E589    ||
    BNE CODE_01E5B6             ;$01E58C    ||
    INC.w $1528,X               ;$01E58E    ||
    LDA.b #$A0                  ;$01E591    ||| How many frames the beetle hides in its shell for.
    STA.w $1540,X               ;$01E593    |/
    BRA CODE_01E5B6             ;$01E596    |

CODE_01E598:                    ;```````````| Dry Bones only again; handle throwing bones (the second part of the routine from earlier).
    CMP.b #$30                  ;$01E598    |\ 
    BEQ CODE_01E5A7             ;$01E59A    ||
    CMP.b #$32                  ;$01E59C    ||
    BNE CODE_01E5B6             ;$01E59E    ||
    LDA.w $13BF                 ;$01E5A0    ||
    CMP.b #$31                  ;$01E5A3    ||| Translevel that sprite 32 throws bones in. (modify $01E529 too)
    BNE CODE_01E5B6             ;$01E5A5    ||
CODE_01E5A7:                    ;           || If sprite 30 (dry bones, throws), make it throw bones.
    LDA.w $1570,X               ;$01E5A7    || If sprite 32 (dry bones, ledges) and in level 10D, make it also throw bones
    CLC                         ;$01E5AA    ||
    ADC.b #$40                  ;$01E5AB    ||
    AND.b #$7F                  ;$01E5AD    ||
    BNE CODE_01E5B6             ;$01E5AF    ||
    LDA.b #$3F                  ;$01E5B1    ||
    STA.w $1540,X               ;$01E5B3    |/
CODE_01E5B6:                    ;           |
    JSR CODE_01E5C4             ;$01E5B6    | Process Mario interaction.
    JSR SubSprSprInteract       ;$01E5B9    | Process sprite interaction.
    JSR FlipIfTouchingObj       ;$01E5BC    | Flip if touching a block.
CODE_01E5BF:                    ;           |
    JSL CODE_03C390             ;$01E5BF    | Draw GFX.
    RTS                         ;$01E5C3    |


CODE_01E5C4:                    ;```````````| Subroutine to process Dry Bones / Bony Beetle interaction with Mario.
    JSR MarioSprInteractRt      ;$01E5C4    |\ Return if not in contact with Mario.
    BCC Return01E610            ;$01E5C7    |/
    LDA $D3                     ;$01E5C9    |\ 
    CLC                         ;$01E5CB    ||
    ADC.b #$14                  ;$01E5CC    ||
    CMP $D8,X                   ;$01E5CE    || Branch to hurt Mario if not touching the top of the sprite,
    BPL CODE_01E604             ;$01E5D0    ||  or moving upwards without having hit any other enemies yet.
    LDA.w $1697                 ;$01E5D2    ||
    BNE CODE_01E5DB             ;$01E5D5    ||
    LDA $7D                     ;$01E5D7    ||
    BMI CODE_01E604             ;$01E5D9    |/
CODE_01E5DB:                    ;```````````| Hitting the top of the sprite.
    LDA $9E,X                   ;$01E5DB    |\ 
    CMP.b #$31                  ;$01E5DD    ||
    BNE CODE_01E5EB             ;$01E5DF    ||
    LDA.w $1540,X               ;$01E5E1    || Hurt Mario if he hits the Bony Beetle while it's hiding.
    SEC                         ;$01E5E4    ||
    SBC.b #$08                  ;$01E5E5    ||
    CMP.b #$60                  ;$01E5E7    ||
    BCC CODE_01E604             ;$01E5E9    |/
CODE_01E5EB:                    ;           |
    JSR CODE_01AB46             ;$01E5EB    | Give points and increase bounce counter.
    JSL DispContactMario        ;$01E5EE    | Display a contact sprite.
    LDA.b #$07                  ;$01E5F2    |\ SFX for the Dry Bones / Bony Beetle collapsing.
    STA.w $1DF9                 ;$01E5F4    |/
    JSL BoostMarioSpeed         ;$01E5F7    | Boost Mario upwards.
    INC.w $1534,X               ;$01E5FB    |\ 
    LDA.b #$FF                  ;$01E5FE    || Set collapsed flag and timer for the sprite.
    STA.w $1540,X               ;$01E600    |/
    RTS                         ;$01E603    |

CODE_01E604:                    ;```````````| Didn't bounce off.
    JSL HurtMario               ;$01E604    | Hurt Mario.
    LDA.w $1497                 ;$01E608    |\ 
    BNE Return01E610            ;$01E60B    || Face the sprite towards Mario if he's not invulnerable.
    JSR FaceMario               ;$01E60D    |/
Return01E610:                   ;           |
    RTS                         ;$01E610    |





DATA_01E611:                    ;$01E610    | Frames for the springboard animation. Indexed by $1540 divided by 2.
    db $00,$01,$02,$02,$02,$01,$01,$00
    db $00

DATA_01E61A:                    ;$01E61A    | Y offsets for Mario from the springboard during the spring animation.
    db $1E,$1B,$18,$18,$18,$1A,$1C,$1D
    db $1E

    ; Springboard misc RAM:
    ; $1540 - Timer for the springboard's animation. Set to #$11 when Mario lands on it.
    ; $154C - Timer for disabling interaction with Mario. Set to #$10 when dropping, throwing, or kicking. But, uh, cleared when Mario touches it.
    ; $157C - Direction the sprite is facing. 00 = right, 01 = left
    ; $1602 - Animation frame to use.
    ;          0 = normal, 1/2 = pressing animation

SpringBoardMain:                ;-----------| Springboard MAIN
    LDA $9D                     ;$01E623    |\ 
    BEQ CODE_01E62A             ;$01E625    || If sprites are frozen, just draw graphics.
    JMP CODE_01E6F0             ;$01E627    |/

CODE_01E62A:
    JSR SubOffscreen0Bnk1       ;$01E62A    | Process offscreen from -$40 to +$30.
    JSR SubUpdateSprPos         ;$01E62D    | Update X/Y position, apply gravity, and process interaction with blocks.
    JSR IsOnGround              ;$01E630    |\ 
    BEQ CODE_01E638             ;$01E633    || If it's on the ground, do make it bounce.
    JSR CODE_0197D5             ;$01E635    |/
CODE_01E638:                    ;           |
    JSR IsTouchingObjSide       ;$01E638    |\ 
    BEQ CODE_01E649             ;$01E63B    ||
    JSR FlipSpriteDir           ;$01E63D    ||
    LDA $B6,X                   ;$01E640    ||
    ASL                         ;$01E642    || If it hits the side of a block, bounce it back at 1/4th speed.
    PHP                         ;$01E643    ||
    ROR $B6,X                   ;$01E644    ||
    PLP                         ;$01E646    ||
    ROR $B6,X                   ;$01E647    |/
CODE_01E649:                    ;           |
    JSR IsTouchingCeiling       ;$01E649    |\ 
    BEQ CODE_01E650             ;$01E64C    || If it hits a ceiling, clear Y speed.
    STZ $AA,X                   ;$01E64E    |/
CODE_01E650:                    ;           |
    LDA.w $1540,X               ;$01E650    |\ Branch if Mario is not being sprung by the springboard. 
    BEQ CODE_01E6B0             ;$01E653    |/
    LSR                         ;$01E655    |
    TAY                         ;$01E656    |
    LDA.w $187A                 ;$01E657    |\ 
    CMP.b #$01                  ;$01E65A    ||
    LDA.w DATA_01E61A,Y         ;$01E65C    ||
    BCC CODE_01E664             ;$01E65F    || Get a Y position offset for Mario.
    CLC                         ;$01E661    ||
    ADC.b #$12                  ;$01E662    ||
CODE_01E664:                    ;           ||
    STA $00                     ;$01E664    |/
    LDA.w DATA_01E611,Y         ;$01E666    |\ Get the animation frame to use.
    STA.w $1602,X               ;$01E669    |/
    LDA $D8,X                   ;$01E66C    |\ 
    SEC                         ;$01E66E    ||
    SBC $00                     ;$01E66F    ||
    STA $96                     ;$01E671    || Offset Mario vertically from the spring.
    LDA.w $14D4,X               ;$01E673    ||
    SBC.b #$00                  ;$01E676    ||
    STA $97                     ;$01E678    |/
    STZ $72                     ;$01E67A    | Mario is not in the air.
    STZ $7B                     ;$01E67C    | Clear Mario's X speed.
    LDA.b #$02                  ;$01E67E    |\ Mario is standing on a springboard.
    STA.w $1471                 ;$01E680    |/
    LDA.w $1540,X               ;$01E683    |\ 
    CMP.b #$07                  ;$01E686    || If the spring timer is not in its last frame of animation, branch.
    BCS CODE_01E6AE             ;$01E688    |/
    STZ.w $1471                 ;$01E68A    |
    LDY.b #$B0                  ;$01E68D    |\\ Y speed to give Mario if A or B are not held on a springboard.
    LDA $17                     ;$01E68F    ||\ 
    BPL CODE_01E69A             ;$01E691    ||| If A is held, make Mario spinjump.
    LDA.b #$01                  ;$01E693    |||
    STA.w $140D                 ;$01E695    ||/
    BRA CODE_01E69E             ;$01E698    ||
CODE_01E69A:                    ;           ||
    LDA $15                     ;$01E69A    ||
    BPL CODE_01E6A7             ;$01E69C    ||
CODE_01E69E:                    ;           ||
    LDA.b #$0B                  ;$01E69E    ||
    STA $72                     ;$01E6A0    ||
    LDY.b #$80                  ;$01E6A2    ||| Y speed to give Mario if A or B are held on a springboard.
    STY.w $1406                 ;$01E6A4    ||
CODE_01E6A7:                    ;           ||
    STY $7D                     ;$01E6A7    |/
    LDA.b #$08                  ;$01E6A9    |\ SFX for bouncing off a springboard.
    STA.w $1DFC                 ;$01E6AB    |/
CODE_01E6AE:                    ;           |
    BRA CODE_01E6F0             ;$01E6AE    |

CODE_01E6B0:                    ;```````````| Mario is not landing on the springboard.
    JSR ProcessInteract         ;$01E6B0    |\ If Mario isn't touching the spring, just draw its graphics.
    BCC CODE_01E6F0             ;$01E6B3    |/
    STZ.w $154C,X               ;$01E6B5    | Enable interaction immediately.
    LDA $D8,X                   ;$01E6B8    |\ 
    SEC                         ;$01E6BA    ||
    SBC $96                     ;$01E6BB    || Check vertical proximity to the springboard.
    CLC                         ;$01E6BD    ||  If Mario is inside the sprite, branch down.
    ADC.b #$04                  ;$01E6BE    ||  If he's above, branch further.
    CMP.b #$1C                  ;$01E6C0    ||  Else if he's below it, continue.
    BCC CODE_01E6CE             ;$01E6C2    ||
    BPL CODE_01E6E7             ;$01E6C4    |/
    LDA $7D                     ;$01E6C6    |\ 
    BPL CODE_01E6F0             ;$01E6C8    || If Mario is going downward, clear his speed.
    STZ $7D                     ;$01E6CA    ||  Then draw graphics either way.
    BRA CODE_01E6F0             ;$01E6CC    |/

CODE_01E6CE:                    ;```````````| Mario is vertically inside the springboard.
    BIT $15                     ;$01E6CE    |\ 
    BVC CODE_01E6E2             ;$01E6D0    ||
    LDA.w $1470                 ;$01E6D2    || Branch if: Y/X aren't pressed, Mario is already carrying something, or Mario is riding Yoshi.
    ORA.w $187A                 ;$01E6D5    ||
    BNE CODE_01E6E2             ;$01E6D8    |/
    LDA.b #$0B                  ;$01E6DA    |\ Set the springboard to carried status.
    STA.w $14C8,X               ;$01E6DC    |/
    STZ.w $1602,X               ;$01E6DF    |
CODE_01E6E2:                    ;           |
    JSR CODE_01AB31             ;$01E6E2    |
    BRA CODE_01E6F0             ;$01E6E5    |

CODE_01E6E7:                    ;```````````| Mario is above the springboard.
    LDA $7D                     ;$01E6E7    |\ 
    BMI CODE_01E6F0             ;$01E6E9    || If Mario is falling onto the spring, set the spring timer.
    LDA.b #$11                  ;$01E6EB    ||
    STA.w $1540,X               ;$01E6ED    |/
CODE_01E6F0:                    ;```````````| Draw springboard graphics.
    LDY.w $1602,X               ;$01E6F0    |
    LDA.w DATA_01E6FD,Y         ;$01E6F3    |
    TAY                         ;$01E6F6    |
    LDA.b #$02                  ;$01E6F7    |\ Draw 4 8x8s, X and Y flipped in a square.
    JSR SubSprGfx0Entry1        ;$01E6F9    |/
    RTS                         ;$01E6FC    |

DATA_01E6FD:                    ;$01E6FD    | Y position offsets for each frame of the springboard's animation.
    db $00,$02,$00





SmushedGfxRt:                   ;-----------| Subroutine to draw squished graphics for sprites. Draws two mirrored 8x8s.
    JSR GetDrawInfoBnk1         ;$01E700    |
    JSR IsSprOffScreen          ;$01E703    |\ Don't draw if offscreen.
    BNE Return01E75A            ;$01E706    |/
    LDA $00                     ;$01E708    |\ 
    STA.w $0300,Y               ;$01E70A    ||
    CLC                         ;$01E70D    ||
    ADC.b #$08                  ;$01E70E    ||
    STA.w $0304,Y               ;$01E710    || Draw at the sprite's position.
    LDA $01                     ;$01E713    ||
    CLC                         ;$01E715    ||
    ADC.b #$08                  ;$01E716    ||
    STA.w $0301,Y               ;$01E718    ||
    STA.w $0305,Y               ;$01E71B    |/
    PHX                         ;$01E71E    |
    LDA $9E,X                   ;$01E71F    |
    TAX                         ;$01E721    |
    LDA.b #$FE                  ;$01E722    |\ 
    CPX.b #$3E                  ;$01E724    || Use tile FE if sprite 3E (P-switch)
    BEQ CODE_01E73A             ;$01E726    |/
    LDA.b #$EE                  ;$01E728    |\ 
    CPX.b #$BD                  ;$01E72A    ||
    BEQ CODE_01E73A             ;$01E72C    || Use tile EE if sprite BD (sliding blue Koopa) or 00-03 (shell-less Koopas)
    CPX.b #$04                  ;$01E72E    ||
    BCC CODE_01E73A             ;$01E730    |/
    LDA.b #$C7                  ;$01E732    |\ 
    CPX.b #$0F                  ;$01E734    || Use tile C7 if sprite 0F (Goomba)
    BCS CODE_01E73A             ;$01E736    |/
    LDA.b #$4D                  ;$01E738    | Use tile 4D if anything else (glitchy...)
CODE_01E73A:                    ;           |
    STA.w $0302,Y               ;$01E73A    |
    STA.w $0306,Y               ;$01E73D    |
    PLX                         ;$01E740    |
    LDA $64                     ;$01E741    |\ 
    ORA.w $15F6,X               ;$01E743    ||
    STA.w $0303,Y               ;$01E746    || X flip the second tile.
    ORA.b #$40                  ;$01E749    ||
    STA.w $0307,Y               ;$01E74B    |/
    TYA                         ;$01E74E    |
    LSR                         ;$01E74F    |
    LSR                         ;$01E750    |
    TAY                         ;$01E751    |
    LDA.b #$00                  ;$01E752    |\ 
    STA.w $0460,Y               ;$01E754    || Make them 8x8 size.
    STA.w $0461,Y               ;$01E757    |/
Return01E75A:                   ;           |
    RTS                         ;$01E75A    |





    ; Display Level Message 1 misc RAM:
    ; $1564 - Timer to wait before actually showing the message. Set to #$28 on spawn.

DisplayMsg1:                    ;-----------| Display Level Message 1 MAIN (also kinda P-switch MAIN, but its actual MAIN is at $01A1FD)
    LDA.w $1564,X               ;$01E75B    |\ 
    CMP.b #$01                  ;$01E75E    || Return if not time to show the message.
    BNE Return01E76E            ;$01E760    |/
    STA.w $1F11                 ;$01E762    |\ Move Mario to the YI submap. [hijacked by LM, goes to $03BCA0]
    STA.w $1FB8                 ;$01E765    |/
    STZ.w $14C8,X               ;$01E768    | Erase the sprite.
    INC.w $1426                 ;$01E76B    | Show message 1.
Return01E76E:                   ;           |
    RTS                         ;$01E76E    |





DATA_01E76F:                    ;$01E76F    | X positions for tiles in each frame of the Lakitu cloud's animation. 4 tiles per frame.
    db $FC,$04,$FE,$02
    db $FB,$05,$FD,$03
    db $FA,$06,$FC,$04
    db $FB,$05,$FD,$03

DATA_01E77F:                    ;$01E77F    | Y positions for tiles in each frame of the Lakitu cloud's animation. 4 tiles per frame.
    db $00,$FF,$03,$04
    db $FF,$FE,$04,$03
    db $FE,$FF,$03,$03
    db $FF,$00,$03,$03
    db $F8,$FC,$00,$04          ; These four seem unused.

DATA_01E793:                    ;$01E793    | Y position offsets for the Lakitu cloud's 'floating' animation while Mario or a Lakitu is inside.
    db $0E,$0F,$10,$11,$12,$11,$10,$0F      ; 00-07 are for Mario/Lakitu.
    db $1A,$1B,$1C,$1D,$1E,$1D,$1C,$1B      ; 08-0F are for Mario with a Yoshi.
    db $1A                                  ; This byte seems unused.

    ; Lakitu Cloud misc RAM:
    ; $C2   - Flag for Mario being in the cloud.
    ; $151C - Flag to update the X/Y position of the cloud after the Lakitu is killed. Set to #$10 after Mario enters it for the first time.
    ; $1534 - Direction of vertical acceleration when a Lakitu is inside. Even = down, odd = up.
    ; $1540 - Timer for evaporating the cloud once its timer runs out.
    ; $154C - Timer for disabling Mario interaction. Always set to #$10 while a Lakitu is inside, and set to #$10 after jumping out of the cloud.
    ; $160E - Sprite slot containing the cloud's Lakitu. Uses the highest slot it can find at any given time.
    
LakituCloud:                    ;-----------| Lakitu Cloud MAIN
    LDA $9D                     ;$01E7A4    |\ 
    BEQ CODE_01E7AB             ;$01E7A6    || Skip down to just do graphics if game frozen.
CODE_01E7A8:                    ;           ||
    JMP LakituCloudGfx          ;$01E7A8    |/

CODE_01E7AB:                    ;```````````| Game not frozen.
    LDY.w $18E0                 ;$01E7AB    |\\ 
    BEQ CODE_01E7C5             ;$01E7AE    |||
    LDA $14                     ;$01E7B0    |||
    AND.b #$03                  ;$01E7B2    |||
    BNE CODE_01E7C5             ;$01E7B4    |||
    LDA.w $18E0                 ;$01E7B6    ||| Set the cloud to evaporate if its timer has run out.
    BEQ CODE_01E7C5             ;$01E7B9    |||
    DEC.w $18E0                 ;$01E7BB    |||
    BNE CODE_01E7C5             ;$01E7BE    |||
    LDA.b #$1F                  ;$01E7C0    |||
    STA.w $1540,X               ;$01E7C2    ||/
CODE_01E7C5:                    ;           ||
    LDA.w $1540,X               ;$01E7C5    ||\ 
    BEQ CODE_01E7DB             ;$01E7C8    |||
    DEC A                       ;$01E7CA    ||| Erase the sprite once its evaporation timer runs out, and set the time for spawning the next Lakitu.
    BNE CODE_01E7A8             ;$01E7CB    |||
    STZ.w $14C8,X               ;$01E7CD    |||
    LDA.b #$FF                  ;$01E7D0    |||| How long before the next Lakitu appears.
    STA.w $18C0                 ;$01E7D2    |||
    LDA.b #$1E                  ;$01E7D5    |||| Which sprite spawns after the timer runs out (1E - Lakitu)
    STA.w $18C1                 ;$01E7D7    |//
    RTS                         ;$01E7DA    |

CODE_01E7DB:                    ;```````````| Cloud isn't evaporating.
    LDY.b #$09                  ;$01E7DB    |\ 
CODE_01E7DD:                    ;           ||
    LDA.w $14C8,Y               ;$01E7DD    ||
    CMP.b #$08                  ;$01E7E0    ||
    BNE CODE_01E7F2             ;$01E7E2    ||
    LDA.w $009E,Y               ;$01E7E4    || Find a living Lakitu and track its slot.
    CMP.b #$1E                  ;$01E7E7    ||  If one is found, jump down a ways.
    BNE CODE_01E7F2             ;$01E7E9    ||  If none are found, continue below.
    TYA                         ;$01E7EB    ||
    STA.w $160E,X               ;$01E7EC    ||
    JMP CODE_01E898             ;$01E7EF    ||
CODE_01E7F2:                    ;           ||
    DEY                         ;$01E7F2    ||
    BPL CODE_01E7DD             ;$01E7F3    |/
    LDA $C2,X                   ;$01E7F5    |\ Branch if Mario is in the cloud.
    BNE CODE_01E840             ;$01E7F7    |/
    LDA.w $151C,X               ;$01E7F9    |\ 
    BEQ CODE_01E804             ;$01E7FC    || Update X/Y position.
    JSR SubSprXPosNoGrvty       ;$01E7FE    ||  Unless the Lakitu was just killed and Mario hasn't entered the cloud yet.
    JSR SubSprYPosNoGrvty       ;$01E801    |/
CODE_01E804:                    ;           |
    LDA.w $154C,X               ;$01E804    |\ Skip to just draw graphics if interaction is disabled (e.g. Mario just jumped out).
    BNE CODE_01E83D             ;$01E807    |/
    JSR ProcessInteract         ;$01E809    |\ 
    BCC CODE_01E83D             ;$01E80C    ||
    LDA $7D                     ;$01E80E    ||
    BMI CODE_01E83D             ;$01E810    ||
    INC $C2,X                   ;$01E812    ||
    LDA.b #$11                  ;$01E814    ||
    LDY.w $187A                 ;$01E816    ||
    BEQ CODE_01E81D             ;$01E819    ||
    LDA.b #$22                  ;$01E81B    ||
CODE_01E81D:                    ;           || If Mario touches the cloud while moving downwards,
    CLC                         ;$01E81D    ||  put him inside and offset the cloud from his position (accounting for Yoshi).
    ADC $D3                     ;$01E81E    ||
    STA $D8,X                   ;$01E820    ||
    LDA $D4                     ;$01E822    ||
    ADC.b #$00                  ;$01E824    ||
    STA.w $14D4,X               ;$01E826    ||
    LDA $D1                     ;$01E829    ||
    STA $E4,X                   ;$01E82B    ||
    LDA $D2                     ;$01E82D    ||
    STA.w $14E0,X               ;$01E82F    ||
    LDA.b #$10                  ;$01E832    ||
    STA $AA,X                   ;$01E834    ||
    STA.w $151C,X               ;$01E836    ||
    LDA $7B                     ;$01E839    ||
    STA $B6,X                   ;$01E83B    |/
CODE_01E83D:                    ;           |
    JMP LakituCloudGfx          ;$01E83D    |


CODE_01E840:                    ;```````````| Mario is in the cloud.
    JSR LakituCloudGfx          ;$01E840    |
    PHB                         ;$01E843    |
    LDA.b #$02                  ;$01E844    |\ 
    PHA                         ;$01E846    ||
    PLB                         ;$01E847    || Handle control and speeds.
    JSL CODE_02D214             ;$01E848    ||
    PLB                         ;$01E84C    |/
    LDA $AA,X                   ;$01E84D    |\ 
    CLC                         ;$01E84F    || Sink the cloud slowly downwards.
    ADC.b #$03                  ;$01E850    ||
    STA $7D                     ;$01E852    |/
    LDA $14                     ;$01E854    |\ 
    LSR                         ;$01E856    ||
    LSR                         ;$01E857    ||
    LSR                         ;$01E858    ||
    AND.b #$07                  ;$01E859    ||
    TAY                         ;$01E85B    ||
    LDA.w $187A                 ;$01E85C    ||
    BEQ CODE_01E866             ;$01E85F    ||
    TYA                         ;$01E861    ||
    CLC                         ;$01E862    ||
    ADC.b #$08                  ;$01E863    ||
    TAY                         ;$01E865    || Adjust the Lakitu cloud's position for its "floating" animation.
CODE_01E866:                    ;           ||  Account for Yoshi's size, too.
    LDA $D1                     ;$01E866    ||
    STA $E4,X                   ;$01E868    ||
    LDA $D2                     ;$01E86A    ||
    STA.w $14E0,X               ;$01E86C    ||
    LDA $D3                     ;$01E86F    ||
    CLC                         ;$01E871    ||
    ADC.w DATA_01E793,Y         ;$01E872    ||
    STA $D8,X                   ;$01E875    ||
    LDA $D4                     ;$01E877    ||
    ADC.b #$00                  ;$01E879    ||
    STA.w $14D4,X               ;$01E87B    |/
    STZ $72                     ;$01E87E    |
    INC.w $1471                 ;$01E880    | Set as standing on top of a solid sprite.
    INC.w $18C2                 ;$01E883    | Set flag for being inside the cloud.
    LDA $16                     ;$01E886    |\ 
    AND.b #$80                  ;$01E888    || If B is pressed, make Mario jump out of the cloud.
    BEQ Return01E897            ;$01E88A    ||
    LDA.b #$C0                  ;$01E88C    ||\\ Y speed to give Mario when jumping out of a Lakitu cloud.
    STA $7D                     ;$01E88E    ||/
    LDA.b #$10                  ;$01E890    ||\ Disable contact with the cloud for 16 frames.
    STA.w $154C,X               ;$01E892    ||/
    STZ $C2,X                   ;$01E895    |/
Return01E897:                   ;           |
    RTS                         ;$01E897    |


CODE_01E898:                    ;```````````| Lakitu is found, so cloud contains a Lakitu.
    PHY                         ;$01E898    |
    JSR CODE_01E98D             ;$01E899    | Handle movement and spiny attacks.
    LDA $14                     ;$01E89C    |\ 
    LSR                         ;$01E89E    ||
    LSR                         ;$01E89F    ||
    LSR                         ;$01E8A0    ||
    AND.b #$07                  ;$01E8A1    ||
    TAY                         ;$01E8A3    ||
    LDA.w DATA_01E793,Y         ;$01E8A4    ||
    STA $00                     ;$01E8A7    ||
    PLY                         ;$01E8A9    ||
    LDA $E4,X                   ;$01E8AA    || Move the Lakitu with the cloud.
    STA.w $00E4,Y               ;$01E8AC    ||
    LDA.w $14E0,X               ;$01E8AF    ||
    STA.w $14E0,Y               ;$01E8B2    ||
    LDA $D8,X                   ;$01E8B5    ||
    SEC                         ;$01E8B7    ||
    SBC $00                     ;$01E8B8    ||
    STA.w $00D8,Y               ;$01E8BA    ||
    LDA.w $14D4,X               ;$01E8BD    ||
    SBC.b #$00                  ;$01E8C0    ||
    STA.w $14D4,Y               ;$01E8C2    |/
    LDA.b #$10                  ;$01E8C5    |\ Disable Mario interaction with the cloud part.
    STA.w $154C,X               ;$01E8C7    |/
LakituCloudGfx:                 ;```````````| Lakitu cloud GFX routine.
    JSR GetDrawInfoBnk1         ;$01E8CA    |
    LDA.w $186C,X               ;$01E8CD    |\ Return if vertically offscreen.
    BNE Return01E897            ;$01E8D0    |/
    LDA.b #$F8                  ;$01E8D2    |\ 
    STA $0C                     ;$01E8D4    ||
    LDA.b #$FC                  ;$01E8D6    ||
    STA $0D                     ;$01E8D8    ||
    LDA.b #$00                  ;$01E8DA    ||
    LDY $C2,X                   ;$01E8DC    || $0C-$0F: OAM offsets for each of the cloud's tiles (excluding face). Set to F8, FC, 00/30, 04/34.
    BNE CODE_01E8E2             ;$01E8DE    ||  $0E and $0F specifically are set to a low OAM index in order to hide Mario/Lakitu behind it.
    LDA.b #$30                  ;$01E8E0    ||
CODE_01E8E2:                    ;           ||
    STA $0E                     ;$01E8E2    ||
    STA.w $18B6                 ;$01E8E4    ||
    ORA.b #$04                  ;$01E8E7    ||
    STA $0F                     ;$01E8E9    |/
    LDA $00                     ;$01E8EB    |
    STA.w $14B0                 ;$01E8ED    |
    LDA $01                     ;$01E8F0    |
    STA.w $14B2                 ;$01E8F2    |
    LDA $14                     ;$01E8F5    |\ 
    LSR                         ;$01E8F7    ||
    LSR                         ;$01E8F8    || Get tiles for the cloud's current frame of animation.
    AND.b #$0C                  ;$01E8F9    ||
    STA $02                     ;$01E8FB    |/
    LDA.b #$03                  ;$01E8FD    |\\ Number of tiles to draw.
    STA $03                     ;$01E8FF    |/
CODE_01E901:                    ;           |
    LDA $03                     ;$01E901    |\\ 
    TAX                         ;$01E903    |||
    LDY $0C,X                   ;$01E904    ||| Get index for the current tile's position.
    CLC                         ;$01E906    |||
    ADC $02                     ;$01E907    |||
    TAX                         ;$01E909    ||/
    LDA.w DATA_01E76F,X         ;$01E90A    ||\ 
    CLC                         ;$01E90D    ||| Set X position for the tile.
    ADC.w $14B0                 ;$01E90E    |||
    STA.w $0300,Y               ;$01E911    ||/
    LDA.w DATA_01E77F,X         ;$01E914    ||\ 
    CLC                         ;$01E917    ||| Set Y position for the tile.
    ADC.w $14B2                 ;$01E918    |||
    STA.w $0301,Y               ;$01E91B    ||/
    LDX.w $15E9                 ;$01E91E    ||
    LDA.b #$60                  ;$01E921    ||\\ Tile to use for the cloud when not being erased.
    STA.w $0302,Y               ;$01E923    |||
    LDA.w $1540,X               ;$01E926    |||
    BEQ CODE_01E935             ;$01E929    |||
    LSR                         ;$01E92B    ||| Set tile for the cloud.
    LSR                         ;$01E92C    |||
    LSR                         ;$01E92D    |||
    TAX                         ;$01E92E    |||
    LDA.w CloudTiles,X          ;$01E92F    |||
    STA.w $0302,Y               ;$01E932    ||/
CODE_01E935:                    ;           ||
    LDA $64                     ;$01E935    ||\ Set YXPPCCCT for the tile.
    STA.w $0303,Y               ;$01E937    ||/
    INY                         ;$01E93A    ||
    INY                         ;$01E93B    ||
    INY                         ;$01E93C    ||
    INY                         ;$01E93D    ||
    DEC $03                     ;$01E93E    ||
    BPL CODE_01E901             ;$01E940    |/
    LDX.w $15E9                 ;$01E942    |\ 
    LDA.b #$F8                  ;$01E945    ||| Base OAM index for the first two tiles of the Lakitu cloud. Should be same as at $01E8D2.
    STA.w $15EA,X               ;$01E947    ||
    LDY.b #$02                  ;$01E94A    ||
    LDA.b #$01                  ;$01E94C    ||
    JSR FinishOAMWriteRt        ;$01E94E    || Draw four 16x16 tiles.
    LDA.w $18B6                 ;$01E951    ||
    STA.w $15EA,X               ;$01E954    ||
    LDY.b #$02                  ;$01E957    ||
    LDA.b #$01                  ;$01E959    ||
    JSR FinishOAMWriteRt        ;$01E95B    |/
    LDA.w $15A0,X               ;$01E95E    |\ Return and don't draw the cloud's face if horizontally offscreen.
    BNE Return01E984            ;$01E961    |/ 
    LDA.w $14B0                 ;$01E963    |\\ 
    CLC                         ;$01E966    ||| Set X position for the face.
    ADC.b #$04                  ;$01E967    |||
    STA.w $0208                 ;$01E969    ||/
    LDA.w $14B2                 ;$01E96C    ||\ 
    CLC                         ;$01E96F    ||| Set Y position for the face.
    ADC.b #$07                  ;$01E970    |||
    STA.w $0209                 ;$01E972    ||/
    LDA.b #$4D                  ;$01E975    ||\\ Tile for the Lakitu cloud's face.
    STA.w $020A                 ;$01E977    ||/
    LDA.b #$39                  ;$01E97A    ||\\ YXPPCCCT for the Lakitu cloud's face. 
    STA.w $020B                 ;$01E97C    ||/
    LDA.b #$00                  ;$01E97F    ||\ Set as an 8x8 tile.
    STA.w $0422                 ;$01E981    |//
Return01E984:                   ;           |
    RTS                         ;$01E984    |

CloudTiles:                     ;$01E985    | Tile numbers for the Lakitu cloud when being erased.
    db $66,$64,$62,$60

    
    
DATA_01E989:                    ;$01E989    | Max X speeds for the Lakitu.
    db $20,$E0

DATA_01E98B:                    ;$01E98B    | Max Y speeds for the Lakitu before vertical acceleration is switched.
    db $10,$F0

CODE_01E98D:                    ;-----------| Lakitu cloud's movement/attack routine.
    LDA $9D                     ;$01E98D    |\ Return if game frozen.
    BNE Return01E984            ;$01E98F    |/
    JSR SubHorzPosBnk1          ;$01E991    |\ 
    TYA                         ;$01E994    || Face the Lakitu towards Mario.
    LDY.w $160E,X               ;$01E995    ||
    STA.w $157C,Y               ;$01E998    |/
    STA $00                     ;$01E99B    |
    LDY $00                     ;$01E99D    |
    LDA.w $18BF                 ;$01E99F    |\ 
    BEQ CODE_01E9BD             ;$01E9A2    ||
    PHY                         ;$01E9A4    ||
    PHX                         ;$01E9A5    ||
    LDA.w $160E,X               ;$01E9A6    ||
    TAX                         ;$01E9A9    ||
    JSR SubOffscreen0Bnk1       ;$01E9AA    ||
    LDA.w $14C8,X               ;$01E9AD    || If sprite D2 is active and the Lakitu despawned offscreen,
    PLX                         ;$01E9B0    ||  despawn the cloud too.
    CMP.b #$00                  ;$01E9B1    ||
    BNE CODE_01E9B8             ;$01E9B3    ||
    STZ.w $14C8,X               ;$01E9B5    ||
CODE_01E9B8:                    ;           ||
    PLY                         ;$01E9B8    ||
    TYA                         ;$01E9B9    ||
    EOR.b #$01                  ;$01E9BA    ||
    TAY                         ;$01E9BC    |/
CODE_01E9BD:                    ;           |
    LDA $13                     ;$01E9BD    |\\ 
    AND.b #$01                  ;$01E9BF    |||
    BNE CODE_01E9E6             ;$01E9C1    |||
    LDA $B6,X                   ;$01E9C3    |||
    CMP.w DATA_01E989,Y         ;$01E9C5    ||| Accelerate horizontally towards Mario.
    BEQ CODE_01E9D0             ;$01E9C8    |||
    CLC                         ;$01E9CA    |||
    ADC.w DATA_01EBB4,Y         ;$01E9CB    |||
    STA $B6,X                   ;$01E9CE    ||/
CODE_01E9D0:                    ;           ||
    LDA.w $1534,X               ;$01E9D0    ||\ 
    AND.b #$01                  ;$01E9D3    |||
    TAY                         ;$01E9D5    |||
    LDA $AA,X                   ;$01E9D6    |||
    CLC                         ;$01E9D8    ||| Alternate vertical acceleration, to create a wave motion.
    ADC.w DATA_01EBB4,Y         ;$01E9D9    |||
    STA $AA,X                   ;$01E9DC    |||
    CMP.w DATA_01E98B,Y         ;$01E9DE    |||
    BNE CODE_01E9E6             ;$01E9E1    |||
    INC.w $1534,X               ;$01E9E3    |//
CODE_01E9E6:                    ;           |
    LDA $B6,X                   ;$01E9E6    |\ 
    PHA                         ;$01E9E8    ||
    LDY.w $18BF                 ;$01E9E9    ||
    BNE CODE_01E9F9             ;$01E9EC    ||
    LDA.w $17BD                 ;$01E9EE    ||
    ASL                         ;$01E9F1    || If sprite D2 is active, send the Lakitu off the side of the screen.
    ASL                         ;$01E9F2    ||
    ASL                         ;$01E9F3    ||
    CLC                         ;$01E9F4    ||
    ADC $B6,X                   ;$01E9F5    ||
    STA $B6,X                   ;$01E9F7    |/
CODE_01E9F9:                    ;           |
    JSR SubSprXPosNoGrvty       ;$01E9F9    |\ 
    PLA                         ;$01E9FC    || Update X/Y position.
    STA $B6,X                   ;$01E9FD    ||
    JSR SubSprYPosNoGrvty       ;$01E9FF    |/
    LDY.w $160E,X               ;$01EA02    |\ 
    LDA $13                     ;$01EA05    ||
    AND.b #$7F                  ;$01EA07    ||
    ORA.w $151C,Y               ;$01EA09    || Throw a spiny if it's time to.
    BNE Return01EA16            ;$01EA0C    ||  If the Lakitu is fishing, though, don't.
    LDA.b #$20                  ;$01EA0E    ||
    STA.w $1558,Y               ;$01EA10    ||
    JSR CODE_01EA21             ;$01EA13    |/
Return01EA16:                   ;           |
    RTS                         ;$01EA16    |





DATA_01EA17:                    ;$01EA17    | Initial X speeds for the Lakitu's spinies.
    db $10,$F0

CODE_01EA19:                    ;-----------| Lakitu throw routine. Used by both the cloud and pipe Lakitus.
    PHB                         ;$01EA19    |
    PHK                         ;$01EA1A    |
    PLB                         ;$01EA1B    |
    JSR CODE_01EA21             ;$01EA1C    |
    PLB                         ;$01EA1F    |
    RTL                         ;$01EA20    |

CODE_01EA21:
    JSL FindFreeSprSlot         ;$01EA21    |\ Return if no free sprite slots are found.
    BMI Return01EA6F            ;$01EA25    |/
    LDA.b #$08                  ;$01EA27    |\ Set sprite state.
    STA.w $14C8,Y               ;$01EA29    |/
    LDA.w $14AE                 ;$01EA2C    |\ 
    CMP.b #$01                  ;$01EA2F    ||
    LDA.b #$14                  ;$01EA31    ||| Sprite Lakitu throws (Spiny).
    BCC CODE_01EA37             ;$01EA33    ||
    LDA.b #$21                  ;$01EA35    ||| Sprite Lakitu throws with the silver P-switch active (coin).
CODE_01EA37:                    ;           ||
    STA.w $009E,Y               ;$01EA37    |/
    LDA $E4,X                   ;$01EA3A    |\ 
    STA.w $00E4,Y               ;$01EA3C    ||
    LDA.w $14E0,X               ;$01EA3F    ||
    STA.w $14E0,Y               ;$01EA42    || Spawn at the Lakitu's position.
    LDA $D8,X                   ;$01EA45    ||
    STA.w $00D8,Y               ;$01EA47    ||
    LDA.w $14D4,X               ;$01EA4A    ||
    STA.w $14D4,Y               ;$01EA4D    |/
    PHX                         ;$01EA50    |
    TYX                         ;$01EA51    |
    JSL InitSpriteTables        ;$01EA52    |
    LDA.b #$D8                  ;$01EA56    |\\ Initial Y speed for the spiny/coin.
    STA $AA,X                   ;$01EA58    |/
    JSR SubHorzPosBnk1          ;$01EA5A    |\ 
    LDA.w DATA_01EA17,Y         ;$01EA5D    || Set initial X speed for the spiny/coin.
    STA $B6,X                   ;$01EA60    |/
    LDA $9E,X                   ;$01EA62    |\ 
    CMP.b #$21                  ;$01EA64    ||
    BNE CODE_01EA6D             ;$01EA66    || Change YXPPCCCT if spawning a coin, to make it silver.
    LDA.b #$02                  ;$01EA68    ||
    STA.w $15F6,X               ;$01EA6A    |/
CODE_01EA6D:                    ;           |
    TXY                         ;$01EA6D    |
    PLX                         ;$01EA6E    |
Return01EA6F:                   ;           |
    RTS                         ;$01EA6F    |





CODE_01EA70:                    ;-----------| Routine to handle Yoshi's graphics, riding Yoshi, and tongue interaction.
    LDX.w $18E2                 ;$01EA70    |\ Return if there are no Yoshis in the level.
    BEQ Return01EA8E            ;$01EA73    |/
    STZ.w $188B                 ;$01EA75    |
    STZ.w $191C                 ;$01EA78    |
    LDA.w $15E9                 ;$01EA7B    |
    PHA                         ;$01EA7E    |
    DEX                         ;$01EA7F    |
    STX.w $15E9                 ;$01EA80    |
    PHB                         ;$01EA83    |
    PHK                         ;$01EA84    |
    PLB                         ;$01EA85    |
    JSR CODE_01EA8F             ;$01EA86    |
    PLB                         ;$01EA89    |
    PLA                         ;$01EA8A    |
    STA.w $15E9                 ;$01EA8B    |
Return01EA8E:                   ;           |
    RTL                         ;$01EA8E    |

CODE_01EA8F:
    LDA.w $18E8                 ;$01EA8F    |\ 
    ORA.w $13C6                 ;$01EA92    || Skip animation if Yoshi is growing or the cutscene flag is set.
    BEQ CODE_01EA9A             ;$01EA95    ||  (question: why cutscene flag?)
    JMP CODE_01EB48             ;$01EA97    |/

CODE_01EA9A:
    STZ.w $18DC                 ;$01EA9A    |
    LDA $C2,X                   ;$01EA9D    |\ 
    CMP.b #$02                  ;$01EA9F    ||
    BCC CODE_01EAA7             ;$01EAA1    || If Yoshi is loose, make him perform the running animation.
    LDA.b #$30                  ;$01EAA3    ||
    BRA CODE_01EAB2             ;$01EAA5    |/

CODE_01EAA7:
    LDY.b #$00                  ;$01EAA7    |\\ Animation frame to give when standing still.
    LDA $7B                     ;$01EAA9    ||
    BEQ CODE_01EADF             ;$01EAAB    || Branch if Mario is not moving horizontally.
    BPL CODE_01EAB2             ;$01EAAD    ||  Else, make his X speed positive.
    EOR.b #$FF                  ;$01EAAF    ||
    INC A                       ;$01EAB1    |/
CODE_01EAB2:                    ;```````````| Running animation.
    LSR                         ;$01EAB2    |
    LSR                         ;$01EAB3    |
    LSR                         ;$01EAB4    |
    LSR                         ;$01EAB5    |
    TAY                         ;$01EAB6    |
    LDA $9D                     ;$01EAB7    |\ 
    BNE CODE_01EAD0             ;$01EAB9    || Branch if the game is frozen or it isn't time to change Yoshi's animation frame yet.
    DEC.w $1570,X               ;$01EABB    ||
    BPL CODE_01EAD0             ;$01EABE    |/
    LDA.w DATA_01EDF5,Y         ;$01EAC0    |\ Set timer (based on X speed) for how long until Yoshi changes frames again.
    STA.w $1570,X               ;$01EAC3    |/
    DEC.w $18AD                 ;$01EAC6    |\ 
    BPL CODE_01EAD0             ;$01EAC9    ||
    LDA.b #$02                  ;$01EACB    ||
    STA.w $18AD                 ;$01EACD    || Get walking animation frame.
CODE_01EAD0:                    ;           ||
    LDY.w $18AD                 ;$01EAD0    ||
    LDA.w YoshiWalkFrames,Y     ;$01EAD3    ||
    TAY                         ;$01EAD6    |/
    LDA $C2,X                   ;$01EAD7    |\ 
    CMP.b #$02                  ;$01EAD9    || Branch if Yoshi is loose.
    BCS CODE_01EB2E             ;$01EADB    |/
    BRA CODE_01EAE2             ;$01EADD    |

CODE_01EADF:                    ;```````````| Check if jumping.
    STZ.w $1570,X               ;$01EADF    |
CODE_01EAE2:                    ;           |
    LDA $72                     ;$01EAE2    |\ Change animation frame if in air. 
    BEQ CODE_01EAF0             ;$01EAE4    ||
    LDY.b #$02                  ;$01EAE6    ||| Animation frame to give when falling.
    LDA $7D                     ;$01EAE8    ||
    BPL CODE_01EAF0             ;$01EAEA    ||
    LDY.b #$05                  ;$01EAEC    ||| Animation frame to give when jumping.
    BRA CODE_01EAF0             ;$01EAEE    |/

CODE_01EAF0:                    ;```````````| Check if turning.
    LDA.w $15AC,X               ;$01EAF0    |\ 
    BEQ CODE_01EAF7             ;$01EAF3    || Change animation frame if turning.
    LDY.b #$03                  ;$01EAF5    |// Animation frame to give when turning.
CODE_01EAF7:                    ;```````````| Check if sticking out tongue.
    LDA $72                     ;$01EAF7    |\ Skip if in the air.
    BNE CODE_01EB21             ;$01EAF9    |/
    LDA.w $151C,X               ;$01EAFB    |\ Branch if not sticking out Yoshi's tongue.
    BEQ CODE_01EB0C             ;$01EAFE    |/
    LDY.b #$07                  ;$01EB00    |\\ Animation frame to use when sticking out Yoshi's tongue.
    LDA $15                     ;$01EB02    ||
    AND.b #$08                  ;$01EB04    || Change animation frame if sticking out Yoshi's tongue.
    BEQ CODE_01EB0A             ;$01EB06    ||
    LDY.b #$06                  ;$01EB08    |// Animation frame to use when sticking out Yoshi's tongue while crouching.
CODE_01EB0A:                    ;           |
    BRA CODE_01EB21             ;$01EB0A    |

CODE_01EB0C:                    ;```````````| Not sticking out tongue.
    LDA.w $18AF                 ;$01EB0C    |\ 
    BEQ CODE_01EB16             ;$01EB0F    || Decrease Yoshi's squatting timer if active.
    DEC.w $18AF                 ;$01EB11    |/
    BRA CODE_01EB1C             ;$01EB14    |

CODE_01EB16:                    ;```````````| Check if ducking.
    LDA $15                     ;$01EB16    |\ 
    AND.b #$04                  ;$01EB18    || If holding down, make Yoshi duck.
    BEQ CODE_01EB21             ;$01EB1A    |/
CODE_01EB1C:                    ;           |
    LDY.b #$04                  ;$01EB1C    || Animation frame to use when crouching.
    INC.w $18DC                 ;$01EB1E    | Mark player as ducking.
CODE_01EB21:                    ;```````````| Check if idle.
    LDA $C2,X                   ;$01EB21    |\ 
    CMP.b #$01                  ;$01EB23    ||
    BEQ CODE_01EB2E             ;$01EB25    || Change animation frame if idle.
    LDA.w $151C,X               ;$01EB27    ||
    BNE CODE_01EB2E             ;$01EB2A    ||
    LDY.b #$04                  ;$01EB2C    |// Animation frame to give when idle.
CODE_01EB2E:                    ;```````````| Check if entering a pipe.
    LDA.w $187A                 ;$01EB2E    |\ 
    BEQ CODE_01EB44             ;$01EB31    ||
    LDA.w $1419                 ;$01EB33    ||
    CMP.b #$01                  ;$01EB36    ||
    BNE CODE_01EB44             ;$01EB38    ||
    LDA $13                     ;$01EB3A    || Change animation frame if riding Yoshi into a horizontal pipe.
    AND.b #$08                  ;$01EB3C    ||  (uses 8 or 9)
    LSR                         ;$01EB3E    ||
    LSR                         ;$01EB3F    ||
    LSR                         ;$01EB40    ||
    ADC.b #$08                  ;$01EB41    ||
    TAY                         ;$01EB43    |/
CODE_01EB44:                    ;```````````| Done with animation frame.
    TYA                         ;$01EB44    |\ Store animation frame.
    STA.w $1602,X               ;$01EB45    |/
CODE_01EB48:                    ;```````````| Offset from Mario.
    LDA $C2,X                   ;$01EB48    |\ 
    CMP.b #$01                  ;$01EB4A    || Branch if in a ridden state.
    BNE CODE_01EB97             ;$01EB4C    |/
    LDY.w $157C,X               ;$01EB4E    |\ 
    LDA $94                     ;$01EB51    ||
    CLC                         ;$01EB53    ||
    ADC.w YoshiPositionX,Y      ;$01EB54    || Set X position based on direction.
    STA $E4,X                   ;$01EB57    ||
    LDA $95                     ;$01EB59    ||
    ADC.w DATA_01EDF3,Y         ;$01EB5B    ||
    STA.w $14E0,X               ;$01EB5E    |/
    LDY.w $1602,X               ;$01EB61    |\ 
    LDA $96                     ;$01EB64    ||
    CLC                         ;$01EB66    ||
    ADC.b #$10                  ;$01EB67    || Set Y position based on frame.
    STA $D8,X                   ;$01EB69    ||
    LDA $97                     ;$01EB6B    ||
    ADC.b #$00                  ;$01EB6D    ||
    STA.w $14D4,X               ;$01EB6F    |/
    LDA.w DATA_01EDE4,Y         ;$01EB72    |\ Shift Mario's image based on frame.
    STA.w $188B                 ;$01EB75    |/
    LDA.b #$01                  ;$01EB78    |\ 
    LDY.w $1602,X               ;$01EB7A    ||
    CPY.b #$03                  ;$01EB7D    ||
    BNE BackOnYoshi             ;$01EB7F    || Set "riding Yoshi" flag (or turning, if applicable).
    INC A                       ;$01EB81    ||
BackOnYoshi:                    ;           ||
    STA.w $187A                 ;$01EB82    |/
    LDA.b #$01                  ;$01EB85    |\ Allow the player to carry Yoshi between levels.
    STA.w $0DC1                 ;$01EB87    |/
    LDA.w $15F6,X               ;$01EB8A    |\ Track Yoshi's color.
    STA.w $13C7                 ;$01EB8D    |/
    LDA.w $157C,X               ;$01EB90    |\ 
    EOR.b #$01                  ;$01EB93    || Face Mario in the same direction as Yoshi.
    STA $76                     ;$01EB95    |/
CODE_01EB97:                    ;```````````| Finish routine.
    LDA $64                     ;$01EB97    |\ 
    PHA                         ;$01EB99    ||
    LDA.w $187A                 ;$01EB9A    ||
    BEQ CODE_01EBAD             ;$01EB9D    ||
    LDA.w $1419                 ;$01EB9F    ||
    BEQ CODE_01EBAD             ;$01EBA2    ||
    LDA.w $1405                 ;$01EBA4    || Run GFX routine and basic interactions.
    BNE CODE_01EBB0             ;$01EBA7    ||  Send Yoshi behind layers if entering a pipe, too.
    LDA.b #$10                  ;$01EBA9    ||
    STA $64                     ;$01EBAB    ||
CODE_01EBAD:                    ;           ||
    JSR YoshiGFX                ;$01EBAD    ||
CODE_01EBB0:                    ;           ||
    PLA                         ;$01EBB0    ||
    STA $64                     ;$01EBB1    |/
    RTS                         ;$01EBB3    |





DATA_01EBB4:                    ;$01EBB4    | Acceleration values for a couple of sprites (Monty Mole, Eerie, Lakitu, Boo/Boo Block/Big Boo).
    db $01,$FF                              ; Only the first two values are actually used...?
    db $01,$00,$FF,$00,$20,$E0
    db $0A,$0E





DATA_01EBBE:                    ;$01EBBE    | X speeds to make Yoshi run away with.
    db $E8,$18

DATA_01EBC0:                    ;$01EBC0    | X speeds to give Mario when dismounting Yoshi on the ground.
    db $10,$F0

GrowingAniSequence:             ;$01EBC2    | Sequence of frames for Yoshi's growing animation.
    db $0C,$0B,$0C,$0B,$0A,$0B,$0A,$0B

    ; Yoshi misc RAM:
    ; $C2   - Yoshi's current status. 00 = normal, 01 = being ridden, 02 = running.
    ; $151C - Distance Yoshi's tongue is from his mouth. Increments by #$03 when extending and decrements by #$04 when retracting. Caps at #$33.
    ; $1558 - Used as a couple timers.
    ;          Set to #$08 when Yoshi's tongue is fully extended, to decide when to retract.
    ;          Set to #$10 when Yoshi spits something out, to prevent him from sticking out his tongue.
    ; $1564 - Timer for the swallowing animation (when he actually swallows).
    ;          Set to #$1A when swallowing, or #$21 when eating a berry.
    ; $1570 - Timer for how long each of Yoshi's animation frames last. Used to adjust how fast he animates in relation to his speed.
    ; $157C - Direction the sprite is facing. 00 = right, 01 = left
    ; $1594 - Pointer for a few different routines.
    ;          0 = normal, 1 = extending tongue, 2 = retracting tongue, 3 = spitting out
    ; $15AC - Timer for turning around. Set to #$10 at the start of a turn.
    ; $1602 - Animation frame to use.
    ;          0/1/2 = walking, 2 = falling, 3 = turning, 4 = crouching/unridden
    ;          5 = jumping, 6 = tongue out (up), 7 = tongue out (down), A/B/C = growing animation
    ; $160E - Sprite slot in Yoshi's mouth. Set to #$FF when empty.
    ; $163E - Timer to disable contact with sprites. Set to #$20 when mounted, and #$10 when Mario is knocked off.
    ; $1FE2 - Set when dismounting Yoshi, probably to prevent water splashes from showing if in water.

YoshiMain:                      ;-----------| Yoshi MAIN
    STZ.w $13FB                 ;$01EBCA    | Unfreeze the player (from berries).
    LDA.w $141E                 ;$01EBCD    |
    STA.w $1410                 ;$01EBD0    |
    STZ.w $141E                 ;$01EBD3    |
    STZ.w $18E7                 ;$01EBD6    |
    STZ.w $191B                 ;$01EBD9    |
    LDA.w $14C8,X               ;$01EBDC    |\ 
    CMP.b #$08                  ;$01EBDF    || If Yoshi is dying, don't let Mario bring him to the next level,
    BEQ CODE_01EBE9             ;$01EBE1    ||  and just draw graphics. (and handle tongue interaction, for some reason)
    STZ.w $0DC1                 ;$01EBE3    ||
    JMP YoshiGFX                ;$01EBE6    |/

CODE_01EBE9:
    TXA                         ;$01EBE9    |
    INC A                       ;$01EBEA    |
    STA.w $18DF                 ;$01EBEB    |
    LDA.w $187A                 ;$01EBEE    |\ 
    BNE CODE_01EC04             ;$01EBF1    ||
    JSR SubOffscreen0Bnk1       ;$01EBF3    || Branch if riding Yoshi or not offscreen.
    LDA.w $14C8,X               ;$01EBF6    ||
    BNE CODE_01EC04             ;$01EBF9    |/
    LDA.w $1B95                 ;$01EBFB    |\ 
    BNE Return01EC03            ;$01EBFE    || Unless in Yoshi Wings, prevent player from bringing Yoshi to the next level.
    STZ.w $0DC1                 ;$01EC00    |/
Return01EC03:                   ;           |
    RTS                         ;$01EC03    |

CODE_01EC04:                    ;```````````| Check whether to hatch a Yoshi.
    LDA.w $187A                 ;$01EC04    |\ 
    BEQ CODE_01EC0E             ;$01EC07    ||
    LDA.w $1419                 ;$01EC09    || Skip if:
    BNE CODE_01EC61             ;$01EC0C    ||  - Entering a pipe while on Yoshi.
CODE_01EC0E:                    ;           ||  - Yoshi is laying an egg.
    LDA.w $18DE                 ;$01EC0E    ||  - Not growing and game not frozen.
    BNE CODE_01EC61             ;$01EC11    ||
    LDA.w $18E8                 ;$01EC13    ||
    BEQ CODE_01EC4C             ;$01EC16    |/
    DEC.w $18E8                 ;$01EC18    |
    STA $9D                     ;$01EC1B    |\ Freeze game.
    STA.w $13FB                 ;$01EC1D    |/
    CMP.b #$01                  ;$01EC20    |\ If Yoshi isn't done hatching yet, skip to continue running the animation.
    BNE CODE_01EC40             ;$01EC22    |/
    STZ $9D                     ;$01EC24    |\ Unfreeze game.
    STZ.w $13FB                 ;$01EC26    |/
    LDY.w $0DB3                 ;$01EC29    |\ 
    LDA.w $1F11,Y               ;$01EC2C    ||
    DEC A                       ;$01EC2F    ||
    ORA.w $0EF8                 ;$01EC30    || Decide whether to show Yoshi's spawn message.
    ORA.w $0109                 ;$01EC33    ||  Conditions are: in Yoshi's Island, first time, and not title screen.
    BNE CODE_01EC40             ;$01EC36    ||
    INC.w $0EF8                 ;$01EC38    ||
    LDA.b #$03                  ;$01EC3B    ||\ Display Yoshi's spawn message.
    STA.w $1426                 ;$01EC3D    |//
CODE_01EC40:                    ;           |
    DEC A                       ;$01EC40    |\ 
    LSR                         ;$01EC41    ||
    LSR                         ;$01EC42    ||
    LSR                         ;$01EC43    || Set growing animation frame.
    TAY                         ;$01EC44    ||
    LDA.w GrowingAniSequence,Y  ;$01EC45    ||
    STA.w $1602,X               ;$01EC48    |/
    RTS                         ;$01EC4B    |

CODE_01EC4C:                    ;```````````| Not growing.
    LDA $9D                     ;$01EC4C    |\ If the game isn't frozen, skip to next code.
    BEQ CODE_01EC61             ;$01EC4E    |/
CODE_01EC50:                    ;           |
    LDY.w $187A                 ;$01EC50    |\ 
    BEQ Return01EC5A            ;$01EC53    || Offset the player's relative image on top of Yoshi.
    LDY.b #$06                  ;$01EC55    ||| Normal offset distance while riding Yoshi.
    STY.w $188B                 ;$01EC57    |/
Return01EC5A:                   ;           |
    RTS                         ;$01EC5A    |



DATA_01EC5B:                    ;$01EC5B    | X speeds to spawn an egg with.
    db $F0,$10

DATA_01EC5D:                    ;$01EC5D    | X lo position offsets for the egg spawn position from Yoshi.
    db $FA,$06

DATA_01EC5F:                    ;$01EC5F    | X hi position offsets for the egg spawn position from Yoshi.
    db $FF,$00

CODE_01EC61:                    ;-----------| Not hatching; check whether to lay an egg.
    LDA $72                     ;$01EC61    |\ 
    BNE CODE_01EC6A             ;$01EC63    ||
    LDA.w $18DE                 ;$01EC65    ||
    BNE CODE_01EC6D             ;$01EC68    || Skip if:
CODE_01EC6A:                    ;           || - Not on ground.
    JMP CODE_01ECE1             ;$01EC6A    || - Timer to lay egg isn't set.
CODE_01EC6D:                    ;           || - Not in the process of laying.
    DEC.w $18DE                 ;$01EC6D    ||
    CMP.b #$01                  ;$01EC70    ||
    BNE CODE_01EC78             ;$01EC72    ||
    STZ $9D                     ;$01EC74    ||
    BRA CODE_01EC6A             ;$01EC76    |/

CODE_01EC78:
    INC.w $13FB                 ;$01EC78    |\ 
    JSR CODE_01EC50             ;$01EC7B    || Freeze game.
    STY $9D                     ;$01EC7E    |/
    CMP.b #$02                  ;$01EC80    |\ Return if not ready to lay an egg. 
    BNE Return01EC8A            ;$01EC82    |/
    JSL FindFreeSprSlot         ;$01EC84    |\ Find a slot to spawn the egg in, then lay it. 
    BPL CODE_01EC8B             ;$01EC88    |/
Return01EC8A:                   ;           |
    RTS                         ;$01EC8A    |

CODE_01EC8B:                    ;```````````| Lay an egg at Yoshi's position.
    LDA.b #$09                  ;$01EC8B    |\ 
    STA.w $14C8,Y               ;$01EC8D    || Create the egg.
    LDA.b #$2C                  ;$01EC90    ||
    STA.w $009E,Y               ;$01EC92    |/
    PHY                         ;$01EC95    |
    PHY                         ;$01EC96    |
    LDY.w $157C,X               ;$01EC97    |\ 
    STY $0F                     ;$01EC9A    ||
    LDA $E4,X                   ;$01EC9C    ||
    CLC                         ;$01EC9E    ||
    ADC.w DATA_01EC5D,Y         ;$01EC9F    ||
    PLY                         ;$01ECA2    || Set X spawn position.
    STA.w $00E4,Y               ;$01ECA3    ||
    LDY.w $157C,X               ;$01ECA6    ||
    LDA.w $14E0,X               ;$01ECA9    ||
    ADC.w DATA_01EC5F,Y         ;$01ECAC    ||
    PLY                         ;$01ECAF    ||
    STA.w $14E0,Y               ;$01ECB0    |/
    LDA $D8,X                   ;$01ECB3    |\ 
    CLC                         ;$01ECB5    ||
    ADC.b #$08                  ;$01ECB6    ||| Y offset from Yoshi.
    STA.w $00D8,Y               ;$01ECB8    ||
    LDA.w $14D4,X               ;$01ECBB    || Set Y spawn position.
    ADC.b #$00                  ;$01ECBE    ||
    STA.w $14D4,Y               ;$01ECC0    |/
    PHX                         ;$01ECC3    |
    TYX                         ;$01ECC4    |
    JSL InitSpriteTables        ;$01ECC5    | Initialize the sprite.
    LDY $0F                     ;$01ECC9    |
    LDA.w DATA_01EC5B,Y         ;$01ECCB    |\ Set X speed.
    STA $B6,X                   ;$01ECCE    |/
    LDA.b #$F0                  ;$01ECD0    |\\ Initial Y speed of the egg.
    STA $AA,X                   ;$01ECD2    |/
    LDA.b #$10                  ;$01ECD4    |\ Set the timer for the egg's hatching animation.
    STA.w $154C,X               ;$01ECD6    |/
    LDA.w $18DA                 ;$01ECD9    |\ Set sprite for the egg to spawn.
    STA.w $151C,X               ;$01ECDC    |/
    PLX                         ;$01ECDF    |
    RTS                         ;$01ECE0    |



CODE_01ECE1:                    ;-----------| Not laying an egg; handle movement.
    LDA $C2,X                   ;$01ECE1    |\ 
    CMP.b #$01                  ;$01ECE3    || Skip if being ridden.
    BNE CODE_01ECEA             ;$01ECE5    ||
    JMP CODE_01ED70             ;$01ECE7    |/

CODE_01ECEA:                    ;```````````| Not riding Yoshi.
    JSR SubUpdateSprPos         ;$01ECEA    | Update X/Y position, apply gravity, and process interaction with blocks.
    JSR IsOnGround              ;$01ECED    |\ 
    BEQ CODE_01ED01             ;$01ECF0    ||
    JSR SetSomeYSpeed           ;$01ECF2    ||
    LDA $C2,X                   ;$01ECF5    || If on the ground, give it a base Y speed (#$00 or #$24).
    CMP.b #$02                  ;$01ECF7    ||  If not loose, clear its X speed and make it bounce.
    BCS CODE_01ED01             ;$01ECF9    ||
    STZ $B6,X                   ;$01ECFB    ||
    LDA.b #$F0                  ;$01ECFD    ||| Yoshi idle bouncing speed.
    STA $AA,X                   ;$01ECFF    |/
CODE_01ED01:                    ;           |
    JSR UpdateDirection         ;$01ED01    | Update direction being faced.
    JSR IsTouchingObjSide       ;$01ED04    |\ 
    BEQ CODE_01ED0C             ;$01ED07    || Invert X speed and direction if hitting a wall.
    JSR CODE_0190A2             ;$01ED09    |/
CODE_01ED0C:                    ;           |
    LDA.b #$04                  ;$01ED0C    |\ 
    CLC                         ;$01ED0E    ||
    ADC $E4,X                   ;$01ED0F    ||
    STA $04                     ;$01ED11    ||
    LDA.w $14E0,X               ;$01ED13    ||
    ADC.b #$00                  ;$01ED16    ||
    STA $0A                     ;$01ED18    ||
    LDA.b #$13                  ;$01ED1A    ||
    CLC                         ;$01ED1C    ||
    ADC $D8,X                   ;$01ED1D    ||
    STA $05                     ;$01ED1F    ||
    LDA.w $14D4,X               ;$01ED21    || Mount Mario on Yoshi if:
    ADC.b #$00                  ;$01ED24    || - In contact with his saddle.
    STA $0B                     ;$01ED26    || - In air
    LDA.b #$08                  ;$01ED28    || - Not carrying something
    STA $07                     ;$01ED2A    || - Not already riding a Yoshi
    STA $06                     ;$01ED2C    || - Moving downwards
    JSL GetMarioClipping        ;$01ED2E    ||
    JSL CheckForContact         ;$01ED32    ||
    BCC CODE_01ED70             ;$01ED36    ||
    LDA $72                     ;$01ED38    ||
    BEQ CODE_01ED70             ;$01ED3A    ||
    LDA.w $1470                 ;$01ED3C    ||
    ORA.w $187A                 ;$01ED3F    ||
    BNE CODE_01ED70             ;$01ED42    ||
    LDA $7D                     ;$01ED44    ||
    BMI CODE_01ED70             ;$01ED46    ||
SetOnYoshi:                     ;           ||
    LDY.b #$01                  ;$01ED48    ||\\ Offset Mario from Yoshi.
    JSR CODE_01EDCE             ;$01ED4A    |||/
    STZ $7B                     ;$01ED4D    |||\ Clear Mario's X and Y speed.
    STZ $7D                     ;$01ED4F    |||/
    LDA.b #$0C                  ;$01ED51    |||\ Make Yoshi squat briefly.
    STA.w $18AF                 ;$01ED53    |||/
    LDA.b #$01                  ;$01ED56    |||\ Set Yoshi's state to being ridden.
    STA $C2,X                   ;$01ED58    |||/
    LDA.b #$02                  ;$01ED5A    |||\ SFX: Turn on Yoshi drums.
    STA.w $1DFA                 ;$01ED5C    |||/
    LDA.b #$1F                  ;$01ED5F    |||\ SFX for mounting Yoshi.
    STA.w $1DFC                 ;$01ED61    |||/
    JSL DisabledAddSmokeRt      ;$01ED64    ||| Display smoke (disabled).
    LDA.b #$20                  ;$01ED68    |||\ Disable sprite contact briefly.
    STA.w $163E,X               ;$01ED6A    |||/
    INC.w $1697                 ;$01ED6D    |// Increase Mario's bounce counter.

CODE_01ED70:                    ;```````````| Rejoin routines; handle Mario now riding Yoshi.
    LDA $C2,X                   ;$01ED70    |\ 
    CMP.b #$01                  ;$01ED72    || Return if Mario is not riding Yoshi.
    BNE Return01EDCB            ;$01ED74    |/
    JSR CODE_01F622             ;$01ED76    | Process sprite interaction.
    LDA $15                     ;$01ED79    |\ 
    AND.b #$03                  ;$01ED7B    ||
    BEQ CODE_01ED95             ;$01ED7D    || Turn Yoshi around if:
    DEC A                       ;$01ED7F    || - Left/right pressed
    CMP.w $157C,X               ;$01ED80    || - Not already facing that direction
    BEQ CODE_01ED95             ;$01ED83    || - Not already turning
    LDA.w $15AC,X               ;$01ED85    || - Not sticking out tongue
    ORA.w $151C,X               ;$01ED88    || - Not ducking
    ORA.w $18DC                 ;$01ED8B    ||
    BNE CODE_01ED95             ;$01ED8E    ||
    LDA.b #$10                  ;$01ED90    ||
    STA.w $15AC,X               ;$01ED92    |/
CODE_01ED95:                    ;           |
    LDA.w $13F3                 ;$01ED95    |\ 
    BNE CODE_01ED9E             ;$01ED98    || Kick Mario off Yoshi if A is pressed or Mario gets a P-balloon.
    BIT $18                     ;$01ED9A    ||  Else, return.
    BPL Return01EDCB            ;$01ED9C    |/

CODE_01ED9E:                    ;-----------| Make Mario get off Yoshi (by spinjumping/p-balloon).
    LDA.b #$02                  ;$01ED9E    |\ Briefly disable water splashes.
    STA.w $1FE2,X               ;$01EDA0    |/
    STZ $C2,X                   ;$01EDA3    | Set Yoshi to idle.
    LDA.b #$03                  ;$01EDA5    |\ SFX for dismounting Yoshi.
    STA.w $1DFA                 ;$01EDA7    |/
    STZ.w $0DC1                 ;$01EDAA    | Don't let Mario carry Yoshi to the next level.
    LDA $7B                     ;$01EDAD    |\ Give Yoshi Mario's X speed.
    STA $B6,X                   ;$01EDAF    |/
    LDA.b #$A0                  ;$01EDB1    |\\ Y speed to give Mario when jumping off Yoshi in mid-air.
    LDY $72                     ;$01EDB3    ||
    BNE CODE_01EDC1             ;$01EDB5    ||
    JSR SubHorzPosBnk1          ;$01EDB7    || Decide how to jump off Yoshi based on whether he's in the air or not.
    LDA.w DATA_01EBC0,Y         ;$01EDBA    ||
    STA $7B                     ;$01EDBD    ||
    LDA.b #$C0                  ;$01EDBF    ||| Y speed to give Mario when jumping off Yoshi on the ground.
CODE_01EDC1:                    ;           ||
    STA $7D                     ;$01EDC1    |/
    STZ.w $187A                 ;$01EDC3    | Mark as no longer riding.
    STZ $AA,X                   ;$01EDC6    | Clear Yoshi's Y speed.
    JSR CODE_01EDCC             ;$01EDC8    | Offset Mario vertically from Yoshi.
Return01EDCB:                   ;           |
    RTS                         ;$01EDCB    |



CODE_01EDCC:                    ;-----------| Subroutine to offset Mario from Yoshi's Y position when mounting/dismounting.
    LDY.b #$00                  ;$01EDCC    |
CODE_01EDCE:                    ;           |
    LDA $D8,X                   ;$01EDCE    |\ 
    SEC                         ;$01EDD0    ||
    SBC.w DATA_01EDE2,Y         ;$01EDD1    ||
    STA $96                     ;$01EDD4    ||
    STA $D3                     ;$01EDD6    || Offset player accordingly.
    LDA.w $14D4,X               ;$01EDD8    ||
    SBC.b #$00                  ;$01EDDB    ||
    STA $97                     ;$01EDDD    ||
    STA $D4                     ;$01EDDF    |/
    RTS                         ;$01EDE1    |

DATA_01EDE2:                    ;$01EDE2    | Player offsets from Yoshi when mounting/dismounting. First is dismounting, second is mounting.
    db $04,$10

DATA_01EDE4:                    ;$01EDE4    | Player image offsets while riding Yoshi, indexed by Yoshi's animation frame.
    db $06,$05,$05,$05,$0A,$05,$05,$0A
    db $0A,$0B

YoshiWalkFrames:                ;$01EDEE    | Animation frames to cycle through for Yoshi's walking animation.
    db $02,$01,$00

YoshiPositionX:                 ;$01EDF1    | Yoshi's X position offset from Mario while being ridden, low.
    db $02,$FE
DATA_01EDF3:                    ;$01EDF3    | Yoshi's X position offset from Mario while being ridden, high.
    db $00,$FF

DATA_01EDF5:                    ;$01EDF5    | Length of Yoshi's walking animation frames, indexed by Mario's X speed / 8.
    db $03,$02,$01,$00



YoshiHeadTiles:                 ;$01EDF9    | Tiles for Yoshi's head.
    db $00,$01,$02,$03,$02,$10,$04,$05
    db $00,$00,$FF,$FF,$00

YoshiBodyTiles:                 ;$01EE06    | Tiles for Yoshi's body.
    db $06,$07,$08,$09,$0A,$0B,$06,$0C
    db $0A,$0D,$0E,$0F,$0C

YoshiHeadDispX:                 ;$01EE13    | X offsets for Yoshi's head, low.
    db $0A,$09,$0A,$06,$0A,$0A,$0A,$10      ; Right
    db $0A,$0A,$00,$00,$0A
    db $F6,$F7,$F6,$FA,$F6,$F6,$F6,$F0      ; Left
    db $F6,$F6,$00,$00,$F6

DATA_01EE2D:                    ;$01EE2D    | X offsets for Yoshi's head, high.
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$00,$00,$FF

YoshiPositionY:                 ;$01EE47    | Base Y offsets for Yoshi.
    db $00,$01,$01,$00,$04,$00,$00,$04
    db $03,$03,$00,$00,$04

YoshiHeadDispY:                 ;$01EE54    | Y offsets for Yoshi's head.
    db $00,$00,$01,$00,$00,$00,$00,$08
    db $00,$00,$00,$00,$05

YoshiGFX:                       ;-----------| Yoshi's GFX routine. Also handles some other routines (most notably his tongue).
    LDA.w $1602,X               ;$01EE61    |
    PHA                         ;$01EE64    |
    LDY.w $15AC,X               ;$01EE65    |\ 
    CPY.b #$08                  ;$01EE68    ||
    BNE CODE_01EE7D             ;$01EE6A    ||
    LDA.w $1419                 ;$01EE6C    ||
    ORA $9D                     ;$01EE6F    || If turning, invert Mario and Yoshi's directions.
    BNE CODE_01EE7D             ;$01EE71    ||
    LDA.w $157C,X               ;$01EE73    ||
    STA $76                     ;$01EE76    ||
    EOR.b #$01                  ;$01EE78    ||
    STA.w $157C,X               ;$01EE7A    |/
CODE_01EE7D:                    ;           |
    LDA.w $1419                 ;$01EE7D    |\ 
    BMI CODE_01EE8A             ;$01EE80    ||
    CMP.b #$02                  ;$01EE82    || Use the turning GFX frame if entering a vertical pipe.
    BNE CODE_01EE8A             ;$01EE84    ||
    INC A                       ;$01EE86    ||
    STA.w $1602,X               ;$01EE87    |/
CODE_01EE8A:                    ;           |
    JSR CODE_01EF18             ;$01EE8A    |\ Set up OAM.
    LDY $0E                     ;$01EE8D    ||\ 
    LDA.w $0302,Y               ;$01EE8F    |||
    STA $00                     ;$01EE92    ||| Set actual tiles in SP1 for Yoshi.
    STZ $01                     ;$01EE94    |||
    LDA.b #$06                  ;$01EE96    |||| Destination tile for Yoshi's head.
    STA.w $0302,Y               ;$01EE98    |||
    LDY.w $15EA,X               ;$01EE9B    |||
    LDA.w $0302,Y               ;$01EE9E    |||
    STA $02                     ;$01EEA1    |||
    STZ $03                     ;$01EEA3    |||
    LDA.b #$08                  ;$01EEA5    |||| Destination tile for Yoshi's body.
    STA.w $0302,Y               ;$01EEA7    ||/
    REP #$20                    ;$01EEAA    ||
    LDA $00                     ;$01EEAC    ||\ 
    ASL                         ;$01EEAE    |||
    ASL                         ;$01EEAF    |||
    ASL                         ;$01EEB0    |||
    ASL                         ;$01EEB1    |||
    ASL                         ;$01EEB2    ||| Store the pointer to Yoshi's head tile for DMA upload.
    CLC                         ;$01EEB3    |||
    ADC.w #$8500                ;$01EEB4    |||
    STA.w $0D8B                 ;$01EEB7    |||
    CLC                         ;$01EEBA    |||
    ADC.w #$0200                ;$01EEBB    |||
    STA.w $0D95                 ;$01EEBE    ||/
    LDA $02                     ;$01EEC1    ||\ 
    ASL                         ;$01EEC3    |||
    ASL                         ;$01EEC4    |||
    ASL                         ;$01EEC5    |||
    ASL                         ;$01EEC6    |||
    ASL                         ;$01EEC7    ||| Store the pointer to Yoshi's body tile for DMA upload.
    CLC                         ;$01EEC8    |||
    ADC.w #$8500                ;$01EEC9    |||
    STA.w $0D8D                 ;$01EECC    |||
    CLC                         ;$01EECF    |||
    ADC.w #$0200                ;$01EED0    |||
    STA.w $0D97                 ;$01EED3    |//
    SEP #$20                    ;$01EED6    |
    PLA                         ;$01EED8    |
    STA.w $1602,X               ;$01EED9    |
    JSR CODE_01F0A2             ;$01EEDC    | Handle Yoshi's mouth routines.
    LDA.w $1410                 ;$01EEDF    |\ 
    CMP.b #$02                  ;$01EEE2    || Return if Yoshi doesn't have wings.
    BCC Return01EF17            ;$01EEE4    |/
    LDA.w $187A                 ;$01EEE6    |\ Just draw the wings if not on Yoshi.
    BEQ CODE_01EF13             ;$01EEE9    |/
    LDA $72                     ;$01EEEB    |\ Branch if in air.
    BNE CODE_01EF00             ;$01EEED    |/
    LDA $7B                     ;$01EEEF    |\ 
    BPL CODE_01EEF6             ;$01EEF1    ||
    EOR.b #$FF                  ;$01EEF3    ||
    INC A                       ;$01EEF5    || If Mario's X speed is
CODE_01EEF6:                    ;           ||   < 28: draw closed wings
    CMP.b #$28                  ;$01EEF6    ||  => 28: draw open wings
    LDA.b #$01                  ;$01EEF8    ||
    BCS CODE_01EF13             ;$01EEFA    ||
    LDA.b #$00                  ;$01EEFC    ||
    BRA CODE_01EF13             ;$01EEFE    |/

CODE_01EF00:                    ;```````````| Yoshi has wings in air.
    LDA $14                     ;$01EF00    |\ 
    LSR                         ;$01EF02    ||
    LSR                         ;$01EF03    ||
    LDY $7D                     ;$01EF04    ||
    BMI CODE_01EF0A             ;$01EF06    ||
    LSR                         ;$01EF08    || Animate Yoshi's wings and play flutter noises.
    LSR                         ;$01EF09    || When rising upwards, animate 4 times faster.
CODE_01EF0A:                    ;           ||
    AND.b #$01                  ;$01EF0A    ||
    BNE CODE_01EF13             ;$01EF0C    ||
    LDY.b #$21                  ;$01EF0E    ||\ SFX for Yoshi's wing flutters. 
    STY.w $1DFC                 ;$01EF10    |//
CODE_01EF13:                    ;           |
    JSL CODE_02BB23             ;$01EF13    | Draw Yoshi's wings.
Return01EF17:                   ;           |
    RTS                         ;$01EF17    |



CODE_01EF18:                    ;-----------| Yoshi GFX routine (OAM portion)
    LDY.w $1602,X               ;$01EF18    |\ 
    STY.w $185E                 ;$01EF1B    || Set frame number for Yoshi's head.
    LDA.w YoshiHeadTiles,Y      ;$01EF1E    ||
    STA.w $1602,X               ;$01EF21    |/
    STA $0F                     ;$01EF24    |
    LDA $D8,X                   ;$01EF26    |\ 
    PHA                         ;$01EF28    ||
    CLC                         ;$01EF29    ||
    ADC.w YoshiPositionY,Y      ;$01EF2A    ||
    STA $D8,X                   ;$01EF2D    || Get Y displacement for Yoshi's head.
    LDA.w $14D4,X               ;$01EF2F    ||
    PHA                         ;$01EF32    ||
    ADC.b #$00                  ;$01EF33    ||
    STA.w $14D4,X               ;$01EF35    |/
    TYA                         ;$01EF38    |
    LDY.w $157C,X               ;$01EF39    |\ 
    BEQ CODE_01EF41             ;$01EF3C    ||
    CLC                         ;$01EF3E    ||
    ADC.b #$0D                  ;$01EF3F    ||
CODE_01EF41:                    ;           ||
    TAY                         ;$01EF41    ||
    LDA $E4,X                   ;$01EF42    ||
    PHA                         ;$01EF44    || Get X displacement for Yoshi's head.
    CLC                         ;$01EF45    ||
    ADC.w YoshiHeadDispX,Y      ;$01EF46    ||
    STA $E4,X                   ;$01EF49    ||
    LDA.w $14E0,X               ;$01EF4B    ||
    PHA                         ;$01EF4E    ||
    ADC.w DATA_01EE2D,Y         ;$01EF4F    ||
    STA.w $14E0,X               ;$01EF52    |/
    LDA.w $15EA,X               ;$01EF55    |\ 
    PHA                         ;$01EF58    ||
    LDA.w $15AC,X               ;$01EF59    ||
    ORA.w $1419                 ;$01EF5C    || If turning or entering a pipe, change OAM index for Yoshi's head to slot #$04.
    BEQ CODE_01EF66             ;$01EF5F    ||  (to draw in front of Mario)
    LDA.b #$04                  ;$01EF61    ||
    STA.w $15EA,X               ;$01EF63    |/
CODE_01EF66:                    ;           |
    LDA.w $15EA,X               ;$01EF66    |
    STA $0E                     ;$01EF69    |
    JSR SubSprGfx2Entry1        ;$01EF6B    |\ 
    PHX                         ;$01EF6E    ||
    LDY.w $15EA,X               ;$01EF6F    ||
    LDX.w $185E                 ;$01EF72    || Draw Yoshi's head and offset it vertically from the body.
    LDA.w $0301,Y               ;$01EF75    ||
    CLC                         ;$01EF78    ||
    ADC.w YoshiHeadDispY,X      ;$01EF79    ||
    STA.w $0301,Y               ;$01EF7C    |/
    PLX                         ;$01EF7F    |
    PLA                         ;$01EF80    |\ 
    CLC                         ;$01EF81    || Increase OAM index.
    ADC.b #$04                  ;$01EF82    ||
    STA.w $15EA,X               ;$01EF84    |/
    PLA                         ;$01EF87    |
    STA.w $14E0,X               ;$01EF88    |
    PLA                         ;$01EF8B    |
    STA $E4,X                   ;$01EF8C    |
    LDY.w $185E                 ;$01EF8E    |\ 
    LDA.w YoshiBodyTiles,Y      ;$01EF91    || Set frame number for Yoshi's body.
    STA.w $1602,X               ;$01EF94    |/
    LDA $D8,X                   ;$01EF97    |\ 
    CLC                         ;$01EF99    ||
    ADC.b #$10                  ;$01EF9A    || Offset body horizontally from the head.
    STA $D8,X                   ;$01EF9C    ||
    BCC CODE_01EFA3             ;$01EF9E    ||
    INC.w $14D4,X               ;$01EFA0    |/
CODE_01EFA3:                    ;           |
    JSR SubSprGfx2Entry1        ;$01EFA3    | Draw Yoshi's body.
    PLA                         ;$01EFA6    |
    STA.w $14D4,X               ;$01EFA7    |
    PLA                         ;$01EFAA    |
    STA $D8,X                   ;$01EFAB    |
    LDY $0E                     ;$01EFAD    |
    LDA $0F                     ;$01EFAF    |\ 
    BPL CODE_01EFB8             ;$01EFB1    || If the frame for Yoshi's head was 80+, hide it offscreen.
    LDA.b #$F0                  ;$01EFB3    ||  (for growing animation frames)
    STA.w $0301,Y               ;$01EFB5    |/
CODE_01EFB8:                    ;```````````| Figure out what to do with Yoshi's mouth.
    LDA $C2,X                   ;$01EFB8    |\ 
    BNE CODE_01EFC6             ;$01EFBA    ||
    LDA $14                     ;$01EFBC    || If not being ridden and not loose, handle Yoshi's idle animation.
    AND.b #$30                  ;$01EFBE    ||
    BNE CODE_01EFDB             ;$01EFC0    ||
    LDA.b #$2A                  ;$01EFC2    ||| Tile to use for Yoshi's idle "mouth open" frame.
    BRA CODE_01EFFA             ;$01EFC4    |/

CODE_01EFC6:
    CMP.b #$02                  ;$01EFC6    |\ 
    BNE CODE_01EFDB             ;$01EFC8    ||
    LDA.w $151C,X               ;$01EFCA    ||
    ORA.w $13C6                 ;$01EFCD    || If Yoshi is loose, does not have his tongue out, and is not in a custscene,
    BNE CODE_01EFDB             ;$01EFD0    ||  animate his face; use the "hit" tile every 16 frames.
    LDA $14                     ;$01EFD2    ||
    AND.b #$10                  ;$01EFD4    ||
    BEQ CODE_01EFFD             ;$01EFD6    ||
    BRA CODE_01EFF8             ;$01EFD8    |/

Return01EFDA:
    RTS                         ;$01EFDA    |

CODE_01EFDB:
    LDA.w $1594,X               ;$01EFDB    |\ 
    CMP.b #$03                  ;$01EFDE    ||
    BEQ CODE_01EFEE             ;$01EFE0    ||
    LDA.w $151C,X               ;$01EFE2    || If:
    BEQ CODE_01EFF3             ;$01EFE5    || - Spitting
    LDA.w $0302,Y               ;$01EFE7    || - Sticking out Yoshi's tongue
    CMP.b #$24                  ;$01EFEA    || Then make Yoshi open his mouth.
    BEQ CODE_01EFF3             ;$01EFEC    ||
CODE_01EFEE:                    ;           ||
    LDA.b #$2A                  ;$01EFEE    ||| Tile for Yoshi's head when his mouth is open.
    STA.w $0302,Y               ;$01EFF0    |/
CODE_01EFF3:                    ;           |
    LDA.w $18AE                 ;$01EFF3    |\ 
    BEQ CODE_01EFFD             ;$01EFF6    || Change Yoshi's face if he's hit and about to stick out his tongue.
CODE_01EFF8:                    ;           ||
    LDA.b #$0C                  ;$01EFF8    ||| Tile for Yoshi's head after being hit or while running loose.
CODE_01EFFA:                    ;           ||
    STA.w $0302,Y               ;$01EFFA    |/
CODE_01EFFD:                    ;           |
    LDA.w $1564,X               ;$01EFFD    |\ 
    LDY.w $18AC                 ;$01F000    ||
    BEQ CODE_01F00F             ;$01F003    || If time to swallow, continue below to handle swallowing.
    CPY.b #$26                  ;$01F005    ||  If the wait timer is 26+, give Yoshi a full mouth.
    BCS CODE_01F038             ;$01F007    ||  If the wait timer is 1-25, give him a full mouth for 24 out of every 32 frames.
    LDA $14                     ;$01F009    ||
    AND.b #$18                  ;$01F00B    ||
    BNE CODE_01F038             ;$01F00D    |/
CODE_01F00F:                    ;           |
    LDA.w $1564,X               ;$01F00F    |\ 
    CMP.b #$00                  ;$01F012    || Return if not swallowing.
    BEQ Return01EFDA            ;$01F014    |/
    LDY.b #$00                  ;$01F016    |\\ Tile to use for Yoshi's head as the final part of the swallow animation (normal).
    CMP.b #$0F                  ;$01F018    || When swallow animation timer is:
    BCC CODE_01F03A             ;$01F01A    ||  < 0F: Only handle swallow animation, with empty mouth.
    CMP.b #$1C                  ;$01F01C    ||  < 1C: Only handle swallow animation, with full mouth.
    BCC CODE_01F038             ;$01F01E    ||  = 1C: Erase tile and count berry if applicable. [only set this high by berries]
    BNE CODE_01F02F             ;$01F020    |/  > 1C: Freeze Mario in place. [only set this high by berries]
    LDA $0E                     ;$01F022    |
    PHA                         ;$01F024    |
    JSL SetBushTile             ;$01F025    | Remove the berry from the bush tile.
    JSR CODE_01F0D3             ;$01F029    | Increase berry counters and decide whether to lay an egg.
    PLA                         ;$01F02C    |
    STA $0E                     ;$01F02D    |
CODE_01F02F:                    ;           |
    INC.w $13FB                 ;$01F02F    | Briefly freeze Mario.
    LDA.b #$00                  ;$01F032    |\ 
    LDY.b #$2A                  ;$01F034    ||| Tile to use for Yoshi's head at the beginning of the swallow animation (open).
    BRA CODE_01F03A             ;$01F036    |/


CODE_01F038:                    ;```````````| Draw Yoshi's throat tile.
    LDY.b #$04                  ;$01F038    || Tile to use for Yoshi's head during the middle part of the swallow animation (full)
CODE_01F03A:                    ;           |
    PHA                         ;$01F03A    |
    TYA                         ;$01F03B    |\ 
    LDY $0E                     ;$01F03C    || Change tile for Yoshi's head (to either 00, 04, or 2A).
    STA.w $0302,Y               ;$01F03E    |/
    PLA                         ;$01F041    |
    CMP.b #$0F                  ;$01F042    |\ 
    BCS Return01F0A0            ;$01F044    || Only animate when the swallow timer is 05-0E.
    CMP.b #$05                  ;$01F046    ||
    BCC Return01F0A0            ;$01F048    |/
    SBC.b #$05                  ;$01F04A    |
    LDY.w $157C,X               ;$01F04C    |\ 
    BEQ CODE_01F054             ;$01F04F    || Increase index by 0A if facing left.
    CLC                         ;$01F051    ||
    ADC.b #$0A                  ;$01F052    |/
CODE_01F054:                    ;           |
    LDY.w $1602,X               ;$01F054    |\ 
    CPY.b #$0A                  ;$01F057    ||
    BNE CODE_01F05E             ;$01F059    || Increase index by 14 if ducking.
    CLC                         ;$01F05B    ||
    ADC.b #$14                  ;$01F05C    |/
CODE_01F05E:                    ;           |
    STA $02                     ;$01F05E    |
    JSR IsSprOffScreen          ;$01F060    |\ Return if offscreen.
    BNE Return01F0A0            ;$01F063    |/
    LDA $E4,X                   ;$01F065    |\ 
    SEC                         ;$01F067    ||
    SBC $1A                     ;$01F068    ||
    STA $00                     ;$01F06A    ||
    LDA $D8,X                   ;$01F06C    ||
    SEC                         ;$01F06E    ||
    SBC $1C                     ;$01F06F    ||
    STA $01                     ;$01F071    ||
    PHX                         ;$01F073    || Set X/Y offset.
    LDX $02                     ;$01F074    ||
    LDA $00                     ;$01F076    ||
    CLC                         ;$01F078    ||
    ADC.l DATA_03C176,X         ;$01F079    ||
    STA.w $0300                 ;$01F07D    ||
    LDA $01                     ;$01F080    ||
    CLC                         ;$01F082    ||
    ADC.l DATA_03C19E,X         ;$01F083    ||
    STA.w $0301                 ;$01F087    |/
    LDA.b #$3F                  ;$01F08A    |\\ Tile for Yoshi's throat as he swallows.
    STA.w $0302                 ;$01F08C    |/
    PLX                         ;$01F08F    |
    LDY.w $15EA,X               ;$01F090    |
    LDA.w $0303,Y               ;$01F093    |\ 
    ORA.b #$01                  ;$01F096    || Use GFX page 2.
    STA.w $0303                 ;$01F098    |/
    LDA.b #$00                  ;$01F09B    |\ Set size (8x8).
    STA.w $0460                 ;$01F09D    |/
Return01F0A0:                   ;           |
    RTS                         ;$01F0A0    |

Return01F0A1:
    RTS                         ;$01F0A1    |





CODE_01F0A2:                    ;-----------| Routine to handle Yoshi's mouth functionality.
    LDA $C2,X                   ;$01F0A2    |\ 
    CMP.b #$01                  ;$01F0A4    || If riding Yoshi, process interaction with berries.
    BNE CODE_01F0AC             ;$01F0A6    ||
    JSL CODE_02D0D4             ;$01F0A8    |/
CODE_01F0AC:                    ;           |
    LDA.w $1410                 ;$01F0AC    |\ 
    CMP.b #$01                  ;$01F0AF    || Prevent sticking out Yoshi's tongue if $1410 is #$01 (Mario can shoot fireballs).
    BEQ Return01F0A1            ;$01F0B1    |/
    LDA.w $14A3                 ;$01F0B3    |\ 
    CMP.b #$10                  ;$01F0B6    ||
    BNE CODE_01F0C4             ;$01F0B8    ||
    LDA.w $18AE                 ;$01F0BA    || If being hit, stick out Yoshi's tongue.
    BNE CODE_01F0C4             ;$01F0BD    ||
    LDA.b #$06                  ;$01F0BF    ||
    STA.w $18AE                 ;$01F0C1    |/
CODE_01F0C4:                    ;           |
    LDA.w $1594,X               ;$01F0C4    |
    JSL ExecutePtr              ;$01F0C7    |

Ptrs01F0CB:                     ;$01F0CB    | Pointers to different phases for Yoshi's mouth.
    dw CODE_01F14B                          ; 0 - Normal
    dw CODE_01F314                          ; 1 - Extending tongue
    dw CODE_01F332                          ; 2 - Retracting tongue
    dw CODE_01F12E                          ; 3 - Spitting



CODE_01F0D3:                    ;-----------| Routine for Yoshi swallowing a sprite and handling berry counters.
    LDA.b #$06                  ;$01F0D3    |\ SFX for swallowing a sprite.
    STA.w $1DF9                 ;$01F0D5    |/
    JSL CODE_05B34A             ;$01F0D8    | Give a coin.
    LDA.w $18D6                 ;$01F0DC    |\ Return if not a berry.
    BEQ Return01F12D            ;$01F0DF    |/
    STZ.w $18D6                 ;$01F0E1    |\ 
    CMP.b #$01                  ;$01F0E4    || Branch if not a red berry.
    BNE CODE_01F0F9             ;$01F0E6    |/
    INC.w $18D4                 ;$01F0E8    |\ 
    LDA.w $18D4                 ;$01F0EB    ||
    CMP.b #$0A                  ;$01F0EE    ||| Number of red berries Yoshi needs to eat to lay an egg.
    BNE Return01F12D            ;$01F0F0    |/
    STZ.w $18D4                 ;$01F0F2    |
    LDA.b #$74                  ;$01F0F5    |\\ Sprite spawned by Yoshi for eating 10 red berries.
    BRA CODE_01F125             ;$01F0F7    |/

CODE_01F0F9:                    ;```````````| Not a red berry; check if green berry.
    CMP.b #$03                  ;$01F0F9    |\ Branch if not a green berry.
    BNE CODE_01F116             ;$01F0FB    |/
    LDA.b #$29                  ;$01F0FD    |\ SFX for eating a green berry.
    STA.w $1DFC                 ;$01F0FF    |/
    LDA.w $0F32                 ;$01F102    |\ 
    CLC                         ;$01F105    ||
    ADC.b #$02                  ;$01F106    ||
    CMP.b #$0A                  ;$01F108    ||
    BCC CODE_01F111             ;$01F10A    || Add 20 seconds to the in-game timer.
    SBC.b #$0A                  ;$01F10C    ||
    INC.w $0F31                 ;$01F10E    ||
CODE_01F111:                    ;           ||
    STA.w $0F32                 ;$01F111    |/
    BRA Return01F12D            ;$01F114    |

CODE_01F116:                    ;```````````| Not green or red; assume pink.
    INC.w $18D5                 ;$01F116    |\ 
    LDA.w $18D5                 ;$01F119    ||
    CMP.b #$02                  ;$01F11C    ||| Number of pink berries Yoshi needs to eat to lay an egg.
    BNE Return01F12D            ;$01F11E    |/
    STZ.w $18D5                 ;$01F120    |
    LDA.b #$6A                  ;$01F123    || Sprite spawned by Yoshi for eating 2 pink berries.
CODE_01F125:                    ;           |
    STA.w $18DA                 ;$01F125    |\ 
    LDY.b #$20                  ;$01F128    || Set egg timer and sprite.
    STY.w $18DE                 ;$01F12A    |/
Return01F12D:                   ;           |
    RTS                         ;$01F12D    |





CODE_01F12E:                    ;-----------| Spitting.
    LDA.w $1558,X               ;$01F12E    |\ 
    BNE Return01F136            ;$01F131    || Temporarily disable tongue before returning to normal.
    STZ.w $1594,X               ;$01F133    |/
Return01F136:                   ;           |
    RTS                         ;$01F136    |





YoshiShellAbility:              ;$01F137    | Yoshi powers for each Yoshi/shell combination.
    db $00,$00,$01,$02                      ; 4 bytes per Yoshi with each byte being a shell color, with the colors ordered gryb for both.
    db $00,$00,$01,$02                      ; Format: %------fg
    db $01,$01,$01,$03                      ; f = flight, g = ground stomp
    db $02,$02,$03,$02

YoshiAbilityIndex:              ;$01F147    | Which set of abilities in the above table that each Yoshi corresponds to, ordered ybrg.
    db $02,$03,$01,$00

CODE_01F14B:                    ;-----------| Routine to handle Yoshi's mouth when not spitting out his tongue.
    LDA.w $1B95                 ;$01F14B    |\ 
    BEQ CODE_01F155             ;$01F14E    || If in the Yoshi Wings minigame, give wings.
    LDA.b #$02                  ;$01F150    ||
    STA.w $141E                 ;$01F152    |/
CODE_01F155:                    ;           |
    LDA.w $18AC                 ;$01F155    |\ Branch if Yoshi doesn't have a sprite in his mouth.
    BEQ CODE_01F1A2             ;$01F158    |/
    LDY.w $160E,X               ;$01F15A    |\ 
    LDA.w $009E,Y               ;$01F15D    || If the sprite in Yoshi's mouth is a key,
    CMP.b #$80                  ;$01F160    ||  take note of that for keyholes.
    BNE CODE_01F167             ;$01F162    ||
    INC.w $191C                 ;$01F164    |/
CODE_01F167:                    ;           |
    CMP.b #$0D                  ;$01F167    |\ Branch if the sprite in Yoshi's mouth is not a shell.
    BCS CODE_01F1A2             ;$01F169    |/
    PHY                         ;$01F16B    |
    LDA.w $187B,Y               ;$01F16C    |\ 
    CMP.b #$01                  ;$01F16F    || If Yoshi has a disco shell, give both wings and stomp power.
    LDA.b #$03                  ;$01F171    ||
    BCS CODE_01F195             ;$01F173    |/
    LDA.w $15F6,X               ;$01F175    |\ 
    LSR                         ;$01F178    ||
    AND.b #$07                  ;$01F179    ||
    TAY                         ;$01F17B    ||
    LDA.w YoshiAbilityIndex-2,Y ;$01F17C    ||
    ASL                         ;$01F17F    ||
    ASL                         ;$01F180    ||
    STA $00                     ;$01F181    || Decide what abilities to give Yoshi,
    PLY                         ;$01F183    ||  based on both Yoshi and the shell's palettes.
    PHY                         ;$01F184    ||
    LDA.w $15F6,Y               ;$01F185    || 
    LSR                         ;$01F188    ||
    AND.b #$07                  ;$01F189    ||
    TAY                         ;$01F18B    ||
    LDA.w YoshiAbilityIndex-2,Y ;$01F18C    ||
    ORA $00                     ;$01F18F    ||
    TAY                         ;$01F191    ||
    LDA.w YoshiShellAbility,Y   ;$01F192    ||
CODE_01F195:                    ;           ||
    PHA                         ;$01F195    ||
    AND.b #$02                  ;$01F196    ||\ Store wings flag.
    STA.w $141E                 ;$01F198    ||/
    PLA                         ;$01F19B    ||
    AND.b #$01                  ;$01F19C    ||\ Store stomp flag.
    STA.w $18E7                 ;$01F19E    |//
    PLY                         ;$01F1A1    |
CODE_01F1A2:                    ;           |
    LDA $14                     ;$01F1A2    |\ 
    AND.b #$03                  ;$01F1A4    ||
    BNE CODE_01F1C6             ;$01F1A6    || Handle swallow timer;
    LDA.w $18AC                 ;$01F1A8    ||  decrease every 4th frame,
    BEQ CODE_01F1C6             ;$01F1AB    ||  and if branch if not time to swallow (or if no sprite in mouth at all).
    DEC.w $18AC                 ;$01F1AD    ||
    BNE CODE_01F1C6             ;$01F1B0    |/
    LDY.w $160E,X               ;$01F1B2    |\ 
    LDA.b #$00                  ;$01F1B5    ||
    STA.w $14C8,Y               ;$01F1B7    ||
    DEC A                       ;$01F1BA    || Erase the sprite, clear the slot in Yoshi's mouth, and give a coin.
    STA.w $160E,X               ;$01F1BB    ||  Also set the timer for the swallowing animation.
    LDA.b #$1B                  ;$01F1BE    ||
    STA.w $1564,X               ;$01F1C0    ||
    JMP CODE_01F0D3             ;$01F1C3    |/

CODE_01F1C6:                    ;```````````| Not swallowing; check if preparing to stick out tongue.
    LDA.w $18AE                 ;$01F1C6    |\ Branch if not waiting to stick out Yoshi's tongue. 
    BEQ CODE_01F1DF             ;$01F1C9    |/
    DEC.w $18AE                 ;$01F1CB    |\ 
    BNE Return01F1DE            ;$01F1CE    ||
    INC.w $1594,X               ;$01F1D0    ||
    STZ.w $151C,X               ;$01F1D3    || If time to stick out Yoshi's tongue, set up related addresses.
    LDA.b #$FF                  ;$01F1D6    ||
    STA.w $160E,X               ;$01F1D8    ||
    STZ.w $1564,X               ;$01F1DB    |/
Return01F1DE:                   ;           |
    RTS                         ;$01F1DE    |

CODE_01F1DF:                    ;```````````| Not preparing to stick out tongue; check for X/Y being pressed.
    LDA $C2,X                   ;$01F1DF    |\ 
    CMP.b #$01                  ;$01F1E1    ||
    BNE Return01F1DE            ;$01F1E3    || Return if not being ridden or X/Y not pressed.
    BIT $16                     ;$01F1E5    ||
    BVC Return01F1DE            ;$01F1E7    |/
    LDA.w $18AC                 ;$01F1E9    |\ Branch if Yoshi has a sprite in his mouth.
    BNE CODE_01F1F1             ;$01F1EC    |/
    JMP CODE_01F309             ;$01F1EE    | Prepare to punch Yoshi.

CODE_01F1F1:                    ;```````````| Spitting out a sprite.
    STZ.w $18AC                 ;$01F1F1    | Register mouth as empty.
    LDY.w $160E,X               ;$01F1F4    | 
    PHY                         ;$01F1F7    |
    PHY                         ;$01F1F8    |
    LDY.w $157C,X               ;$01F1F9    |\ 
    LDA $E4,X                   ;$01F1FC    ||
    CLC                         ;$01F1FE    ||
    ADC.w DATA_01F305,Y         ;$01F1FF    ||
    PLY                         ;$01F202    ||
    STA.w $00E4,Y               ;$01F203    || Set sprite X position.
    LDY.w $157C,X               ;$01F206    ||
    LDA.w $14E0,X               ;$01F209    ||
    ADC.w DATA_01F307,Y         ;$01F20C    ||
    PLY                         ;$01F20F    ||
    STA.w $14E0,Y               ;$01F210    |/
    LDA $D8,X                   ;$01F213    |\ 
    STA.w $00D8,Y               ;$01F215    || Set sprite Y position.
    LDA.w $14D4,X               ;$01F218    ||
    STA.w $14D4,Y               ;$01F21B    |/
    LDA.b #$00                  ;$01F21E    |\ 
    STA.w $C2,Y                 ;$01F220    || Clear sprite-being-eaten flag and enemies-killed count for the item.
    STA.w $15D0,Y               ;$01F223    ||  Also clear $C2 for whatever reason (as far as I know, this has no effect).
    STA.w $1626,Y               ;$01F226    |/
    LDA.w $18DC                 ;$01F229    |\ 
    CMP.b #$01                  ;$01F22C    ||
    LDA.b #$0A                  ;$01F22E    || Set sprite state based on whether Yoshi is ducking or not;
    BCC CODE_01F234             ;$01F230    ||  - if not ducking, give it thrown status (0A).
    LDA.b #$09                  ;$01F232    ||  - if ducking, give it carryable status (09).
CODE_01F234:                    ;           ||
    STA.w $14C8,Y               ;$01F234    |/
    PHX                         ;$01F237    |
    LDA.w $157C,X               ;$01F238    |\ Face the sprite the same direction as Yoshi.
    STA.w $157C,Y               ;$01F23B    |/
    TAX                         ;$01F23E    |\ 
    BCC CODE_01F243             ;$01F23F    ||
    INX                         ;$01F241    ||
    INX                         ;$01F242    || Give it an X speed based on ducking or not.
CODE_01F243:                    ;           ||
    LDA.w DATA_01F301,X         ;$01F243    ||
    STA.w $00B6,Y               ;$01F246    |/
    LDA.b #$00                  ;$01F249    |\ Clear the sprite's Y speed.
    STA.w $00AA,Y               ;$01F24B    |/
    PLX                         ;$01F24E    |
    LDA.b #$10                  ;$01F24F    |\ Briefly prevent sticking out Yoshi's tongue after spitting.
    STA.w $1558,X               ;$01F251    |/
    LDA.b #$03                  ;$01F254    |\ Switch Yoshi to spitting status.
    STA.w $1594,X               ;$01F256    |/
    LDA.b #$FF                  ;$01F259    |\ Clear slot in mouth.
    STA.w $160E,X               ;$01F25B    |/
    LDA.w $009E,Y               ;$01F25E    |\ 
    CMP.b #$0D                  ;$01F261    || Branch if not a Koopa shell or not set to spawn fire when spit.
    BCS CODE_01F2DF             ;$01F263    || Situations for spawning fire are:
    LDA.w $187B,Y               ;$01F265    ||  - Disco shell
    BNE CODE_01F27C             ;$01F268    ||  - Red shell
    LDA.w $15F6,Y               ;$01F26A    ||  - Red Yoshi
    AND.b #$0E                  ;$01F26D    ||
    CMP.b #$08                  ;$01F26F    ||| Which color shell spawns fire when spit out.
    BEQ CODE_01F27C             ;$01F271    ||
    LDA.w $15F6,X               ;$01F273    ||
    AND.b #$0E                  ;$01F276    ||
    CMP.b #$08                  ;$01F278    ||| Which color Yoshi spits out fire by default.
    BNE CODE_01F2DF             ;$01F27A    |/
CODE_01F27C:                    ;```````````| Spit fire.
    PHX                         ;$01F27C    |
    TYX                         ;$01F27D    |
    STZ.w $14C8,X               ;$01F27E    | Erase the shell.
    LDA.b #$02                  ;$01F281    |\ 
    STA $00                     ;$01F283    ||
    JSR CODE_01F295             ;$01F285    || Spawn three flames.
    JSR CODE_01F295             ;$01F288    ||
    JSR CODE_01F295             ;$01F28B    |/
    PLX                         ;$01F28E    |
    LDA.b #$17                  ;$01F28F    |\ SFX for spitting out flames.
    STA.w $1DFC                 ;$01F291    |/
    RTS                         ;$01F294    |



CODE_01F295:                    ;-----------| Spawn a flame.
    JSR CODE_018EEF             ;$01F295    | Find an extended sprite slot.
    LDA.b #$11                  ;$01F298    |\ 
    STA.w $170B,Y               ;$01F29A    ||
    LDA $E4,X                   ;$01F29D    ||
    STA.w $171F,Y               ;$01F29F    ||
    LDA.w $14E0,X               ;$01F2A2    ||
    STA.w $1733,Y               ;$01F2A5    || Spawn a fire at Yoshi's position.
    LDA $D8,X                   ;$01F2A8    ||
    STA.w $1715,Y               ;$01F2AA    ||
    LDA.w $14D4,X               ;$01F2AD    ||
    STA.w $1729,Y               ;$01F2B0    ||
    LDA.b #$00                  ;$01F2B3    ||
    STA.w $1779,Y               ;$01F2B5    |/
    PHX                         ;$01F2B8    |
    LDA.w $157C,X               ;$01F2B9    |\ 
    LSR                         ;$01F2BC    ||
    LDX $00                     ;$01F2BD    ||
    LDA.w DATA_01F2D9,X         ;$01F2BF    ||
    BCC CODE_01F2C7             ;$01F2C2    || Set X speed.
    EOR.b #$FF                  ;$01F2C4    ||
    INC A                       ;$01F2C6    ||
CODE_01F2C7:                    ;           ||
    STA.w $1747,Y               ;$01F2C7    |/
    LDA.w DATA_01F2DC,X         ;$01F2CA    |\ Set Y speed.
    STA.w $173D,Y               ;$01F2CD    |/
    LDA.b #$A0                  ;$01F2D0    |\ Useless?
    STA.w $176F,Y               ;$01F2D2    |/
    PLX                         ;$01F2D5    |
    DEC $00                     ;$01F2D6    |
    RTS                         ;$01F2D8    |

DATA_01F2D9:                    ;$01F2D9    | X speeds for Yoshi's fireballs.
    db $28,$24,$24

DATA_01F2DC:                    ;$01F2DC    | Y speeds for Yoshi's fireballs.
    db $00,$F8,$08



CODE_01F2DF:                    ;-----------| Spit out sprite normally.
    LDA.b #$20                  ;$01F2DF    |\ SFX for spitting.
    STA.w $1DF9                 ;$01F2E1    |/
    LDA.w $1686,Y               ;$01F2E4    |\ 
    AND.b #$40                  ;$01F2E7    ||
    BEQ Return01F2FE            ;$01F2E9    ||
    PHX                         ;$01F2EB    ||
    LDX.w $009E,Y               ;$01F2EC    || If set to spawn a new sprite, spawn said sprite.
    LDA.l SpriteToSpawn,X       ;$01F2EF    ||  This code actually can't normally run; the only actual cases for it are handled at $01F360.
    PLX                         ;$01F2F3    ||  However, it can end up being used for unintentionally stunned sprites.
    STA.w $009E,Y               ;$01F2F4    ||
    PHX                         ;$01F2F7    ||
    TYX                         ;$01F2F8    ||
    JSL LoadSpriteTables        ;$01F2F9    ||
    PLX                         ;$01F2FD    |/
Return01F2FE:                   ;           |
    RTS                         ;$01F2FE    |

DATA_01F2FF:                    ;$01F2FF    | Unused?
    db $20,$E0

DATA_01F301:                    ;$01F301    | X speeds to give spit sprites. First two are when in thrown status, second are stationary.
    db $30,$D0,$10,$F0

DATA_01F305:                    ;$01F305    | X offsets for a spit sprite from Yoshi, low.
    db $10,$F0
DATA_01F307:                    ;$01F307    | X offsets for a spit sprite from Yoshi, high.
    db $00,$FF



CODE_01F309:                    ;-----------| Prepare to punch routine for Yoshi.
    LDA.b #$12                  ;$01F309    |\ Initialize Yoshi tongue timer.
    STA.w $14A3                 ;$01F30B    |/
    LDA.b #$21                  ;$01F30E    |\ SFX for sticking out Yoshi's tongue.
    STA.w $1DFC                 ;$01F310    |/
    RTS                         ;$01F313    |



CODE_01F314:                    ;-----------| Extending tongue.
    LDA.w $151C,X               ;$01F314    |\ 
    CLC                         ;$01F317    || Increase length of Yoshi's tongue, and branch if at max length.
    ADC.b #$03                  ;$01F318    ||| Speed of Yoshi's tongue when sticking out.
    STA.w $151C,X               ;$01F31A    ||
    CMP.b #$20                  ;$01F31D    ||| Maximum length of Yoshi's tongue.
    BCS CODE_01F328             ;$01F31F    |/
CODE_01F321:                    ;```````````| Standard Yoshi tongue routines.
    JSR CODE_01F3FE             ;$01F321    | GFX routine.
    JSR CODE_01F4B2             ;$01F324    | Interaction routine.
    RTS                         ;$01F327    |

CODE_01F328:                    ;```````````| At max length.
    LDA.b #$08                  ;$01F328    |\\ How long to leave Yoshi's tongue at full length before retracting.
    STA.w $1558,X               ;$01F32A    || Switch to retracting.
    INC.w $1594,X               ;$01F32D    |/
    BRA CODE_01F321             ;$01F330    |



CODE_01F332:                    ;-----------| Retracting tongue.
    LDA.w $1558,X               ;$01F332    |
    BNE CODE_01F321             ;$01F335    |
    LDA.w $151C,X               ;$01F337    |\ 
    SEC                         ;$01F33A    || Reduce length of Yoshi's tongue, and branch if not fully retracted.
    SBC.b #$04                  ;$01F33B    ||| Speed of Yoshi's tongue when retracting.
    BMI CODE_01F344             ;$01F33D    ||
    STA.w $151C,X               ;$01F33F    ||
    BRA CODE_01F321             ;$01F342    |/

CODE_01F344:                    ;```````````| Tongue fully retracted; put sprite in mouth.
    STZ.w $151C,X               ;$01F344    |
    STZ.w $1594,X               ;$01F347    |
    LDY.w $160E,X               ;$01F34A    |\ Branch if there wasn't a sprite on Yoshi's tongue.
    BMI CODE_01F370             ;$01F34D    |/
    LDA.w $1686,Y               ;$01F34F    |\ 
    AND.b #$02                  ;$01F352    || Branch if it isn't meant to stay in Yoshi's mouth.
    BEQ CODE_01F373             ;$01F354    |/
    LDA.b #$07                  ;$01F356    |\ Change sprite state to in mouth.
    STA.w $14C8,Y               ;$01F358    |/
    LDA.b #$FF                  ;$01F35B    |\\ How long before Yoshi swallows the sprite.
    STA.w $18AC                 ;$01F35D    |/
    LDA.w $009E,Y               ;$01F360    |\ 
    CMP.b #$0D                  ;$01F363    ||
    BCS CODE_01F370             ;$01F365    ||
    PHX                         ;$01F367    || If the sprite was a Koopa, turn it into a shell.
    TAX                         ;$01F368    ||
    LDA.w SpriteToSpawn,X       ;$01F369    ||
    STA.w $009E,Y               ;$01F36C    ||
    PLX                         ;$01F36F    |/
CODE_01F370:                    ;           |
    JMP CODE_01F3FA             ;$01F370    |

CODE_01F373:                    ;```````````| Sprite doesn't stay in Yoshi's mouth.
    LDA.b #$00                  ;$01F373    |\ Erase sprite.
    STA.w $14C8,Y               ;$01F375    |/
    LDA.b #$1B                  ;$01F378    |\ Set swallow animation timer.
    STA.w $1564,X               ;$01F37A    |/
    LDA.b #$FF                  ;$01F37D    |\ Clear slot in Yoshi's mouth.
    STA.w $160E,X               ;$01F37F    |/
    STY $00                     ;$01F382    |
    LDA.w $009E,Y               ;$01F384    |\ 
    CMP.b #$9D                  ;$01F387    ||
    BNE CODE_01F39F             ;$01F389    ||
    LDA.w $C2,Y                 ;$01F38B    ||
    CMP.b #$03                  ;$01F38E    || If the sprite is a bubble containing a mushroom,
    BNE CODE_01F39F             ;$01F390    ||  change it into an actual mushroom.
    LDA.b #$74                  ;$01F392    ||
    STA.w $009E,Y               ;$01F394    ||
    LDA.w $167A,Y               ;$01F397    ||
    ORA.b #$40                  ;$01F39A    ||
    STA.w $167A,Y               ;$01F39C    |/
CODE_01F39F:                    ;           |
    LDA.w $009E,Y               ;$01F39F    |\ 
    CMP.b #$81                  ;$01F3A2    ||
    BNE CODE_01F3BA             ;$01F3A4    ||
    LDA.w $187B,Y               ;$01F3A6    ||
    LSR                         ;$01F3A9    ||
    LSR                         ;$01F3AA    ||
    LSR                         ;$01F3AB    || If the sprite is the roulette item,
    LSR                         ;$01F3AC    ||  change it into its current powerup.
    LSR                         ;$01F3AD    ||
    LSR                         ;$01F3AE    ||
    AND.b #$03                  ;$01F3AF    ||
    TAY                         ;$01F3B1    ||
    LDA.w ChangingItemSprite,Y  ;$01F3B2    ||
    LDY $00                     ;$01F3B5    ||
    STA.w $009E,Y               ;$01F3B7    |/
CODE_01F3BA:                    ;           |
    PHA                         ;$01F3BA    |
    LDY $00                     ;$01F3BB    |\ 
    LDA.w $167A,Y               ;$01F3BD    ||
    ASL                         ;$01F3C0    || Branch if not set to give a powerup when eaten.
    ASL                         ;$01F3C1    ||
    PLA                         ;$01F3C2    ||
    BCC CODE_01F3DB             ;$01F3C3    |/
    PHX                         ;$01F3C5    |
    TYX                         ;$01F3C6    |\ 
    STZ $C2,X                   ;$01F3C7    || Give powerup.
    JSR CODE_01C4BF             ;$01F3C9    |/
    PLX                         ;$01F3CC    |
    LDY.w $18DC                 ;$01F3CD    |\ 
    LDA.w DATA_01F3D9,Y         ;$01F3D0    || Set Yoshi's animation frame.
    STA.w $1602,X               ;$01F3D3    |/
    JMP CODE_01F321             ;$01F3D6    | Continue to handle tongue functionality, for some reason.

DATA_01F3D9:                    ;$01F3D9    | Animation frames for Yoshi during the powerup animation, based on crouching or not.
    db $00,$04


CODE_01F3DB:                    ;```````````| Sprite not set to give powerup when eaten.
    CMP.b #$7E                  ;$01F3DB    |\ 
    BNE CODE_01F3F7             ;$01F3DD    || Branch if not Yoshi Wings.
    LDA.w $C2,Y                 ;$01F3DF    ||
    BEQ CODE_01F3F7             ;$01F3E2    |/
    CMP.b #$02                  ;$01F3E4    |\ 
    BNE ADDR_01F3F1             ;$01F3E6    ||
    LDA.b #$08                  ;$01F3E8    || Warp to Yoshi Wings game.
    STA $71                     ;$01F3EA    ||
    LDA.b #$03                  ;$01F3EC    ||\ SFX for collecting wings, when eaten with Yoshi's tongue.
    STA.w $1DFC                 ;$01F3EE    |//
ADDR_01F3F1:                    ;           |
    JSR CODE_01F6CD             ;$01F3F1    | Give Yoshi wings and erase the sprite.
    JMP CODE_01F321             ;$01F3F4    | Continue to handle tongue functionality, for some reason.

CODE_01F3F7:                    ;```````````| Not Yoshi wings.
    JSR CODE_01F0D3             ;$01F3F7    | Give a coin.
CODE_01F3FA:                    ;           |
    JMP CODE_01F321             ;$01F3FA    | Continue to handle tongue functionality, for some reason.

Return01F3FD:
    RTS                         ;$01F3FD    |





CODE_01F3FE:                    ;-----------| Yoshi's tongue GFX routine.
    LDA.w $15A0,X               ;$01F3FE    |\ 
    ORA.w $186C,X               ;$01F401    || Return if offscreen or entering pipe.
    ORA.w $1419                 ;$01F404    ||
    BNE Return01F3FD            ;$01F407    |/
    LDY.w $1602,X               ;$01F409    |\ 
    LDA.w DATA_01F61A,Y         ;$01F40C    ||
    STA.w $185E                 ;$01F40F    ||
    CLC                         ;$01F412    || Get Y position to draw the tongue at.
    ADC $D8,X                   ;$01F413    ||
    SEC                         ;$01F415    ||
    SBC $1C                     ;$01F416    ||
    STA $01                     ;$01F418    |/
    LDA.w $157C,X               ;$01F41A    |\ 
    BNE CODE_01F424             ;$01F41D    ||
    TYA                         ;$01F41F    ||
    CLC                         ;$01F420    ||
    ADC.b #$08                  ;$01F421    ||
    TAY                         ;$01F423    ||
CODE_01F424:                    ;           || Get X position to draw the tongue at.
    LDA.w DATA_01F60A,Y         ;$01F424    ||
    STA $0D                     ;$01F427    ||
    LDA $E4,X                   ;$01F429    ||
    SEC                         ;$01F42B    ||
    SBC $1A                     ;$01F42C    ||
    CLC                         ;$01F42E    ||
    ADC $0D                     ;$01F42F    ||
    STA $00                     ;$01F431    |/
    LDA.w $157C,X               ;$01F433    |\ 
    BNE CODE_01F43C             ;$01F436    ||
    BCS Return01F3FD            ;$01F438    || Return if it would draw offscreen.
    BRA CODE_01F43E             ;$01F43A    ||
CODE_01F43C:                    ;           ||
    BCC Return01F3FD            ;$01F43C    |/
CODE_01F43E:                    ;           |
    LDA.w $151C,X               ;$01F43E    |\ 
    STA.w $4205                 ;$01F441    ||
    STZ.w $4204                 ;$01F444    ||
    LDA.b #$04                  ;$01F447    ||| Number of tongue tiles to calculate for, -1.
    STA.w $4206                 ;$01F449    ||
    NOP                         ;$01F44C    ||
    NOP                         ;$01F44D    || Calculate how to space the tongue tiles.
    NOP                         ;$01F44E    ||
    NOP                         ;$01F44F    ||
    NOP                         ;$01F450    ||
    NOP                         ;$01F451    ||
    NOP                         ;$01F452    ||
    NOP                         ;$01F453    |/
    LDA.w $157C,X               ;$01F454    |\ 
    STA $07                     ;$01F457    ||
    LSR                         ;$01F459    ||
    LDA.w $4215                 ;$01F45A    || Invert spacing amount if facing left.
    BCC CODE_01F462             ;$01F45D    ||
    EOR.b #$FF                  ;$01F45F    ||
    INC A                       ;$01F461    |/
CODE_01F462:                    ;           |
    STA $05                     ;$01F462    |
    LDA.b #$04                  ;$01F464    || How many tiles actually make up Yoshi's tongue (also affects visual length).
    STA $06                     ;$01F466    |
    LDY.b #$0C                  ;$01F468    || Base OAM index (from $0200) of Yoshi's tongue.
CODE_01F46A:                    ;```````````| Tongue tile loop.
    LDA $00                     ;$01F46A    |\ 
    STA.w $0200,Y               ;$01F46C    ||
    CLC                         ;$01F46F    || Set X position.
    ADC $05                     ;$01F470    ||
    STA $00                     ;$01F472    |/
    LDA $05                     ;$01F474    |\ 
    BPL CODE_01F47C             ;$01F476    ||
    BCC Return01F4B1            ;$01F478    || Return GFX routine if the current tile would go offscreen.
    BRA CODE_01F47E             ;$01F47A    ||
CODE_01F47C:                    ;           ||
    BCS Return01F4B1            ;$01F47C    |/
CODE_01F47E:                    ;           |
    LDA $01                     ;$01F47E    |\ Set Y position 
    STA.w $0201,Y               ;$01F480    |/
    LDA $06                     ;$01F483    |\ Set tile number.
    CMP.b #$01                  ;$01F485    ||
    LDA.b #$76                  ;$01F487    ||| Tile used by the middle of Yoshi's tongue.
    BCS CODE_01F48D             ;$01F489    ||
    LDA.b #$66                  ;$01F48B    ||| Tile used by the end of Yoshi's tongue.
CODE_01F48D:                    ;           ||
    STA.w $0202,Y               ;$01F48D    |/
    LDA $07                     ;$01F490    |\ 
    LSR                         ;$01F492    ||
    LDA.b #$09                  ;$01F493    ||| Base YXPPCCCT properties for Yoshi's tongue.
    BCS CODE_01F499             ;$01F495    ||
    ORA.b #$40                  ;$01F497    || Set YXPPCCCT.
CODE_01F499:                    ;           ||
    ORA $64                     ;$01F499    ||
    STA.w $0203,Y               ;$01F49B    |/
    PHY                         ;$01F49E    |
    TYA                         ;$01F49F    |
    LSR                         ;$01F4A0    |
    LSR                         ;$01F4A1    |
    TAY                         ;$01F4A2    |
    LDA.b #$00                  ;$01F4A3    |\ Set size (8x8).
    STA.w $0420,Y               ;$01F4A5    |/
    PLY                         ;$01F4A8    |
    INY                         ;$01F4A9    |\ 
    INY                         ;$01F4AA    ||
    INY                         ;$01F4AB    || Move to next tile.
    INY                         ;$01F4AC    ||
    DEC $06                     ;$01F4AD    ||
    BPL CODE_01F46A             ;$01F4AF    |/
Return01F4B1:                   ;           |
    RTS                         ;$01F4B1    |





    ; Note: this routine is intended to be run after the GFX routine. Interaction will mess up if it doesn't! (hence why offscreen messes)
CODE_01F4B2:                    ;-----------| Yoshi's tongue interaction routine.
    LDA.w $160E,X               ;$01F4B2    |\ Branch if nothing is currently on his tongue.
    BMI CODE_01F524             ;$01F4B5    |/
    LDY.b #$00                  ;$01F4B7    |
    LDA $0D                     ;$01F4B9    |\ 
    BMI CODE_01F4C3             ;$01F4BB    ||
    CLC                         ;$01F4BD    ||
    ADC.w $151C,X               ;$01F4BE    ||
    BRA CODE_01F4CC             ;$01F4C1    ||
CODE_01F4C3:                    ;           ||
    LDA.w $151C,X               ;$01F4C3    ||
    EOR.b #$FF                  ;$01F4C6    ||
    INC A                       ;$01F4C8    ||
    CLC                         ;$01F4C9    ||
    ADC $0D                     ;$01F4CA    ||
CODE_01F4CC:                    ;           ||
    SEC                         ;$01F4CC    || Attach the sprite horizontally to Yoshi's tongue.
    SBC.b #$04                  ;$01F4CD    ||
    BPL CODE_01F4D2             ;$01F4CF    ||
    DEY                         ;$01F4D1    ||
CODE_01F4D2:                    ;           ||
    PHY                         ;$01F4D2    ||
    CLC                         ;$01F4D3    ||
    ADC $E4,X                   ;$01F4D4    ||
    LDY.w $160E,X               ;$01F4D6    ||
    STA.w $00E4,Y               ;$01F4D9    ||
    PLY                         ;$01F4DC    ||
    TYA                         ;$01F4DD    ||
    ADC.w $14E0,X               ;$01F4DE    ||
    LDY.w $160E,X               ;$01F4E1    ||
    STA.w $14E0,Y               ;$01F4E4    |/
    LDA.b #$FC                  ;$01F4E7    |\ 
    STA $00                     ;$01F4E9    ||
    LDA.w $1662,Y               ;$01F4EB    ||
    AND.b #$40                  ;$01F4EE    ||
    BNE CODE_01F4FD             ;$01F4F0    ||
    LDA.w $190F,Y               ;$01F4F2    ||
    AND.b #$20                  ;$01F4F5    ||
    BEQ CODE_01F4FD             ;$01F4F7    ||
    LDA.b #$F8                  ;$01F4F9    ||
    STA $00                     ;$01F4FB    ||
CODE_01F4FD:                    ;           ||
    STZ $01                     ;$01F4FD    || Attach the sprite vertically to Yoshi's tongue.
    LDA $00                     ;$01F4FF    ||
    CLC                         ;$01F501    ||
    ADC.w $185E                 ;$01F502    ||
    BPL CODE_01F509             ;$01F505    ||
    DEC $01                     ;$01F507    ||
CODE_01F509:                    ;           ||
    CLC                         ;$01F509    ||
    ADC $D8,X                   ;$01F50A    ||
    STA.w $00D8,Y               ;$01F50C    ||
    LDA.w $14D4,X               ;$01F50F    ||
    ADC $01                     ;$01F512    ||
    STA.w $14D4,Y               ;$01F514    |/
    LDA.b #$00                  ;$01F517    |\ 
    STA.w $00AA,Y               ;$01F519    || Clear sprite X/Y speed.
    STA.w $00B6,Y               ;$01F51C    |/
    INC A                       ;$01F51F    |\ Set flag to disable further interaction.
    STA.w $15D0,Y               ;$01F520    |/
    RTS                         ;$01F523    |



CODE_01F524:                    ;```````````| Currently no sprite on Yoshi's tongue.
    PHY                         ;$01F524    |
    LDY.b #$00                  ;$01F525    |
    LDA $0D                     ;$01F527    |\ 
    BMI CODE_01F531             ;$01F529    ||
    CLC                         ;$01F52B    ||
    ADC.w $151C,X               ;$01F52C    ||
    BRA CODE_01F53A             ;$01F52F    ||
CODE_01F531:                    ;           ||
    LDA.w $151C,X               ;$01F531    ||
    EOR.b #$FF                  ;$01F534    ||
    INC A                       ;$01F536    ||
    CLC                         ;$01F537    ||
    ADC $0D                     ;$01F538    ||
CODE_01F53A:                    ;           || Set interaction point X position.
    CLC                         ;$01F53A    ||
    ADC.b #$00                  ;$01F53B    ||
    BPL CODE_01F540             ;$01F53D    ||
    DEY                         ;$01F53F    ||
CODE_01F540:                    ;           ||
    CLC                         ;$01F540    ||
    ADC $E4,X                   ;$01F541    ||
    STA $00                     ;$01F543    ||
    TYA                         ;$01F545    ||
    ADC.w $14E0,X               ;$01F546    ||
    STA $08                     ;$01F549    |/
    PLY                         ;$01F54B    |
    LDA.w $185E                 ;$01F54C    |\ 
    CLC                         ;$01F54F    ||
    ADC.b #$02                  ;$01F550    ||
    CLC                         ;$01F552    ||
    ADC $D8,X                   ;$01F553    || Set interaction point Y position.
    STA $01                     ;$01F555    ||
    LDA.w $14D4,X               ;$01F557    ||
    ADC.b #$00                  ;$01F55A    ||
    STA $09                     ;$01F55C    |/
    LDA.b #$08                  ;$01F55E    |\ 
    STA $02                     ;$01F560    || Set interaction width/height.
    LDA.b #$04                  ;$01F562    ||
    STA $03                     ;$01F564    |/
    LDY.b #$0B                  ;$01F566    |\ 
CODE_01F568:                    ;           ||
    STY.w $1695                 ;$01F568    ||
    CPY.w $15E9                 ;$01F56B    ||
    BEQ CODE_01F586             ;$01F56E    ||
    LDA.w $160E,X               ;$01F570    ||
    BPL CODE_01F586             ;$01F573    ||
    LDA.w $14C8,Y               ;$01F575    ||
    CMP.b #$08                  ;$01F578    || Loop through all sprite slots and
    BCC CODE_01F586             ;$01F57A    ||  see if Yoshi's tongue is touching an edible one.
    LDA.w $1632,Y               ;$01F57C    ||
    BNE CODE_01F586             ;$01F57F    ||
    PHY                         ;$01F581    ||
    JSR TryEatSprite            ;$01F582    ||
    PLY                         ;$01F585    ||
CODE_01F586:                    ;           ||
    DEY                         ;$01F586    ||
    BPL CODE_01F568             ;$01F587    |/
    JSL CODE_02B9FA             ;$01F589    | Try berry interaction.
    RTS                         ;$01F58D    |


TryEatSprite:                   ;-----------| Subroutine to attach a sprite to Yoshi's tongue if applicable.
    PHX                         ;$01F58E    |
    TYX                         ;$01F58F    |
    JSL GetSpriteClippingA      ;$01F590    |\ 
    PLX                         ;$01F594    || Return if not in contact.
    JSL CheckForContact         ;$01F595    ||
    BCC Return01F609            ;$01F599    |/
    LDA.w $1686,Y               ;$01F59B    |\ 
    LSR                         ;$01F59E    || Return if not edible.
    BCC EatSprite               ;$01F59F    ||
    LDA.b #$01                  ;$01F5A1    ||\ SFX for tonguing a sprite Yoshi can't eat.
    STA.w $1DF9                 ;$01F5A3    ||/
    RTS                         ;$01F5A6    |/

EatSprite:                      ;```````````| Sprite is edible and in contact.
    LDA.w $009E,Y               ;$01F5A7    |\ 
    CMP.b #$70                  ;$01F5AA    || Branch if not sprite 70 (Pokey).
    BNE CODE_01F5FB             ;$01F5AC    |/
SpltPokeyInto2Sprs:             ;           |
    STY.w $185E                 ;$01F5AE    |
    LDA $01                     ;$01F5B1    |\ 
    SEC                         ;$01F5B3    ||
    SBC.w $00D8,Y               ;$01F5B4    ||
    CLC                         ;$01F5B7    || Remove the Pokey segment that Yoshi's tongue is touching.
    ADC.b #$00                  ;$01F5B8    ||
    PHX                         ;$01F5BA    ||
    TYX                         ;$01F5BB    ||
    JSL RemovePokeySegment      ;$01F5BC    |/
    PLX                         ;$01F5C0    |
    JSL FindFreeSprSlot         ;$01F5C1    |\ If no sprite slots are available, don't spawn anything. (...which results in a glitch, gg)
    BMI Return01F609            ;$01F5C5    |/
    LDA.b #$08                  ;$01F5C7    |\  
    STA.w $14C8,Y               ;$01F5C9    ||
    LDA.b #$70                  ;$01F5CC    ||| Sprite Yoshi grabs when eating a Pokey.
    STA.w $009E,Y               ;$01F5CE    ||
    LDA $00                     ;$01F5D1    || 
    STA.w $00E4,Y               ;$01F5D3    ||
    LDA $08                     ;$01F5D6    || Spawn a new Pokey on Yoshi's tongue.
    STA.w $14E0,Y               ;$01F5D8    ||  Note: YXPPCCCT comes from tweaker bytes, unlike how the Pokey normally gets it!
    LDA $01                     ;$01F5DB    ||
    STA.w $00D8,Y               ;$01F5DD    ||
    LDA $09                     ;$01F5E0    ||
    STA.w $14D4,Y               ;$01F5E2    ||
    PHX                         ;$01F5E5    ||
    TYX                         ;$01F5E6    ||
    JSL InitSpriteTables        ;$01F5E7    |/
    LDX.w $185E                 ;$01F5EB    |\ 
    LDA $C2,X                   ;$01F5EE    || Set some value for the Pokey segment?
    AND $0D                     ;$01F5F0    ||
    STA.w $C2,Y                 ;$01F5F2    |/
    LDA.b #$01                  ;$01F5F5    |\ Mark as a segment. 
    STA.w $1534,Y               ;$01F5F7    |/
    PLX                         ;$01F5FA    |
CODE_01F5FB:                    ;```````````| Not specifically Pokey.
    TYA                         ;$01F5FB    |\ Store slot on Yoshi's tongue. 
    STA.w $160E,X               ;$01F5FC    |/
    LDA.b #$02                  ;$01F5FF    |\ 
    STA.w $1594,X               ;$01F601    || Change tongue state to retracting.
    LDA.b #$0A                  ;$01F604    ||
    STA.w $1558,X               ;$01F606    |/
Return01F609:                   ;           |
    RTS                         ;$01F609    |



DATA_01F60A:                    ;$01F60A    | X offsets of Yoshi's tongue from Yoshi's head, indexed by animation frame.
    db $F5,$F5,$F5,$F5,$F5,$F5,$F5,$F0      ; Left
    db $13,$13,$13,$13,$13,$13,$13,$18      ; Right

DATA_01F61A:                    ;$01F61A    | Y offsets of Yoshi's tongue from Yoshi's head, indexed by animation frame.
    db $08,$08,$08,$08,$08,$08,$08,$13





CODE_01F622:                    ;-----------| Yoshi-Sprite interaction routine.
    LDA.w $163E,X               ;$01F622    |\ 
    ORA $9D                     ;$01F625    || Return if game frozen or sprite contact is disabled.
    BNE Return01F667            ;$01F627    |/
    LDY.b #$0B                  ;$01F629    |
CODE_01F62B:                    ;           |
    STY.w $1695                 ;$01F62B    |
    TYA                         ;$01F62E    |
    EOR $13                     ;$01F62F    |\ 
    AND.b #$01                  ;$01F631    ||
    BNE CODE_01F661             ;$01F633    ||
    TYA                         ;$01F635    ||
    CMP.w $160E,X               ;$01F636    ||
    BEQ CODE_01F661             ;$01F639    ||
    CPY.w $15E9                 ;$01F63B    ||
    BEQ CODE_01F661             ;$01F63E    ||
    LDA.w $14C8,Y               ;$01F640    || Skip the slot if:
    CMP.b #$08                  ;$01F643    || - Not time to process (even slots on even frames, odd slots on odd frames)
    BCC CODE_01F661             ;$01F645    || - It's on Yoshi's tongue.
    LDA.w $009E,Y               ;$01F647    || - It's Yoshi himself.
    LDA.w $14C8,Y               ;$01F64A    || - It's dying (sprite status < 8).
    CMP.b #$09                  ;$01F64D    || - It's carryable (sprite status 9).
    BEQ CODE_01F661             ;$01F64F    || - It's invincible to star/cape/fire ($167A bit 1).
    LDA.w $167A,Y               ;$01F651    || - It has Yoshi interaction disabled (e.g. already on tongue).
    AND.b #$02                  ;$01F654    || - It's on the wrong layer.
    ORA.w $15D0,Y               ;$01F656    ||
    ORA.w $1632,Y               ;$01F659    || For anything else, process interaction.
    BNE CODE_01F661             ;$01F65C    ||
    JSR CODE_01F668             ;$01F65E    ||
CODE_01F661:                    ;           ||
    LDY.w $1695                 ;$01F661    ||
    DEY                         ;$01F664    ||
    BPL CODE_01F62B             ;$01F665    |/
Return01F667:                   ;           |
    RTS                         ;$01F667    |

CODE_01F668:                    ;```````````| Processing Yoshi-sprite interaction.
    PHX                         ;$01F668    |
    TYX                         ;$01F669    |
    JSL GetSpriteClippingB      ;$01F66A    |\ 
    PLX                         ;$01F66E    ||
    JSL GetSpriteClippingA      ;$01F66F    || Return if sprites are not in contact.
    JSL CheckForContact         ;$01F673    ||
    BCC Return01F667            ;$01F677    |/
    LDA.w $009E,Y               ;$01F679    |\ 
    CMP.b #$9D                  ;$01F67C    ||
    BEQ Return01F667            ;$01F67E    ||
    CMP.b #$15                  ;$01F680    || Return if sprite 9D (Bubble).
    BEQ CODE_01F69E             ;$01F682    ||
    CMP.b #$16                  ;$01F684    || Kick-kill the sprite if it is a:
    BEQ CODE_01F69E             ;$01F686    || - Fish not in water.
    CMP.b #$04                  ;$01F688    || - Shell-less non-blue Koopa sliding out of shell.
    BCS CODE_01F6A3             ;$01F68A    ||
    CMP.b #$02                  ;$01F68C    || If anything else, branch to check whether Yoshi should be hurt.
    BEQ CODE_01F6A3             ;$01F68E    ||
    LDA.w $163E,Y               ;$01F690    ||
    BPL CODE_01F6A3             ;$01F693    |/
CODE_01F695:                    ;```````````| Sprite is in a kickable state.
    PHY                         ;$01F695    |
    PHX                         ;$01F696    |
    TYX                         ;$01F697    |
    JSR CODE_01B12A             ;$01F698    | Kick-kill the sprite.
    PLX                         ;$01F69B    |
    PLY                         ;$01F69C    |
    RTS                         ;$01F69D    |

CODE_01F69E:                    ;```````````| Sprite is a fish.
    LDA.w $164A,Y               ;$01F69E    |\ If not in water, kick-kill it.
    BEQ CODE_01F695             ;$01F6A1    |/
CODE_01F6A3:                    ;```````````| Sprite is not kickable.
    LDA.w $009E,Y               ;$01F6A3    |\ 
    CMP.b #$BF                  ;$01F6A6    ||
    BNE CODE_01F6B4             ;$01F6A8    || Return if sprite BF (Mega Mole)
    LDA $96                     ;$01F6AA    ||  and too far to the right.
    SEC                         ;$01F6AC    ||  (basically, this is accounting for 32x32)
    SBC.w $00D8,Y               ;$01F6AD    ||
    CMP.b #$E8                  ;$01F6B0    ||
    BMI Return01F6DC            ;$01F6B2    |/
CODE_01F6B4:                    ;           |
    LDA.w $009E,Y               ;$01F6B4    |\ 
    CMP.b #$7E                  ;$01F6B7    || Branch if not sprite 7E (wings).
    BNE CODE_01F6DD             ;$01F6B9    |/
    LDA.w $C2,Y                 ;$01F6BB    |\ Return if in flying red coin form.
    BEQ Return01F6DC            ;$01F6BE    |/
    CMP.b #$02                  ;$01F6C0    |\ 
    BNE CODE_01F6CD             ;$01F6C2    ||
    LDA.b #$08                  ;$01F6C4    || Warp to Yoshi Wings game.
    STA $71                     ;$01F6C6    ||
    LDA.b #$03                  ;$01F6C8    ||\ SFX for collecting wings, when touched.
    STA.w $1DFC                 ;$01F6CA    |//
CODE_01F6CD:                    ;           |
    LDA.b #$40                  ;$01F6CD    |\ (useless)
    STA.w $14AA                 ;$01F6CF    |/
    LDA.b #$02                  ;$01F6D2    |\ Give Yoshi wings.
    STA.w $141E                 ;$01F6D4    |/
    LDA.b #$00                  ;$01F6D7    |\ Erase sprite.
    STA.w $14C8,Y               ;$01F6D9    |/
Return01F6DC:                   ;           |
    RTS                         ;$01F6DC    |

CODE_01F6DD:                    ;```````````| Not wings.
    CMP.b #$4E                  ;$01F6DD    |\ 
    BEQ CODE_01F6E5             ;$01F6DF    ||
    CMP.b #$4D                  ;$01F6E1    ||
    BNE CODE_01F6EC             ;$01F6E3    || Return if touching either sprite 4D or sprite 4E (Monty Moles)
CODE_01F6E5:                    ;           ||  while they're still in the ground.
    LDA.w $C2,Y                 ;$01F6E5    ||
    CMP.b #$02                  ;$01F6E8    ||
    BCC Return01F6DC            ;$01F6EA    |/
CODE_01F6EC:                    ;           |
    LDA $05                     ;$01F6EC    |\ 
    CLC                         ;$01F6EE    || Return if the sprite is below Yoshi's 'lower body', i.e. Mario is mostly above the enemy.
    ADC.b #$0D                  ;$01F6EF    ||  (mainly meant to reduce risk of being damaged while jumping over an enemy)
    CMP $01                     ;$01F6F1    ||
    BMI Return01F74B            ;$01F6F3    |/
    LDA.w $14C8,Y               ;$01F6F5    |\ 
    CMP.b #$0A                  ;$01F6F8    ||
    BNE CODE_01F70E             ;$01F6FA    ||
    PHX                         ;$01F6FC    ||
    TYX                         ;$01F6FD    ||
    JSR SubHorzPosBnk1          ;$01F6FE    || If the sprite is in a thrown state,
    STY $00                     ;$01F701    ||  return if it's moving away from Yoshi.
    LDA $B6,X                   ;$01F703    ||  (to prevent spit shells from hurting him)
    PLX                         ;$01F705    ||
    ASL                         ;$01F706    ||
    ROL                         ;$01F707    ||
    AND.b #$01                  ;$01F708    ||
    CMP $00                     ;$01F70A    ||
    BNE Return01F74B            ;$01F70C    |/
CODE_01F70E:                    ;           |
    LDA.w $1490                 ;$01F70E    |\ Return if Mario has star power.
    BNE Return01F74B            ;$01F711    |/
    LDA.b #$10                  ;$01F713    |\ Briefly disable sprite contact.
    STA.w $163E,X               ;$01F715    |/
    LDA.b #$03                  ;$01F718    |\ Turn off Yoshi drums.
    STA.w $1DFA                 ;$01F71A    |/
    LDA.b #$13                  ;$01F71D    |\ SFX for losing Yoshi.
    STA.w $1DFC                 ;$01F71F    |/
    LDA.b #$02                  ;$01F722    |\ 
    STA $C2,X                   ;$01F724    || Send Yoshi running.
    STZ.w $187A                 ;$01F726    |/
    LDA.b #$C0                  ;$01F729    |\\ Y speed to give Mario when knocked off Yoshi by a standard sprite.
    STA $7D                     ;$01F72B    ||
    STZ $7B                     ;$01F72D    |/
    JSR SubHorzPosBnk1          ;$01F72F    |\ 
    LDA.w DATA_01EBBE,Y         ;$01F732    || Make Yoshi run away from Mario.
    STA $B6,X                   ;$01F735    |/
    STZ.w $1594,X               ;$01F737    |\ 
    STZ.w $151C,X               ;$01F73A    || Clear tongue-related addresses.
    STZ.w $18AE                 ;$01F73D    |/
    STZ.w $0DC1                 ;$01F740    | Don't let Mario carry Yoshi to the next level.
    LDA.b #$30                  ;$01F743    |\\ How long to make Mario invincible after being knocked off Yoshi.
    STA.w $1497                 ;$01F745    |/
    JSR CODE_01EDCC             ;$01F748    | Offset Mario vertically from Yoshi.
Return01F74B:                   ;           |
    RTS                         ;$01F74B    |



CODE_01F74C:                    ;-----------| Subroutine for intiating the Yoshi's egg hatching.
    LDA.b #$08                  ;$01F74C    |\ Return the egg to normal status.
    STA.w $14C8,X               ;$01F74E    |/
CODE_01F751:                    ;           |
    LDA.b #$20                  ;$01F751    |\ Set the timer for the Yoshi egg hatching animation.
    STA.w $1540,X               ;$01F753    |/
    LDA.b #$0A                  ;$01F756    |\ SFX for the Yoshi egg hatching.
    STA.w $1DFC                 ;$01F758    |/
    RTL                         ;$01F75B    |





DATA_01F75C:                    ;$01F75C    | GFX pages for each of the tiles in the Yoshi egg's hatching animation.
    db $00,$01,$01,$01

YoshiEggTiles:                  ;$01F760    | Tile numbers for each frame in the Yoshi egg's hatching animation.
    db $62,$02,$02,$00

    ; Yoshi egg misc RAM:
    ; $151C - Sprite ID of the sprite contained inside (2D or 78).
    ; $1540 - Timer for the hatching animation.
    ; $187B - Flag to prevent immediate hatching; if set, waits until Mario gets close.
    
YoshiEgg:                       ;-----------| Yoshi egg MAIN
    LDA.w $187B,X               ;$01F764    |\ Branch if currently hatching.
    BEQ CODE_01F799             ;$01F767    |/
    JSR IsSprOffScreen          ;$01F769    |\ Skip checking whether to hatch when offscreen (doesn't actually fix screen wrapping, though...).
    BNE CODE_01F78D             ;$01F76C    |/
    JSR SubHorzPosBnk1          ;$01F76E    |\ 
    LDA $0F                     ;$01F771    ||
    CLC                         ;$01F773    ||
    ADC.b #$20                  ;$01F774    || If Mario is within two tiles horizontally, start hatching.
    CMP.b #$40                  ;$01F776    ||
    BCS CODE_01F78D             ;$01F778    ||
    STZ.w $187B,X               ;$01F77A    ||
    JSL CODE_01F751             ;$01F77D    || 
    LDA.b #$2D                  ;$01F781    ||\\ Sprite that spawns out of colored Yoshi eggs (Baby Yoshi).
    LDY.w $18E2                 ;$01F783    |||
    BEQ CODE_01F78A             ;$01F786    |||
    LDA.b #$78                  ;$01F788    |||| Sprite that spawns out of colored Yoshi eggs when Mario has a Yoshi (1up).
CODE_01F78A:                    ;           |||
    STA.w $151C,X               ;$01F78A    |//
CODE_01F78D:                    ;           |
    JSR SubSprGfx2Entry1        ;$01F78D    |\ 
    LDY.w $15EA,X               ;$01F790    ||
    LDA.b #$00                  ;$01F793    ||| Tile to use for the Yoshi egg.
    STA.w $0302,Y               ;$01F795    |/
    RTS                         ;$01F798    |


CODE_01F799:                    ;```````````| Egg is hatching.
    LDA.w $1540,X               ;$01F799    |\ Branch if fully hatched.
    BEQ CODE_01F7C2             ;$01F79C    |/
    LSR                         ;$01F79E    |\ 
    LSR                         ;$01F79F    ||
    LSR                         ;$01F7A0    ||
    TAY                         ;$01F7A1    ||
    LDA.w YoshiEggTiles,Y       ;$01F7A2    ||
    PHA                         ;$01F7A5    ||
    LDA.w DATA_01F75C,Y         ;$01F7A6    || Handle the hatching animation.
    PHA                         ;$01F7A9    ||
    JSR SubSprGfx2Entry1        ;$01F7AA    ||
    LDY.w $15EA,X               ;$01F7AD    ||
    PLA                         ;$01F7B0    ||
    STA $00                     ;$01F7B1    ||
    LDA.w $0303,Y               ;$01F7B3    ||\ 
    AND.b #$FE                  ;$01F7B6    ||| Set tilemap page based on the current frame of animation.
    ORA $00                     ;$01F7B8    |||
    STA.w $0303,Y               ;$01F7BA    ||/
    PLA                         ;$01F7BD    ||\ Set tile number. 
    STA.w $0302,Y               ;$01F7BE    |//
    RTS                         ;$01F7C1    |


CODE_01F7C2:                    ;```````````| Fully hatched.
    JSR CODE_01F7C8             ;$01F7C2    | Spawn the egg shards.
    JMP CODE_01F83D             ;$01F7C5    |

CODE_01F7C8:                    ;```````````| Subroutine to spawn the Yoshi egg shards after hatching.
    JSR IsSprOffScreen          ;$01F7C8    |\ Return if offscreen.
    BNE Return01F82C            ;$01F7CB    |/
    LDA $E4,X                   ;$01F7CD    |
    STA $00                     ;$01F7CF    |
    LDA $D8,X                   ;$01F7D1    |
    STA $02                     ;$01F7D3    |
    LDA.w $14D4,X               ;$01F7D5    |
    STA $03                     ;$01F7D8    |
    PHX                         ;$01F7DA    |
    LDY.b #$03                  ;$01F7DB    |
    LDX.b #$0B                  ;$01F7DD    |\ 
CODE_01F7DF:                    ;           ||
    LDA.w $17F0,X               ;$01F7DF    ||
    BEQ CODE_01F7F4             ;$01F7E2    ||
CODE_01F7E4:                    ;           ||
    DEX                         ;$01F7E4    || Find an empty minor extended sprite slot,
    BPL CODE_01F7DF             ;$01F7E5    ||  or overwrite on if none are found.
    DEC.w $185D                 ;$01F7E7    ||
    BPL CODE_01F7F1             ;$01F7EA    ||
    LDA.b #$0B                  ;$01F7EC    ||
    STA.w $185D                 ;$01F7EE    ||
CODE_01F7F1:                    ;           ||
    LDX.w $185D                 ;$01F7F1    |/
CODE_01F7F4:                    ;           |
    LDA.b #$03                  ;$01F7F4    |\ Set minor extended sprite number.
    STA.w $17F0,X               ;$01F7F6    |/
    LDA $00                     ;$01F7F9    |\ 
    CLC                         ;$01F7FB    ||
    ADC.w DATA_01F831,Y         ;$01F7FC    ||
    STA.w $1808,X               ;$01F7FF    ||
    LDA $02                     ;$01F802    || Set X/Y position for the shard, offset from the egg's original position.
    CLC                         ;$01F804    ||
    ADC.w DATA_01F82D,Y         ;$01F805    ||
    STA.w $17FC,X               ;$01F808    ||
    LDA $03                     ;$01F80B    ||
    STA.w $1814,X               ;$01F80D    |/
    LDA.w DATA_01F835,Y         ;$01F810    |\ 
    STA.w $1820,X               ;$01F813    || Set initial X/Y speed.
    LDA.w DATA_01F839,Y         ;$01F816    ||
    STA.w $182C,X               ;$01F819    |/
    TYA                         ;$01F81C    |\ 
    ASL                         ;$01F81D    ||
    ASL                         ;$01F81E    ||
    ASL                         ;$01F81F    || Set X/Y flip and timer for each shard.
    ASL                         ;$01F820    ||
    ASL                         ;$01F821    ||
    ASL                         ;$01F822    ||
    ORA.b #$28                  ;$01F823    ||| How long each shard stays active for.
    STA.w $1850,X               ;$01F825    |/
    DEY                         ;$01F828    |
    BPL CODE_01F7E4             ;$01F829    |
    PLX                         ;$01F82B    |
Return01F82C:                   ;           |
    RTS                         ;$01F82C    |

DATA_01F82D:                    ;$01F82D    | Y position offsets for each of the Yoshi egg's shards.
    db $00,$00,$08,$08

DATA_01F831:                    ;$01F831    | X position offsets for each of the Yoshi egg's shards.
    db $00,$08,$00,$08

DATA_01F835:                    ;$01F835    | Y speeds for each of the Yoshi egg's shards.
    db $E8,$E8,$F4,$F4

DATA_01F839:                    ;$01F839    | X speeds for each of the YOshi egg's shards.
    db $FA,$06,$FD,$03



CODE_01F83D:                    ;-----------| Subroutine to spawn the baby Yoshi / 1up from a Yoshi egg.
    LDA.w $151C,X               ;$01F83D    |\ Set sprite number.
    STA $9E,X                   ;$01F840    |/
    CMP.b #$35                  ;$01F842    |\ Branch if spawning an adult Yoshi (from a ? block).
    BEQ CODE_01F86C             ;$01F844    |/
    CMP.b #$2D                  ;$01F846    |\ Branch if spawning a 1up (or any other sprite besides Baby Yoshi).
    BNE CODE_01F867             ;$01F848    |/
    LDA.b #$09                  ;$01F84A    |\ Set sprite status (09 - carryable).
    STA.w $14C8,X               ;$01F84C    |/
    LDA.w $15F6,X               ;$01F84F    |\ 
    AND.b #$0E                  ;$01F852    ||
    PHA                         ;$01F854    ||
    JSL InitSpriteTables        ;$01F855    ||
    PLA                         ;$01F859    || Initialize and set YXPPCCCT for the baby Yoshi.
    STA $00                     ;$01F85A    ||
    LDA.w $15F6,X               ;$01F85C    ||
    AND.b #$F1                  ;$01F85F    ||
    ORA $00                     ;$01F861    ||
    STA.w $15F6,X               ;$01F863    |/
    RTS                         ;$01F866    |

CODE_01F867:                    ;```````````| Spawning a 1up: just initialize the sprite.
    JSL InitSpriteTables        ;$01F867    |
    RTS                         ;$01F86B    |

CODE_01F86C:                    ;```````````| Spawning a Yoshi: run animation.
    JSL InitSpriteTables        ;$01F86C    |
    JMP CODE_01A2B5             ;$01F870    | Run hatching aniamtion.





Unused01F873:                   ;$01F873    | Unused table.
    db $08,$F8

UnusedInit:                     ;-----------| Unused sprite INIT.
    JSR FaceMario               ;$01F875    |
    STA.w $1534,X               ;$01F878    |
Return01F87B:                   ;           |
    RTS                         ;$01F87B    |





InitEerie:                      ;-----------| Eerie INIT.
    JSR SubHorzPosBnk1          ;$01F87C    |\ 
    LDA.w EerieSpeedX,Y         ;$01F87F    || Set initial X speed towards Mario.
    STA $B6,X                   ;$01F882    |/
InitBigBoo:                     ;-----------| Big Boo INIT.
    JSL GetRand                 ;$01F884    |\ Initialize animation timer.
    STA.w $1570,X               ;$01F888    |/
    RTS                         ;$01F88B    |



EerieSpeedX:                    ;$01F88C    | X speeds for Eeries.
    db $10,$F0

EerieSpeedY:                    ;$01F88E    | Max Y speeds for Eeries.
    db $18,$E8

    ; Eerie misc RAM:
    ; $C2   - Direction of vertical acceleration for the wave Eerie. Even = down, odd = up.
    ; $1570 - Frame counter for animation.
    ; $157C - Horizontal direction the sprite is facing.
    ; $1602 - Animation frame. 0/1 = normal.
    
Eerie:                          ;-----------| Eerie MAIN.
    LDA.w $14C8,X               ;$01F890    |\ 
    CMP.b #$08                  ;$01F893    ||
    BNE CODE_01F8C9             ;$01F895    || Branch if game frozen or not in a normal state.
    LDA $9D                     ;$01F897    ||
    BNE CODE_01F8C9             ;$01F899    |/
    JSR SubSprXPosNoGrvty       ;$01F89B    | Update X position.
    LDA $9E,X                   ;$01F89E    |\ 
    CMP.b #$39                  ;$01F8A0    || Branch if not sprite 39 (wave Eerie).
    BNE CODE_01F8C0             ;$01F8A2    |/
    LDA $C2,X                   ;$01F8A4    |\ 
    AND.b #$01                  ;$01F8A6    ||
    TAY                         ;$01F8A8    ||
    LDA $AA,X                   ;$01F8A9    ||
    CLC                         ;$01F8AB    ||
    ADC.w DATA_01EBB4,Y         ;$01F8AC    || Alternate vertical acceleration, to create the wave motion.
    STA $AA,X                   ;$01F8AF    ||
    CMP.w EerieSpeedY,Y         ;$01F8B1    ||
    BNE CODE_01F8B8             ;$01F8B4    ||
    INC $C2,X                   ;$01F8B6    ||
CODE_01F8B8:                    ;           ||
    JSR SubSprYPosNoGrvty       ;$01F8B8    |/
    JSR SubOffscreen3Bnk1       ;$01F8BB    | Process offscreen from -$70 to +$60.
    BRA CODE_01F8C3             ;$01F8BE    |

CODE_01F8C0:                    ;```````````| Straight-line Eerie.
    JSR SubOffscreen0Bnk1       ;$01F8C0    | Process offscreen from -$40 to +$30.
CODE_01F8C3:                    ;```````````| Both Eeries reconvene here.
    JSR MarioSprInteractRt      ;$01F8C3    | Process interaction with Mario.
    JSR SetAnimationFrame       ;$01F8C6    | Use a 2-frame animation.
CODE_01F8C9:                    ;```````````| Game frozen, just draw GFX.
    JSR UpdateDirection         ;$01F8C9    | Set direction based on X speed.
    JMP SubSprGfx2Entry1        ;$01F8CC    | Draw a 16x16.





DATA_01F8CF:                    ;$01F8CF    | Max X/Y speeds for the Boo / Boo Block / Big Boo.
    db $08,$F8

DATA_01F8D1:                    ;$01F8D1    | Turning animation frames for the Big Boo.
    db $01,$02,$02,$01

    ; Big Boo / Boo / Boo Block misc RAM:
    ; $C2   - Flag for stationary (1) or following Mario (0).
    ; $1540 - Timer until the next check of whether Mario is facing the Boo.
    ; $1558 - Timer for the Big Boo's 'peeking' animation, and normal Boo's 'tongue waggle' animation. Block Boos also set this, but don't use it.
    ; $1570 - Frame timer for animation. Used to wait until showing the Boo's 'tongue waggle' or Big Boo's 'peeking' animations.
    ; $157C - Horizontal direction the Boo is facing.
    ; $15AC - Timer for turning the Boo around. Set to #$1F when starting.
    ; $1602 - Animation frame.
    ;          Boo: 0 = moving, 2/3 = tongue waggle, 6 = stationary
    ;          Boo Block: 0 = moving, 1 = semi-block, 2 = block
    ;          Big Boo: 0 = moving, 1/2 = turning, 3 = stationary (eyes covered)
    ; $18B6 - Used temporarily as the height of the sprite, for deciding which way to accelerate vertically towards Mario.

BigBoo:                         ;-----------| Big Boo MAIN
    JSR SubOffscreen1Bnk1       ;$01F8D5    | Process offscreen from -$40 to +$A0.
    LDA.b #$20                  ;$01F8D8    |
    BRA CODE_01F8E1             ;$01F8DA    |


BooPBooBlock:                   ;-----------| Boo MAIN, Boo Block MAIN (also shared with the Big Boo)
    JSR SubOffscreen0Bnk1       ;$01F8DC    | Process offscreen from -$40 to +$30.
    LDA.b #$10                  ;$01F8DF    |
CODE_01F8E1:                    ;           |
    STA.w $18B6                 ;$01F8E1    |
    LDA.w $14C8,X               ;$01F8E4    |\ 
    CMP.b #$08                  ;$01F8E7    ||
    BNE CODE_01F8EF             ;$01F8E9    ||
    LDA $9D                     ;$01F8EB    || If sprites are locked or not in a normal state, just draw graphics and interaction.
    BEQ CODE_01F8F2             ;$01F8ED    ||
CODE_01F8EF:                    ;           ||
    JMP CODE_01F9CE             ;$01F8EF    |/

CODE_01F8F2:                    ;```````````| Game not frozen / sprite is alive.
    JSR SubHorzPosBnk1          ;$01F8F2    |
    LDA.w $1540,X               ;$01F8F5    |\ 
    BNE CODE_01F914             ;$01F8F8    || Set timer until next check for whether Mario is facing the Boo.
    LDA.b #$20                  ;$01F8FA    ||
    STA.w $1540,X               ;$01F8FC    |/
    LDA $C2,X                   ;$01F8FF    |\\ 
    BEQ CODE_01F90C             ;$01F901    |||
    LDA $0F                     ;$01F903    |||
    CLC                         ;$01F905    ||| If the Boo is too close to Mario, don't start moving toward him.
    ADC.b #$0A                  ;$01F906    |||
    CMP.b #$14                  ;$01F908    |||
    BCC CODE_01F92F             ;$01F90A    ||/
CODE_01F90C:                    ;           ||
    STZ $C2,X                   ;$01F90C    ||\ 
    CPY $76                     ;$01F90E    ||| If Mario is facing away from the sprite, start moving towards him.
    BNE CODE_01F914             ;$01F910    |||
    INC $C2,X                   ;$01F912    |//
CODE_01F914:                    ;           |
    LDA $0F                     ;$01F914    |\ 
    CLC                         ;$01F916    ||
    ADC.b #$0A                  ;$01F917    ||
    CMP.b #$14                  ;$01F919    ||
    BCC CODE_01F92F             ;$01F91B    ||
    LDA.w $15AC,X               ;$01F91D    || Branch if the Boo needs to turn around.
    BNE CODE_01F971             ;$01F920    ||
    TYA                         ;$01F922    ||
    CMP.w $157C,X               ;$01F923    ||
    BEQ CODE_01F92F             ;$01F926    ||
    LDA.b #$1F                  ;$01F928    ||\ Set timer for turning the Boo around.
    STA.w $15AC,X               ;$01F92A    ||/
    BRA CODE_01F971             ;$01F92D    |/

CODE_01F92F:                    ;```````````| Boo is not turning.
    STZ.w $1602,X               ;$01F92F    |
    LDA $C2,X                   ;$01F932    |\ Branch if the Boo is moving.
    BEQ CODE_01F989             ;$01F934    |/
    LDA.b #$03                  ;$01F936    |\ Stationary animation frame for the Big Boo.
    STA.w $1602,X               ;$01F938    |/
    LDY $9E,X                   ;$01F93B    |\ 
    CPY.b #$28                  ;$01F93D    ||
    BEQ CODE_01F948             ;$01F93F    ||
    LDA.b #$00                  ;$01F941    ||
    CPY.b #$AF                  ;$01F943    || Get animation rate. Boo Block uses every frame, Boo / Big Boo use every two.
    BEQ CODE_01F948             ;$01F945    ||  If not time to change frame, skip down.
    INC A                       ;$01F947    ||
CODE_01F948:                    ;           ||
    AND $13                     ;$01F948    ||
    BNE CODE_01F96F             ;$01F94A    |/
    INC.w $1570,X               ;$01F94C    |\\ 
    LDA.w $1570,X               ;$01F94F    |||
    BNE CODE_01F959             ;$01F952    ||| If the animation timer hits 0, set the timer for the Boo's special animation (peeking/tongue waggle).
    LDA.b #$20                  ;$01F954    |||
    STA.w $1558,X               ;$01F956    ||/
CODE_01F959:                    ;           ||
    LDA $B6,X                   ;$01F959    ||\ 
    BEQ CODE_01F962             ;$01F95B    |||
    BPL CODE_01F961             ;$01F95D    |||
    INC A                       ;$01F95F    |||
    INC A                       ;$01F960    ||| Decelerate horizontally.
CODE_01F961:                    ;           |||
    DEC A                       ;$01F961    |||
CODE_01F962:                    ;           |||
    STA $B6,X                   ;$01F962    ||/
    LDA $AA,X                   ;$01F964    ||\ 
    BEQ CODE_01F96D             ;$01F966    |||
    BPL CODE_01F96C             ;$01F968    |||
    INC A                       ;$01F96A    |||
    INC A                       ;$01F96B    ||| Decelerate vertically.
CODE_01F96C:                    ;           |||
    DEC A                       ;$01F96C    |||
CODE_01F96D:                    ;           |||
    STA $AA,X                   ;$01F96D    |//
CODE_01F96F:                    ;           |
    BRA CODE_01F9C8             ;$01F96F    |

CODE_01F971:                    ;```````````| Boo is turning.
    CMP.b #$10                  ;$01F971    |\ 
    BNE CODE_01F97F             ;$01F973    ||
    PHA                         ;$01F975    ||
    LDA.w $157C,X               ;$01F976    || Flip facing direction when the turn timer gets low enough.
    EOR.b #$01                  ;$01F979    ||
    STA.w $157C,X               ;$01F97B    ||
    PLA                         ;$01F97E    |/
CODE_01F97F:                    ;           |
    LSR                         ;$01F97F    |\ 
    LSR                         ;$01F980    ||
    LSR                         ;$01F981    || Set turning animation frame (for the Big Boo).
    TAY                         ;$01F982    ||
    LDA.w DATA_01F8D1,Y         ;$01F983    ||
    STA.w $1602,X               ;$01F986    |/
CODE_01F989:                    ;```````````| Boo is moving.
    STZ.w $1570,X               ;$01F989    |
    LDA $13                     ;$01F98C    |\\ 
    AND.b #$07                  ;$01F98E    ||| Branch if not a frame for accelerating towards Mario.
    BNE CODE_01F9C8             ;$01F990    ||/
    JSR SubHorzPosBnk1          ;$01F992    ||\ 
    LDA $B6,X                   ;$01F995    |||
    CMP.w DATA_01F8CF,Y         ;$01F997    |||
    BEQ CODE_01F9A2             ;$01F99A    ||| Accelerate horizontally towards Mario.
    CLC                         ;$01F99C    |||
    ADC.w DATA_01EBB4,Y         ;$01F99D    |||
    STA $B6,X                   ;$01F9A0    ||/
CODE_01F9A2:                    ;           ||
    LDA $D3                     ;$01F9A2    ||\ 
    PHA                         ;$01F9A4    |||
    SEC                         ;$01F9A5    |||
    SBC.w $18B6                 ;$01F9A6    |||
    STA $D3                     ;$01F9A9    |||
    LDA $D4                     ;$01F9AB    |||
    PHA                         ;$01F9AD    |||
    SBC.b #$00                  ;$01F9AE    |||
    STA $D4                     ;$01F9B0    |||
    JSR SubVertPosBnk1          ;$01F9B2    ||| Accelerate vertically towards Mario.
    PLA                         ;$01F9B5    |||
    STA $D4                     ;$01F9B6    |||
    PLA                         ;$01F9B8    |||
    STA $D3                     ;$01F9B9    |||
    LDA $AA,X                   ;$01F9BB    |||
    CMP.w DATA_01F8CF,Y         ;$01F9BD    |||
    BEQ CODE_01F9C8             ;$01F9C0    |||
    CLC                         ;$01F9C2    |||
    ADC.w DATA_01EBB4,Y         ;$01F9C3    |||
    STA $AA,X                   ;$01F9C6    |//
CODE_01F9C8:                    ;```````````| Boo's code reconvenes.
    JSR SubSprXPosNoGrvty       ;$01F9C8    |\ Update X/Y position.
    JSR SubSprYPosNoGrvty       ;$01F9CB    |/
CODE_01F9CE:                    ;           |
    LDA $9E,X                   ;$01F9CE    |\ 
    CMP.b #$AF                  ;$01F9D0    || Branch if not the Boo Block.
    BNE CODE_01FA3D             ;$01F9D2    |/
    LDA $B6,X                   ;$01F9D4    |\ 
    BPL CODE_01F9DB             ;$01F9D6    ||
    EOR.b #$FF                  ;$01F9D8    || Branch if moving faster than #$08 (i.e. not in block form).
    INC A                       ;$01F9DA    ||
CODE_01F9DB:                    ;           ||
    LDY.b #$00                  ;$01F9DB    ||| Animation frame for the Boo Block when non-solid (0).
    CMP.b #$08                  ;$01F9DD    ||
    BCS CODE_01FA09             ;$01F9DF    |/
    PHA                         ;$01F9E1    |\ 
    LDA.w $1662,X               ;$01F9E2    ||
    PHA                         ;$01F9E5    ||
    LDA.w $167A,X               ;$01F9E6    ||
    PHA                         ;$01F9E9    ||
    ORA.b #$80                  ;$01F9EA    ||
    STA.w $167A,X               ;$01F9EC    || Act like a solid block.
    LDA.b #$0C                  ;$01F9EF    ||
    STA.w $1662,X               ;$01F9F1    ||
    JSR CODE_01B457             ;$01F9F4    ||
    PLA                         ;$01F9F7    ||
    STA.w $167A,X               ;$01F9F8    ||
    PLA                         ;$01F9FB    ||
    STA.w $1662,X               ;$01F9FC    |/
    PLA                         ;$01F9FF    |
    LDY.b #$01                  ;$01FA00    |\ 
    CMP.b #$04                  ;$01FA02    ||
    BCS CODE_01FA15             ;$01FA04    || Set animation frame for the block (semi-solid = 1, solid = 2).
    INY                         ;$01FA06    ||
    BRA CODE_01FA15             ;$01FA07    |/

CODE_01FA09:                    ;```````````| Non-solid Boo block.
    LDA.w $14C8,X               ;$01FA09    |\ 
    CMP.b #$08                  ;$01FA0C    ||
    BNE CODE_01FA15             ;$01FA0E    || Interact with Mario.
    PHY                         ;$01FA10    ||
    JSR MarioSprInteractRt      ;$01FA11    ||
    PLY                         ;$01FA14    |/
CODE_01FA15:                    ;           |
    TYA                         ;$01FA15    |\ Set animation frame.
    STA.w $1602,X               ;$01FA16    |/
    JSR SubSprGfx2Entry1        ;$01FA19    |\ 
    LDA.w $1602,X               ;$01FA1C    ||
    LDY.w $15EA,X               ;$01FA1F    ||
    PHX                         ;$01FA22    ||
    TAX                         ;$01FA23    ||
    LDA.w BooBlockTiles,X       ;$01FA24    || Draw a 16x16 sprite.
    STA.w $0302,Y               ;$01FA27    ||
    LDA.w $0303,Y               ;$01FA2A    ||
    AND.b #$F1                  ;$01FA2D    ||
    ORA.w BooBlockGfxProp,X     ;$01FA2F    ||
    STA.w $0303,Y               ;$01FA32    |/
    PLX                         ;$01FA35    |
    RTS                         ;$01FA36    |

BooBlockTiles:                  ;$01FA37    | Tile numbers for the Boo Block's frames.
    db $8C,$C8,$CA

BooBlockGfxProp:                ;$01FA3A    | YXPPCCCT for the Boo Block's frames.
    db $0E,$02,$02


CODE_01FA3D:                    ;```````````| Not the Boo Block (i.e. normal Boo or Big Boo).
    LDA.w $14C8,X               ;$01FA3D    |\ 
    CMP.b #$08                  ;$01FA40    || Interact with Mario.
    BNE CODE_01FA47             ;$01FA42    ||
    JSR MarioSprInteractRt      ;$01FA44    |/
CODE_01FA47:                    ;           |
    JSL CODE_038398             ;$01FA47    | Draw GFX.
    RTS                         ;$01FA4B    |





DATA_01FA4C:                    ;$01FA4C    | X flip values for Iggy's ball.
    db $40,$00

IggyBallTiles:                  ;$01FA4E    | Tile numbers for Iggy's ball.
    db $4A,$4C,$4A,$4C

DATA_01FA52:                    ;$01FA52    | YXPPCCCT for Iggy's ball.
    db $35,$35,$F5,$F5

DATA_01FA56:                    ;$01FA56    | X speeds for Iggy's ball.
    db $10,$F0

    ; Iggy's ball misc RAM:
    ; $157C - Horizontal direction the sprite is facing.
    
IggysBall:                      ;-----------| Iggy's ball MAIN.
    JSR SubSprGfx2Entry1        ;$01FA58    | Set up a 16x16.
    LDY.w $157C,X               ;$01FA5B    |\ 
    LDA.w DATA_01FA4C,Y         ;$01FA5E    || Get X flip based on direction.
    STA $00                     ;$01FA61    |/
    LDY.w $15EA,X               ;$01FA63    |\ 
    LDA $14                     ;$01FA66    ||
    LSR                         ;$01FA68    || 
    LSR                         ;$01FA69    ||
    AND.b #$03                  ;$01FA6A    || Animate the ball's tile.
    PHX                         ;$01FA6C    ||
    TAX                         ;$01FA6D    ||
    LDA.w IggyBallTiles,X       ;$01FA6E    ||
    STA.w $0302,Y               ;$01FA71    |/
    LDA.w DATA_01FA52,X         ;$01FA74    |\ 
    EOR $00                     ;$01FA77    || Set YXPCCCT for the ball.
    STA.w $0303,Y               ;$01FA79    |/
    PLX                         ;$01FA7C    |
    LDA $9D                     ;$01FA7D    |\ Return if game frozen.
    BNE Return01FAB3            ;$01FA7F    |/
    LDY.w $157C,X               ;$01FA81    |\ 
    LDA.w DATA_01FA56,Y         ;$01FA84    || Set X speed.
    STA $B6,X                   ;$01FA87    |/
    JSR SubSprXPosNoGrvty       ;$01FA89    |\ Update X/Y position.
    JSR SubSprYPosNoGrvty       ;$01FA8C    |/
    LDA $AA,X                   ;$01FA8F    |\ 
    CMP.b #$40                  ;$01FA91    ||
    BPL CODE_01FA9A             ;$01FA93    || Accelerate downwards.
    CLC                         ;$01FA95    ||
    ADC.b #$04                  ;$01FA96    ||| Gravity for Iggy's balls.
    STA $AA,X                   ;$01FA98    |/
CODE_01FA9A:                    ;           |
    JSR CODE_01FF98             ;$01FA9A    |\ 
    BCC CODE_01FAA3             ;$01FA9D    || If hitting Iggy's platform, bounce upwards.
    LDA.b #$F0                  ;$01FA9F    ||| Bounce Y speed for Iggy's balls.
    STA $AA,X                   ;$01FAA1    |/
CODE_01FAA3:                    ;           |
    JSR MarioSprInteractRt      ;$01FAA3    | Interact with Mario.
    LDA $D8,X                   ;$01FAA6    |\ 
    CMP.b #$44                  ;$01FAA8    ||
    BCC Return01FAB3            ;$01FAAA    || Erase in a cloud of smoke if it falls in the lava.
    CMP.b #$50                  ;$01FAAC    ||
    BCS Return01FAB3            ;$01FAAE    ||
    JSR CODE_019ACB             ;$01FAB0    |/
Return01FAB3:                   ;           |
    RTS                         ;$01FAB3    |

DATA_01FAB4:                    ;$01FAB4    | Unused?
    db $FF,$01,$00,$80,$60,$A0,$40,$D0
    db $D8,$C0,$C8,$0C,$F4



KoopaKid:                       ;-----------| Koopa Kid MAIN.
    LDA $C2,X                   ;$01FAC1    |
    JSL ExecutePtr              ;$01FAC3    |

KoopaKidPtrs:                   ; Pointers to routines for the different Koopa Kids.
    dw WallKoopaKids
    dw WallKoopaKids
    dw WallKoopaKids
    dw PlatformKoopaKids
    dw PlatformKoopaKids
    dw PipeKoopaKids
    dw PipeKoopaKids



DATA_01FAD5:                    ;$01FAD5    | Unused?...
    db $00,$FC,$F8,$F8,$F8,$F8,$F8,$F8
    
DATA_01FADD:                    ;$01FADD    | X speeds for Iggy/Larry during their hurt animation slide, indexed by the steepness of the platform.
    db $F8,$F8,$F8,$F4,$F0,$F0,$EC,$EC
    
DATA_01FAE5:                    ;$01FAE5    | Animation frames for Iggy/Larry's 'walking' animation.
    db $00,$01,$02,$00,$01,$02,$00,$01
    db $02,$00,$01,$02,$00,$01,$02,$01

    ; Iggy/Larry misc RAM:
    ; $C2   - Which boss the sprite is. 3 = Iggy, 4 = Larry.
    ; $1534 - Frame counter for Iggy's attacks. Throws a ball when this is 00 or 80.
    ; $154C - Timer for the hurt animation. Set to #$18 when bounced on, and #$10 when fireballed.
    ; $1558 - Timer for disabling interaction with Mario. Set to #$08 after touching the boss.
    ; $1564 - Timer for Iggy's ball throw animation.
    ; $1570 - Frame counter for animation.
    ; $157C - Horizontal direction the sprite is facing.
    ; $15AC - Timer for turning.
    ; $1602 - Animation frame. 0/1/2 = walking, 3 = hurt, 4/5/7/8/9/A/B = throwing, 6 = turning
    ; $160E - Flag for not being on the platform (i.e., falling into the lava).
    ; $163E - Timer for sinking in lava. Set to #$50 when the boss lands in it.

PlatformKoopaKids:              ;-----------| Iggy/Larry MAIN.
    LDA $9D                     ;$01FAF5    |\\ 
    ORA.w $154C,X               ;$01FAF7    ||| If game not frozen and boss not hurt...
    BNE CODE_01FB1A             ;$01FAFA    ||/
    JSR SubHorzPosBnk1          ;$01FAFC    ||\ 
    STY $00                     ;$01FAFF    |||
    LDA $36                     ;$01FB01    |||
    ASL                         ;$01FB03    ||| ...and Mario is above a lower portion of the platform...
    ROL                         ;$01FB04    ||| (i.e. Iggy is aiming downwards)
    AND.b #$01                  ;$01FB05    |||
    CMP $00                     ;$01FB07    |||
    BNE CODE_01FB1A             ;$01FB09    ||/
    INC.w $1534,X               ;$01FB0B    ||\ 
    LDA.w $1534,X               ;$01FB0E    ||| ...and Iggy's attack timer is #$00 or #$80...
    AND.b #$7F                  ;$01FB11    |||
    BNE CODE_01FB1A             ;$01FB13    ||/
    LDA.b #$7F                  ;$01FB15    ||\ Set timer to throw a ball.
    STA.w $1564,X               ;$01FB17    |//
CODE_01FB1A:                    ;           |
    STZ.w $15A0,X               ;$01FB1A    |
    LDA.w $163E,X               ;$01FB1D    |\ Branch if the boss is not in lava.
    BEQ CODE_01FB36             ;$01FB20    |/
    DEC A                       ;$01FB22    |\ Return if the boss isn't done sinking in lava.
    BNE Return01FB35            ;$01FB23    |/
    INC.w $13C6                 ;$01FB25    |\ 
    LDA.b #$FF                  ;$01FB28    || End the level.
    STA.w $1493                 ;$01FB2A    |/
    LDA.b #$0B                  ;$01FB2D    |\ SFX (music) played after Iggy/Larry is defeated.
    STA.w $1DFB                 ;$01FB2F    |/
    STZ.w $14C8,X               ;$01FB32    | Erase the boss.
Return01FB35:                   ;           |
    RTS                         ;$01FB35    |


CODE_01FB36:                    ;```````````| Boss is not dying/dead.
    JSL LoadTweakerBytes        ;$01FB36    |
    LDA $9D                     ;$01FB3A    |\ 
    BEQ CODE_01FB41             ;$01FB3C    || If game frozen, skip movement.
    JMP CODE_01FC08             ;$01FB3E    |/

CODE_01FB41:
    LDA.w $160E,X               ;$01FB41    |\ Branch if still on the platform (i.e., not falling).
    BEQ CODE_01FB7B             ;$01FB44    |/
    JSR SubSprXPosNoGrvty       ;$01FB46    |\ Update X/Y position.
    JSR SubSprYPosNoGrvty       ;$01FB49    |/
    LDA $AA,X                   ;$01FB4C    |\ 
    CMP.b #$40                  ;$01FB4E    ||
    BPL CODE_01FB56             ;$01FB50    || Apply gravity.
    INC $AA,X                   ;$01FB52    ||
    INC $AA,X                   ;$01FB54    |/
CODE_01FB56:                    ;           |
    LDA $D8,X                   ;$01FB56    |\ 
    CMP.b #$58                  ;$01FB58    ||
    BCC CODE_01FB6E             ;$01FB5A    || Once the boss falls into the lava, set its sinking timer and erase other sprites.
    CMP.b #$80                  ;$01FB5C    ||
    BCS CODE_01FB6E             ;$01FB5E    ||
    LDA.b #$20                  ;$01FB60    ||\ SFX for Iggy/Larry falling in lava.
    STA.w $1DFC                 ;$01FB62    ||/
    LDA.b #$50                  ;$01FB65    ||\\ How long the boss takes to sink in the lava.
    STA.w $163E,X               ;$01FB67    ||/
    JSL KillMostSprites         ;$01FB6A    |/
CODE_01FB6E:                    ;           |
    LDA $E4,X                   ;$01FB6E    |
    STA.w $14B8                 ;$01FB70    |
    LDA $D8,X                   ;$01FB73    |
    STA.w $14BA                 ;$01FB75    |
    JMP CODE_01FC0E             ;$01FB78    |


CODE_01FB7B:                    ;```````````| Boss is on the platform.
    JSR SubSprXPosNoGrvty       ;$01FB7B    | Update X position.
    LDA $13                     ;$01FB7E    |\ 
    AND.b #$1F                  ;$01FB80    ||
    ORA.w $1564,X               ;$01FB82    ||
    BNE CODE_01FB99             ;$01FB85    ||
    LDA.w $157C,X               ;$01FB87    ||
    PHA                         ;$01FB8A    || If not throwing a ball, check whether Iggy should turn towards Mario.
    JSR FaceMario               ;$01FB8B    ||
    PLA                         ;$01FB8E    ||
    CMP.w $157C,X               ;$01FB8F    ||
    BEQ CODE_01FB99             ;$01FB92    ||
    LDA.b #$10                  ;$01FB94    ||
    STA.w $15AC,X               ;$01FB96    |/
CODE_01FB99:                    ;           |
    STZ $AA,X                   ;$01FB99    |\ Clear X/Y speed for current frame.
    STZ $B6,X                   ;$01FB9B    |/
    LDA $36                     ;$01FB9D    |\ 
    BPL CODE_01FBA4             ;$01FB9F    ||
    CLC                         ;$01FBA1    ||
    ADC.b #$08                  ;$01FBA2    ||
CODE_01FBA4:                    ;           ||
    LSR                         ;$01FBA4    ||
    LSR                         ;$01FBA5    || Stores a value representing the steepness of the platform in $00,
    LSR                         ;$01FBA6    ||  and inverted steepness (for tilting left) in $01.
    LSR                         ;$01FBA7    ||
    TAY                         ;$01FBA8    ||
    STY $00                     ;$01FBA9    ||
    EOR.b #$FF                  ;$01FBAB    ||
    INC A                       ;$01FBAD    ||
    AND.b #$0F                  ;$01FBAE    ||
    STA $01                     ;$01FBB0    |/
    LDA.w $154C,X               ;$01FBB2    |\ Branch if the boss is currently in its hurt animation.
    BNE CODE_01FBD9             ;$01FBB5    |/
    LDA $37                     ;$01FBB7    |\ Branch if the platform is tilted leftwards (not rightwards).
    BNE CODE_01FBC9             ;$01FBB9    |/
    LDA $E4,X                   ;$01FBBB    |\ 
    CMP.b #$78                  ;$01FBBD    ||
    BCC CODE_01FBC5             ;$01FBBF    ||
    LDA.b #$FF                  ;$01FBC1    || Get an X speed so that the boss moves towards the center of the platform.
    BRA CODE_01FBEE             ;$01FBC3    ||
CODE_01FBC5:                    ;           ||
    LDA.b #$01                  ;$01FBC5    ||
    BRA CODE_01FBEE             ;$01FBC7    |/

CODE_01FBC9:                    ;```````````| Platform is tilted left.
    LDY $01                     ;$01FBC9    |
    LDA $E4,X                   ;$01FBCB    |\ 
    CMP.b #$78                  ;$01FBCD    ||
    BCS CODE_01FBD5             ;$01FBCF    ||
    LDA.b #$01                  ;$01FBD1    || ...Also get an X speed so that the boss moves towards the center.
    BRA CODE_01FBEE             ;$01FBD3    ||
CODE_01FBD5:                    ;           ||
    LDA.b #$FF                  ;$01FBD5    ||
    BRA CODE_01FBEE             ;$01FBD7    |/

CODE_01FBD9:                    ;```````````| Boss is in its hurt animation.
    LDA $37                     ;$01FBD9    |\ 
    BNE CODE_01FBE7             ;$01FBDB    ||
    LDY $00                     ;$01FBDD    ||
    LDA.w DATA_01FADD,Y         ;$01FBDF    ||
    EOR.b #$FF                  ;$01FBE2    ||
    INC A                       ;$01FBE4    || Get an X speed to slide the boss with, based on the current steepness of the platform.
    BRA CODE_01FBEC             ;$01FBE5    ||
CODE_01FBE7:                    ;           ||
    LDY $01                     ;$01FBE7    ||
    LDA.w DATA_01FADD,Y         ;$01FBE9    ||
CODE_01FBEC:                    ;           ||
    ASL                         ;$01FBEC    ||
    ASL                         ;$01FBED    |/ 
CODE_01FBEE:                    ;```````````| X speed is done.
    STA $B6,X                   ;$01FBEE    |
    INC.w $1570,X               ;$01FBF0    |\ 
    LDA $B6,X                   ;$01FBF3    || Increase animation timer.
    BEQ CODE_01FBFA             ;$01FBF5    ||  This actually always increases by 2 each frame, since the boss's X speed is never exactly 0.
    INC.w $1570,X               ;$01FBF7    |/
CODE_01FBFA:                    ;           |
    LDA.w $1570,X               ;$01FBFA    |\ 
    LSR                         ;$01FBFD    ||
    LSR                         ;$01FBFE    ||
    AND.b #$0F                  ;$01FBFF    || Handle the boss's 'walking' animation.
    TAY                         ;$01FC01    ||
    LDA.w DATA_01FAE5,Y         ;$01FC02    ||
    STA.w $1602,X               ;$01FC05    |/
CODE_01FC08:                    ;           |
    JSR CODE_01FD50             ;$01FC08    | Get the actual X/Y position of the boss, accounting for the rotation of the platform.
    JSR CODE_01FC62             ;$01FC0B    | Handle Mario/fireball contact.
CODE_01FC0E:                    ;           |
    LDA.w $154C,X               ;$01FC0E    |\ Branch if the boss is in its hurt animation.
    BNE CODE_01FC4E             ;$01FC11    |/
    LDA.w $157C,X               ;$01FC13    |\ 
    PHA                         ;$01FC16    ||
    LDY.w $15AC,X               ;$01FC17    ||
    BEQ CODE_01FC2A             ;$01FC1A    ||
    CPY.b #$08                  ;$01FC1C    || Handle the turning animation if applicable.
    BCC CODE_01FC25             ;$01FC1E    ||
    EOR.b #$01                  ;$01FC20    ||
    STA.w $157C,X               ;$01FC22    ||
CODE_01FC25:                    ;           ||
    LDA.b #$06                  ;$01FC25    ||| Animation frame for turning (6).
    STA.w $1602,X               ;$01FC27    |/
CODE_01FC2A:                    ;           |
    LDA.w $1564,X               ;$01FC2A    |\ 
    BEQ CODE_01FC46             ;$01FC2D    ||
    PHA                         ;$01FC2F    ||
    LSR                         ;$01FC30    ||
    LSR                         ;$01FC31    ||
    LSR                         ;$01FC32    ||
    TAY                         ;$01FC33    || Handle Iggy/Larry's ball-throwing animation if applicable.
    LDA.w DATA_01FD95,Y         ;$01FC34    ||
    STA.w $1602,X               ;$01FC37    ||
    PLA                         ;$01FC3A    ||
    CMP.b #$28                  ;$01FC3B    ||
    BNE CODE_01FC46             ;$01FC3D    ||
    LDA $9D                     ;$01FC3F    ||
    BNE CODE_01FC46             ;$01FC41    ||
    JSR ThrowBall               ;$01FC43    |/
CODE_01FC46:                    ;           |
    JSR CODE_01FEBC             ;$01FC46    | Draw GFX.
    PLA                         ;$01FC49    |
    STA.w $157C,X               ;$01FC4A    |
    RTS                         ;$01FC4D    |

CODE_01FC4E:                    ;```````````| Iggy/Larry is in their hurt animation.
    CMP.b #$10                  ;$01FC4E    |\ 
    BCC CODE_01FC5A             ;$01FC50    ||
CODE_01FC52:                    ;           ||
    LDA.b #$03                  ;$01FC52    ||
    STA.w $1602,X               ;$01FC54    || If in their 'spinning shell' hurt frame, run the special GFX subroutine at $01FF5B.
    JMP CODE_01FEBC             ;$01FC57    || Else, run the normal one at $01FEBC.
CODE_01FC5A:                    ;           ||
    CMP.b #$08                  ;$01FC5A    ||
    BCC CODE_01FC52             ;$01FC5C    ||
    JSR CODE_01FF5B             ;$01FC5E    |/
Return01FC61:                   ;           |
    RTS                         ;$01FC61    |



CODE_01FC62:                    ;-----------| Subroutine for Iggy/Larry to handle Mario and fireball interaction.
    LDA $71                     ;$01FC62    |\ 
    CMP.b #$01                  ;$01FC64    ||
    BCS Return01FC61            ;$01FC66    || Return if Mario is currently frozen or Iggy/Larry are falling into the lava.
    LDA.w $160E,X               ;$01FC68    ||
    BNE Return01FC61            ;$01FC6B    |/
    LDA $E4,X                   ;$01FC6D    |\ 
    CMP.b #$20                  ;$01FC6F    ||
    BCC CODE_01FC77             ;$01FC71    ||
    CMP.b #$D8                  ;$01FC73    ||
    BCC CODE_01FC84             ;$01FC75    || If Iggy/Larry just fell off the platform, set the flag for such.
CODE_01FC77:                    ;           ||
    LDA.w $14B8                 ;$01FC77    ||
    STA $E4,X                   ;$01FC7A    ||
    LDA.w $14BA                 ;$01FC7C    ||
    STA $D8,X                   ;$01FC7F    ||
    INC.w $160E,X               ;$01FC81    |/
CODE_01FC84:                    ;           |
    LDA.w $14B8                 ;$01FC84    |\\ 
    SEC                         ;$01FC87    |||
    SBC.b #$08                  ;$01FC88    |||
    STA $00                     ;$01FC8A    |||
    LDA.w $14BA                 ;$01FC8C    |||
    CLC                         ;$01FC8F    |||
    ADC.b #$60                  ;$01FC90    ||| Get clipping information for Iggy.
    STA $01                     ;$01FC92    |||
    LDA.b #$0F                  ;$01FC94    |||
    STA $02                     ;$01FC96    |||
    LDA.b #$0C                  ;$01FC98    |||
    STA $03                     ;$01FC9A    |||
    STZ $08                     ;$01FC9C    |||
    STZ $09                     ;$01FC9E    ||/
    LDA $7E                     ;$01FCA0    ||\ 
    CLC                         ;$01FCA2    |||
    ADC.b #$02                  ;$01FCA3    |||
    STA $04                     ;$01FCA5    |||
    LDA $80                     ;$01FCA7    |||
    CLC                         ;$01FCA9    |||
    ADC.b #$10                  ;$01FCAA    ||| Get clipping information for Mario.
    STA $05                     ;$01FCAC    |||
    LDA.b #$0C                  ;$01FCAE    |||
    STA $06                     ;$01FCB0    |||
    LDA.b #$0E                  ;$01FCB2    |||
    STA $07                     ;$01FCB4    |||
    STZ $0A                     ;$01FCB6    |||
    STZ $0B                     ;$01FCB8    ||/
    JSL CheckForContact         ;$01FCBA    ||\ Branch if not in contact; check fireball contact instead.
    BCC CODE_01FD0A             ;$01FCBE    |//
    LDA.w $1558,X               ;$01FCC0    |\ Return if interaction is disabled.
    BNE Return01FD09            ;$01FCC3    |/
    LDA.b #$08                  ;$01FCC5    |\ Disable interaction for a few frames after.
    STA.w $1558,X               ;$01FCC7    |/
    LDA $72                     ;$01FCCA    |\ If Mario is on the ground, branch to hurt him. Else, he just hurt the boss.
    BEQ CODE_01FD05             ;$01FCCC    |/
    LDA.b #$28                  ;$01FCCE    |\ SFX for hitting Iggy/Larry.
    STA.w $1DFC                 ;$01FCD0    |/
    JSL BoostMarioSpeed         ;$01FCD3    | Bounce Mario upwards.
    LDA $E4,X                   ;$01FCD7    |\ 
    PHA                         ;$01FCD9    ||
    LDA $D8,X                   ;$01FCDA    ||
    PHA                         ;$01FCDC    ||
    LDA.w $14B8                 ;$01FCDD    ||
    SEC                         ;$01FCE0    ||
    SBC.b #$08                  ;$01FCE1    ||
    STA $E4,X                   ;$01FCE3    ||
    LDA.w $14BA                 ;$01FCE5    || Display a contact sprite at the boss's position.
    SEC                         ;$01FCE8    ||
    SBC.b #$10                  ;$01FCE9    ||
    STA $D8,X                   ;$01FCEB    ||
    STZ.w $15A0,X               ;$01FCED    ||
    JSL DispContactMario        ;$01FCF0    ||
    PLA                         ;$01FCF4    ||
    STA $D8,X                   ;$01FCF5    ||
    PLA                         ;$01FCF7    ||
    STA $E4,X                   ;$01FCF8    |/
    LDA.w $154C,X               ;$01FCFA    |\ Return if Iggy/Larry is already sliding.
    BNE Return01FD09            ;$01FCFD    |/
    LDA.b #$18                  ;$01FCFF    |\\ Length of Iggy/Larry slide when bounced on.
    STA.w $154C,X               ;$01FD01    |/
    RTS                         ;$01FD04    |

CODE_01FD05:                    ;```````````| Mario touched Iggy/Larry while on the ground; hurt him.
    JSL HurtMario               ;$01FD05    |
Return01FD09:                   ;           |
    RTS                         ;$01FD09    |


CODE_01FD0A:                    ;```````````| Mario isn't in contact with the boss; check for fireball contact.
    LDY.b #$0A                  ;$01FD0A    |
CODE_01FD0C:                    ;           |
    STY.w $1695                 ;$01FD0C    |\ 
    LDA.w $170B,Y               ;$01FD0F    || Find an extended sprite slot with a fireball in it.
    CMP.b #$05                  ;$01FD12    ||
    BNE CODE_01FD4A             ;$01FD14    |/
    LDA.w $171F,Y               ;$01FD16    |\ 
    SEC                         ;$01FD19    ||
    SBC $1A                     ;$01FD1A    ||
    STA $04                     ;$01FD1C    ||
    STZ $0A                     ;$01FD1E    ||
    LDA.w $1715,Y               ;$01FD20    ||
    SEC                         ;$01FD23    || Get clipping information for the fireball.
    SBC $1C                     ;$01FD24    ||
    STA $05                     ;$01FD26    ||
    STZ $0B                     ;$01FD28    ||
    LDA.b #$08                  ;$01FD2A    ||
    STA $06                     ;$01FD2C    ||
    STA $07                     ;$01FD2E    |/
    JSL CheckForContact         ;$01FD30    |\ Branch to next slot if this one isn't in contact with the boss.
    BCC CODE_01FD4A             ;$01FD34    |/
    LDA.b #$01                  ;$01FD36    |\ 
    STA.w $170B,Y               ;$01FD38    || If it did hit, erase in a cloud of smoke.
    LDA.b #$0F                  ;$01FD3B    ||
    STA.w $176F,Y               ;$01FD3D    |/
    LDA.b #$01                  ;$01FD40    |\ SFX for a fireball hitting Iggy/Larry.
    STA.w $1DF9                 ;$01FD42    |/
    LDA.b #$10                  ;$01FD45    |\\ Length of Iggy/Larry slide when bounced on.
    STA.w $154C,X               ;$01FD47    |/
CODE_01FD4A:                    ;           |
    DEY                         ;$01FD4A    |
    CPY.b #$07                  ;$01FD4B    |
    BNE CODE_01FD0C             ;$01FD4D    |
    RTS                         ;$01FD4F    |



CODE_01FD50:                    ;-----------| Subroutine for getting Iggy/Larry's position on top of the platform.
    LDA $E4,X                   ;$01FD50    |\ 
    CLC                         ;$01FD52    ||
    ADC.b #$08                  ;$01FD53    ||
    STA.w $14B4                 ;$01FD55    ||
    LDA.w $14E0,X               ;$01FD58    ||
    ADC.b #$00                  ;$01FD5B    ||
    STA.w $14B5                 ;$01FD5D    || Set up the interaction point to check.
    LDA $D8,X                   ;$01FD60    ||
    CLC                         ;$01FD62    ||
    ADC.b #$2F                  ;$01FD63    ||
    STA.w $14B6                 ;$01FD65    ||
    LDA.w $14D4,X               ;$01FD68    ||
    ADC.b #$00                  ;$01FD6B    ||
    STA.w $14B7                 ;$01FD6D    |/
    REP #$20                    ;$01FD70    |
    LDA $36                     ;$01FD72    |\ 
    EOR.w #$01FF                ;$01FD74    ||
    INC A                       ;$01FD77    || Temporarily invert the platform's angle?
    AND.w #$01FF                ;$01FD78    ||
    STA $36                     ;$01FD7B    |/
    SEP #$20                    ;$01FD7D    |
    PHX                         ;$01FD7F    |
    JSL CODE_01CC9D             ;$01FD80    | Get actual position on the platform.
    PLX                         ;$01FD84    |
    REP #$20                    ;$01FD85    |
    LDA $36                     ;$01FD87    |\ 
    EOR.w #$01FF                ;$01FD89    ||
    INC A                       ;$01FD8C    || Restore the platform's angle.
    AND.w #$01FF                ;$01FD8D    ||
    STA $36                     ;$01FD90    |/
    SEP #$20                    ;$01FD92    |
    RTS                         ;$01FD94    |





DATA_01FD95:                    ;$01FD95    | Animation frames for Iggy/Larry's ball throwing animation
    db $04,$0B,$0B,$0B,$0B,$0A,$0A,$09
    db $09,$08,$08,$07,$04,$05,$05,$05

BallPositionDispX:              ;$01FDA5    | X offsets from Iggy/Larry to spawn the ball at, based on his direction.
    db $08,$F8

ThrowBall:                      ;-----------| Subroutine for Iggy/Larry to spawn a ball.
    LDY.b #$05                  ;$01FDA7    |\ 
CODE_01FDA9:                    ;           ||
    LDA.w $14C8,Y               ;$01FDA9    ||
    BEQ GenerateBall            ;$01FDAC    || Find an empty slot in slots #$00-#$05. Return if none found.
    DEY                         ;$01FDAE    ||
    BPL CODE_01FDA9             ;$01FDAF    ||
    RTS                         ;$01FDB1    |/

GenerateBall:
    LDA.b #$20                  ;$01FDB2    |\ SFX for Iggy/Larry throwing a ball.
    STA.w $1DF9                 ;$01FDB4    |/
    LDA.b #$08                  ;$01FDB7    |\ 
    STA.w $14C8,Y               ;$01FDB9    || Set sprite number and status.
    LDA.b #$A7                  ;$01FDBC    ||
    STA.w $009E,Y               ;$01FDBE    |/
    PHX                         ;$01FDC1    |
    TYX                         ;$01FDC2    |
    JSL InitSpriteTables        ;$01FDC3    | Initialize the sprite.
    PLX                         ;$01FDC7    |
    PHX                         ;$01FDC8    |
    LDA.w $157C,X               ;$01FDC9    |\ Set facing direction to be the same as the boss.
    STA.w $157C,Y               ;$01FDCC    |/
    TAX                         ;$01FDCF    |
    LDA.w $14B8                 ;$01FDD0    |\ 
    SEC                         ;$01FDD3    ||
    SBC.b #$08                  ;$01FDD4    ||
    ADC.w BallPositionDispX,X   ;$01FDD6    ||
    STA.w $00E4,Y               ;$01FDD9    ||
    LDA.b #$00                  ;$01FDDC    ||
    STA.w $14E0,Y               ;$01FDDE    || Spawn at Iggy/Larry's position.
    LDA.w $14BA                 ;$01FDE1    ||
    SEC                         ;$01FDE4    ||
    SBC.b #$18                  ;$01FDE5    ||
    STA.w $00D8,Y               ;$01FDE7    ||
    LDA.b #$00                  ;$01FDEA    ||
    SBC.b #$00                  ;$01FDEC    ||
    STA.w $14D4,Y               ;$01FDEE    |/
    PLX                         ;$01FDF1    |
    RTS                         ;$01FDF2    |



DATA_01FDF3:                    ;$01FDF3    | X position offsets for each of Iggy/Larry's tiles. Left/right refer to the direction the boss is facing.
    db $F7,$FF,$00,$F8          ; 00 - Left - Walking A
    db $F7,$FF,$00,$F8          ; 01 - Left - Walking B
    db $F8,$00,$00,$F8          ; 02 - Left - Walking C
    db $FB,$03,$00,$F8          ; 03 - Left - Hurt
    db $F8,$00,$00,$F8          ; 04 - Left - Ball throw A
    db $FA,$02,$00,$F8          ; 05 - Left - Ball throw B
    db $00,$00,$F8,$00          ; 06 - Left - Turning
    db $00,$F8,$00,$F8          ; 07 - Left - Ball throw C
    db $00,$00,$00,$00          ; 08 - Left - Ball throw D
    db $FB,$F8,$00,$F8          ; 09 - Left - Ball throw E
    db $F4,$F8,$00,$F8          ; 0A - Left - Ball throw F
    db $00,$F8,$00,$F8          ; 0B - Left - Ball throw G
    db $09,$09,$00,$10          ; 00 - Right - Walking A
    db $09,$09,$00,$10          ; 01 - Right - Walking B
    db $08,$08,$00,$10          ; 02 - Right - Walking C
    db $05,$05,$00,$10          ; 03 - Right - Hurt
    db $08,$08,$00,$10          ; 04 - Right - Ball throw A
    db $06,$06,$00,$10          ; 05 - Right - Ball throw B
    db $00,$08,$08,$08          ; 06 - Right - Turning
    db $00,$10,$00,$10          ; 07 - Right - Ball throw C
    db $00,$08,$00,$08          ; 08 - Right - Ball throw D
    db $05,$10,$00,$10          ; 09 - Right - Ball throw E
    db $0C,$10,$00,$10          ; 0A - Right - Ball throw F
    db $00,$10,$00,$10          ; 0B - Right - Ball throw G
    
DATA_01FE53:                    ;$01FDF3    | Y position offsets for each of Iggy/Larry's tiles.
    db $FA,$F2,$00,$09          ; 00 - Walking A
    db $F9,$F1,$00,$08          ; 01 - Walking B
    db $F8,$F0,$00,$08          ; 02 - Walking C
    db $FE,$F6,$00,$08          ; 03 - Hurt
    db $FC,$F4,$00,$08          ; 04 - Ball throw A
    db $FF,$F7,$00,$08          ; 05 - Ball throw B
    db $00,$F0,$F8,$F0          ; 06 - Turning
    db $00,$00,$00,$00          ; 07 - Ball throw C
    db $00,$00,$00,$00          ; 08 - Ball throw D
    db $FC,$00,$00,$00          ; 09 - Ball throw E
    db $F9,$00,$00,$00          ; 0A - Ball throw F
    db $00,$08,$00,$08          ; 0B - Ball throw G

DATA_01FE83:                    ;$01FE83    | Tile numbers for each of Iggy/Larry's tiles.
    db $00,$0C,$02,$0A          ; 00 - Walking A
    db $00,$0C,$22,$0A          ; 01 - Walking B
    db $00,$0C,$20,$0A          ; 02 - Walking C
    db $00,$0C,$20,$0A          ; 03 - Hurt
    db $00,$0C,$20,$0A          ; 04 - Ball throw A
    db $00,$0C,$20,$0A          ; 05 - Ball throw B
    db $24,$1C,$04,$1C          ; 06 - Turning
    db $0E,$0D,$0E,$0D          ; 07 - Ball throw C
    db $0E,$1D,$0E,$1D          ; 08 - Ball throw D
    db $4A,$0D,$0E,$0D          ; 09 - Ball throw E
    db $4A,$0D,$0E,$0D          ; 0A - Ball throw F
    db $20,$0A,$20,$0A          ; 0B - Ball throw G

DATA_01FEB3:                    ;$01FEB3    | Tiles for Larry's hair.
    db $06,$02,$08

DATA_01FEB6:                    ;$01FEB6    | Sizes for each of Iggy/Larry's tiles.
    db $02,$00,$02,$00
    
DATA_01FEBA:                    ;$01FEB9    | YXPPCCCT values for Iggy/Larry.
    db $37                      ; Iggy
    db $3B                      ; Larry

CODE_01FEBC:                    ;-----------| Main GFX subroutine for Iggy/Larry.
    LDY $C2,X                   ;$01FEBC    |\ 
    LDA.w DATA_01FEBA-3,Y       ;$01FEBE    || $0D - YXPPCCCT.
    STA $0D                     ;$01FEC1    |/
    STY $05                     ;$01FEC3    |
    LDY.w $15EA,X               ;$01FEC5    |
    LDA.w $157C,X               ;$01FEC8    |\ 
    LSR                         ;$01FECB    ||
    ROR                         ;$01FECC    ||
    LSR                         ;$01FECD    || $02 - X flip.
    AND.b #$40                  ;$01FECE    ||
    EOR.b #$40                  ;$01FED0    ||
    STA $02                     ;$01FED2    |/
    LDA.w $1602,X               ;$01FED4    |\ 
    ASL                         ;$01FED7    || $03 - Animation frame index.
    ASL                         ;$01FED8    ||
    STA $03                     ;$01FED9    |/
    PHX                         ;$01FEDB    |
    LDX.b #$03                  ;$01FEDC    |\ 
CODE_01FEDE:                    ;           ||
    PHX                         ;$01FEDE    ||
    TXA                         ;$01FEDF    ||\ 
    CLC                         ;$01FEE0    ||| Get index to current tile.
    ADC $03                     ;$01FEE1    |||
    TAX                         ;$01FEE3    ||/
    PHX                         ;$01FEE4    ||
    LDA $02                     ;$01FEE5    ||\ 
    BEQ CODE_01FEEE             ;$01FEE7    |||
    TXA                         ;$01FEE9    |||
    CLC                         ;$01FEEA    |||
    ADC.b #$30                  ;$01FEEB    |||
    TAX                         ;$01FEED    ||| Store X position of the tile.
CODE_01FEEE:                    ;           |||
    LDA.w $14B8                 ;$01FEEE    |||
    SEC                         ;$01FEF1    |||
    SBC.b #$08                  ;$01FEF2    |||
    CLC                         ;$01FEF4    |||
    ADC.w DATA_01FDF3,X         ;$01FEF5    |||
    STA.w $0300,Y               ;$01FEF8    ||/
    PLX                         ;$01FEFB    ||
    LDA.w $14BA                 ;$01FEFC    ||\ 
    CLC                         ;$01FEFF    |||
    ADC.b #$60                  ;$01FF00    ||| Store Y position of the tile.
    CLC                         ;$01FF02    |||
    ADC.w DATA_01FE53,X         ;$01FF03    |||
    STA.w $0301,Y               ;$01FF06    ||/
    LDA.w DATA_01FE83,X         ;$01FF09    ||\ Store the tile number.
    STA.w $0302,Y               ;$01FF0C    ||/
    PHX                         ;$01FF0F    ||
    LDX $05                     ;$01FF10    ||\ 
    CPX.b #$03                  ;$01FF12    |||
    BNE CODE_01FF22             ;$01FF14    |||
    CMP.b #$05                  ;$01FF16    |||
    BCS CODE_01FF22             ;$01FF18    ||| Change Larry's hair tiles, to make him look different from Iggy.
    LSR                         ;$01FF1A    |||
    TAX                         ;$01FF1B    |||
    LDA.w DATA_01FEB3,X         ;$01FF1C    |||
    STA.w $0302,Y               ;$01FF1F    ||/
CODE_01FF22:                    ;           ||
    LDA.w $0302,Y               ;$01FF22    ||\ 
    CMP.b #$4A                  ;$01FF25    |||
    LDA $0D                     ;$01FF27    ||| Set the YXPPCCCT for the boss.
    BCC CODE_01FF2D             ;$01FF29    |||
    LDA.b #$35                  ;$01FF2B    |||| YXPPCCCT for Iggy/Larry's hand, during the ball-throwing animation.
CODE_01FF2D:                    ;           |||
    ORA $02                     ;$01FF2D    |||
    STA.w $0303,Y               ;$01FF2F    ||/
    PLA                         ;$01FF32    ||
    AND.b #$03                  ;$01FF33    ||
    TAX                         ;$01FF35    ||
    PHY                         ;$01FF36    ||
    TYA                         ;$01FF37    ||\ 
    LSR                         ;$01FF38    |||
    LSR                         ;$01FF39    ||| Set the size of the tile.
    TAY                         ;$01FF3A    |||
    LDA.w DATA_01FEB6,X         ;$01FF3B    |||
    STA.w $0460,Y               ;$01FF3E    ||/
    PLY                         ;$01FF41    ||
    INY                         ;$01FF42    ||
    INY                         ;$01FF43    ||
    INY                         ;$01FF44    ||
    INY                         ;$01FF45    ||
    PLX                         ;$01FF46    ||
    DEX                         ;$01FF47    ||
    BPL CODE_01FEDE             ;$01FF48    |/
    PLX                         ;$01FF4A    |
    LDY.b #$FF                  ;$01FF4B    |\ 
    LDA.b #$03                  ;$01FF4D    || Draw 4 tiles with a manually set size.
    JSR FinishOAMWriteRt        ;$01FF4F    |/
    RTS                         ;$01FF52    |



DATA_01FF53:                    ;$01FF53    | Tile numbers for the shell's animation.
    db $2C,$2E,$2C,$2E

DATA_01FF57:                    ;$01FF57    | Y/X flip for the shell's animation.
    db $00,$00,$40,$00

CODE_01FF5B:                    ;-----------| GFX subroutine for Iggy/Larry when in their 'spinning shell' frame (while being hurt).
    PHX                         ;$01FF5B    |
    LDY $C2,X                   ;$01FF5C    |\ 
    LDA.w DATA_01FEBA-3,Y       ;$01FF5E    || Get the YXPPCCCT for the boss.
    STA $0D                     ;$01FF61    |/
    LDY.b #$70                  ;$01FF63    |
    LDA.w $14B8                 ;$01FF65    |\ 
    SEC                         ;$01FF68    || Store the X position.
    SBC.b #$08                  ;$01FF69    ||
    STA.w $0300,Y               ;$01FF6B    |/
    LDA.w $14BA                 ;$01FF6E    |\ 
    CLC                         ;$01FF71    || Store the Y position.
    ADC.b #$60                  ;$01FF72    ||
    STA.w $0301,Y               ;$01FF74    |/
    LDA $14                     ;$01FF77    |\ 
    LSR                         ;$01FF79    ||
    AND.b #$03                  ;$01FF7A    || Store the tile number.
    TAX                         ;$01FF7C    ||
    LDA.w DATA_01FF53,X         ;$01FF7D    ||
    STA.w $0302,Y               ;$01FF80    |/
    LDA.b #$30                  ;$01FF83    |\ 
    ORA.w DATA_01FF57,X         ;$01FF85    || Store YXPPCCCT.
    ORA $0D                     ;$01FF88    ||
    STA.w $0303,Y               ;$01FF8A    |/
    TYA                         ;$01FF8D    |\ 
    LSR                         ;$01FF8E    ||
    LSR                         ;$01FF8F    || Set size as a 16x16.
    TAY                         ;$01FF90    ||
    LDA.b #$02                  ;$01FF91    ||
    STA.w $0460,Y               ;$01FF93    |/
    PLX                         ;$01FF96    |
    RTS                         ;$01FF97    |



CODE_01FF98:                    ;-----------| Subroutine to handle interaction for Iggy's balls with his platform. Returns carry set if so.
    LDA $E4,X                   ;$01FF98    |\ 
    CLC                         ;$01FF9A    ||
    ADC.b #$08                  ;$01FF9B    ||
    STA.w $14B4                 ;$01FF9D    ||
    LDA.w $14E0,X               ;$01FFA0    ||
    ADC.b #$00                  ;$01FFA3    ||
    STA.w $14B5                 ;$01FFA5    || Set up $14B4-$14B7 with the ball's position.
    LDA $D8,X                   ;$01FFA8    ||
    CLC                         ;$01FFAA    ||
    ADC.b #$0F                  ;$01FFAB    ||
    STA.w $14B6                 ;$01FFAD    ||
    LDA.w $14D4,X               ;$01FFB0    ||
    ADC.b #$00                  ;$01FFB3    ||
    STA.w $14B7                 ;$01FFB5    |/
    PHX                         ;$01FFB8    |
    JSL CODE_01CC9D             ;$01FFB9    | Check for contact with the platform.
    PLX                         ;$01FFBD    |
    RTS                         ;$01FFBE    |

Empty01FFBF:
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF